// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_make_win97_Pipeline_win9x9_read_pix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_pix_i_dout,
        s_pix_i_num_data_valid,
        s_pix_i_fifo_cap,
        s_pix_i_empty_n,
        s_pix_i_read,
        s_win_i_din,
        s_win_i_num_data_valid,
        s_win_i_fifo_cap,
        s_win_i_full_n,
        s_win_i_write,
        empty,
        zext_ln98,
        lb1_7_address0,
        lb1_7_ce0,
        lb1_7_q0,
        lb1_7_address1,
        lb1_7_ce1,
        lb1_7_we1,
        lb1_7_d1,
        lb1_6_address0,
        lb1_6_ce0,
        lb1_6_q0,
        lb1_6_address1,
        lb1_6_ce1,
        lb1_6_we1,
        lb1_6_d1,
        lb1_5_address0,
        lb1_5_ce0,
        lb1_5_q0,
        lb1_5_address1,
        lb1_5_ce1,
        lb1_5_we1,
        lb1_5_d1,
        lb1_4_address0,
        lb1_4_ce0,
        lb1_4_q0,
        lb1_4_address1,
        lb1_4_ce1,
        lb1_4_we1,
        lb1_4_d1,
        lb1_3_address0,
        lb1_3_ce0,
        lb1_3_q0,
        lb1_3_address1,
        lb1_3_ce1,
        lb1_3_we1,
        lb1_3_d1,
        lb1_2_address0,
        lb1_2_ce0,
        lb1_2_q0,
        lb1_2_address1,
        lb1_2_ce1,
        lb1_2_we1,
        lb1_2_d1,
        lb1_1_address0,
        lb1_1_ce0,
        lb1_1_q0,
        lb1_1_address1,
        lb1_1_ce1,
        lb1_1_we1,
        lb1_1_d1,
        lb1_address0,
        lb1_ce0,
        lb1_q0,
        lb1_address1,
        lb1_ce1,
        lb1_we1,
        lb1_d1,
        zext_ln97
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] s_pix_i_dout;
input  [10:0] s_pix_i_num_data_valid;
input  [10:0] s_pix_i_fifo_cap;
input   s_pix_i_empty_n;
output   s_pix_i_read;
output  [1296:0] s_win_i_din;
input  [10:0] s_win_i_num_data_valid;
input  [10:0] s_win_i_fifo_cap;
input   s_win_i_full_n;
output   s_win_i_write;
input  [16:0] empty;
input  [8:0] zext_ln98;
output  [4:0] lb1_7_address0;
output   lb1_7_ce0;
input  [15:0] lb1_7_q0;
output  [4:0] lb1_7_address1;
output   lb1_7_ce1;
output   lb1_7_we1;
output  [15:0] lb1_7_d1;
output  [4:0] lb1_6_address0;
output   lb1_6_ce0;
input  [15:0] lb1_6_q0;
output  [4:0] lb1_6_address1;
output   lb1_6_ce1;
output   lb1_6_we1;
output  [15:0] lb1_6_d1;
output  [4:0] lb1_5_address0;
output   lb1_5_ce0;
input  [15:0] lb1_5_q0;
output  [4:0] lb1_5_address1;
output   lb1_5_ce1;
output   lb1_5_we1;
output  [15:0] lb1_5_d1;
output  [4:0] lb1_4_address0;
output   lb1_4_ce0;
input  [15:0] lb1_4_q0;
output  [4:0] lb1_4_address1;
output   lb1_4_ce1;
output   lb1_4_we1;
output  [15:0] lb1_4_d1;
output  [4:0] lb1_3_address0;
output   lb1_3_ce0;
input  [15:0] lb1_3_q0;
output  [4:0] lb1_3_address1;
output   lb1_3_ce1;
output   lb1_3_we1;
output  [15:0] lb1_3_d1;
output  [4:0] lb1_2_address0;
output   lb1_2_ce0;
input  [15:0] lb1_2_q0;
output  [4:0] lb1_2_address1;
output   lb1_2_ce1;
output   lb1_2_we1;
output  [15:0] lb1_2_d1;
output  [4:0] lb1_1_address0;
output   lb1_1_ce0;
input  [15:0] lb1_1_q0;
output  [4:0] lb1_1_address1;
output   lb1_1_ce1;
output   lb1_1_we1;
output  [15:0] lb1_1_d1;
output  [4:0] lb1_address0;
output   lb1_ce0;
input  [15:0] lb1_q0;
output  [4:0] lb1_address1;
output   lb1_ce1;
output   lb1_we1;
output  [15:0] lb1_d1;
input  [8:0] zext_ln97;

reg ap_idle;
reg s_pix_i_read;
reg s_win_i_write;
reg lb1_7_ce0;
reg lb1_7_ce1;
reg lb1_7_we1;
reg lb1_6_ce0;
reg lb1_6_ce1;
reg lb1_6_we1;
reg lb1_5_ce0;
reg lb1_5_ce1;
reg lb1_5_we1;
reg lb1_4_ce0;
reg lb1_4_ce1;
reg lb1_4_we1;
reg lb1_3_ce0;
reg lb1_3_ce1;
reg lb1_3_we1;
reg lb1_2_ce0;
reg lb1_2_ce1;
reg lb1_2_we1;
reg lb1_1_ce0;
reg lb1_1_ce1;
reg lb1_1_we1;
reg lb1_ce0;
reg lb1_ce1;
reg lb1_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln117_reg_2417;
reg   [0:0] and_ln152_reg_2509;
reg    ap_predicate_op312_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln117_fu_728_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_pix_i_blk_n;
wire    ap_block_pp0_stage0;
reg    s_win_i_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln97_cast_fu_616_p1;
reg   [31:0] zext_ln97_cast_reg_2406;
wire   [31:0] zext_ln98_cast_fu_620_p1;
reg   [31:0] zext_ln98_cast_reg_2411;
reg   [4:0] lb1_7_addr_reg_2421;
wire   [0:0] addr_cmp49_fu_754_p2;
reg   [0:0] addr_cmp49_reg_2427;
reg   [4:0] lb1_6_addr_reg_2432;
wire   [0:0] addr_cmp43_fu_763_p2;
reg   [0:0] addr_cmp43_reg_2438;
reg   [4:0] lb1_5_addr_reg_2443;
wire   [0:0] addr_cmp37_fu_772_p2;
reg   [0:0] addr_cmp37_reg_2449;
reg   [4:0] lb1_4_addr_reg_2454;
wire   [0:0] addr_cmp31_fu_781_p2;
reg   [0:0] addr_cmp31_reg_2460;
reg   [4:0] lb1_3_addr_reg_2465;
wire   [0:0] addr_cmp25_fu_790_p2;
reg   [0:0] addr_cmp25_reg_2471;
reg   [4:0] lb1_2_addr_reg_2476;
wire   [0:0] addr_cmp19_fu_799_p2;
reg   [0:0] addr_cmp19_reg_2482;
reg   [4:0] lb1_1_addr_reg_2487;
wire   [0:0] addr_cmp13_fu_808_p2;
reg   [0:0] addr_cmp13_reg_2493;
reg   [4:0] lb1_addr_reg_2498;
wire   [0:0] addr_cmp_fu_817_p2;
reg   [0:0] addr_cmp_reg_2504;
wire   [0:0] and_ln152_fu_895_p2;
wire   [0:0] w_valid_fu_911_p2;
reg   [0:0] w_valid_reg_2513;
wire   [63:0] idxprom50_i_fu_739_p1;
reg   [63:0] reuse_addr_reg46_fu_84;
wire    ap_loop_init;
reg   [15:0] reuse_reg45_fu_88;
wire   [15:0] reuse_select44_fu_1167_p3;
reg   [63:0] reuse_addr_reg40_fu_92;
reg   [15:0] reuse_reg39_fu_96;
wire   [15:0] reuse_select38_fu_1178_p3;
reg   [63:0] reuse_addr_reg34_fu_100;
reg   [15:0] reuse_reg33_fu_104;
wire   [15:0] reuse_select32_fu_1189_p3;
reg   [63:0] reuse_addr_reg28_fu_108;
reg   [15:0] reuse_reg27_fu_112;
wire   [15:0] reuse_select26_fu_1200_p3;
reg   [63:0] reuse_addr_reg22_fu_116;
reg   [15:0] reuse_reg21_fu_120;
wire   [15:0] reuse_select20_fu_1211_p3;
reg   [63:0] reuse_addr_reg16_fu_124;
reg   [15:0] reuse_reg15_fu_128;
wire   [15:0] reuse_select14_fu_1222_p3;
reg   [63:0] reuse_addr_reg10_fu_132;
reg   [15:0] reuse_reg9_fu_136;
wire   [15:0] reuse_select_fu_1233_p3;
reg   [63:0] reuse_addr_reg_fu_140;
reg   [15:0] reuse_reg_fu_144;
reg   [31:0] x_fu_148;
wire   [31:0] x_5_fu_934_p3;
reg   [31:0] y_fu_152;
wire   [31:0] y_3_fu_942_p3;
reg   [16:0] t_fu_156;
wire   [16:0] add_ln117_fu_733_p2;
reg   [15:0] p_0_0_01673_i_fu_160;
reg   [15:0] p_0_0_016_181_i_fu_164;
reg   [15:0] p_0_0_016_289_i_fu_168;
reg   [15:0] p_0_0_016_397_i_fu_172;
reg   [15:0] p_0_0_016_4105_i_fu_176;
reg   [15:0] p_0_0_016_5113_i_fu_180;
reg   [15:0] p_0_0_016_6121_i_fu_184;
reg   [15:0] p_0_0_016_7129_i_fu_188;
reg   [15:0] p_0_0_016_8137_i_fu_192;
reg   [15:0] p_0_0_016_11374_i_fu_196;
reg   [15:0] p_0_0_016_21775_i_fu_200;
reg   [15:0] p_0_0_016_32176_i_fu_204;
reg   [15:0] p_0_0_016_42577_i_fu_208;
reg   [15:0] p_0_0_016_52978_i_fu_212;
reg   [15:0] p_0_0_016_63379_i_fu_216;
reg   [15:0] p_0_0_016_73780_i_fu_220;
wire   [15:0] reuse_select50_fu_1157_p3;
reg   [15:0] p_0_0_016_1_182_i_fu_224;
reg   [15:0] p_0_0_016_1_283_i_fu_228;
reg   [15:0] p_0_0_016_1_384_i_fu_232;
reg   [15:0] p_0_0_016_1_485_i_fu_236;
reg   [15:0] p_0_0_016_1_586_i_fu_240;
reg   [15:0] p_0_0_016_1_687_i_fu_244;
reg   [15:0] p_0_0_016_1_788_i_fu_248;
reg   [15:0] p_0_0_016_2_190_i_fu_252;
reg   [15:0] p_0_0_016_2_291_i_fu_256;
reg   [15:0] p_0_0_016_2_392_i_fu_260;
reg   [15:0] p_0_0_016_2_493_i_fu_264;
reg   [15:0] p_0_0_016_2_594_i_fu_268;
reg   [15:0] p_0_0_016_2_695_i_fu_272;
reg   [15:0] p_0_0_016_2_796_i_fu_276;
reg   [15:0] p_0_0_016_3_198_i_fu_280;
reg   [15:0] p_0_0_016_3_299_i_fu_284;
reg   [15:0] p_0_0_016_3_3100_i_fu_288;
reg   [15:0] p_0_0_016_3_4101_i_fu_292;
reg   [15:0] p_0_0_016_3_5102_i_fu_296;
reg   [15:0] p_0_0_016_3_6103_i_fu_300;
reg   [15:0] p_0_0_016_3_7104_i_fu_304;
reg   [15:0] p_0_0_016_4_1106_i_fu_308;
reg   [15:0] p_0_0_016_4_2107_i_fu_312;
reg   [15:0] p_0_0_016_4_3108_i_fu_316;
reg   [15:0] p_0_0_016_4_4109_i_fu_320;
reg   [15:0] p_0_0_016_4_5110_i_fu_324;
reg   [15:0] p_0_0_016_4_6111_i_fu_328;
reg   [15:0] p_0_0_016_4_7112_i_fu_332;
reg   [15:0] p_0_0_016_5_1114_i_fu_336;
reg   [15:0] p_0_0_016_5_2115_i_fu_340;
reg   [15:0] p_0_0_016_5_3116_i_fu_344;
reg   [15:0] p_0_0_016_5_4117_i_fu_348;
reg   [15:0] p_0_0_016_5_5118_i_fu_352;
reg   [15:0] p_0_0_016_5_6119_i_fu_356;
reg   [15:0] p_0_0_016_5_7120_i_fu_360;
reg   [15:0] p_0_0_016_6_1122_i_fu_364;
reg   [15:0] p_0_0_016_6_2123_i_fu_368;
reg   [15:0] p_0_0_016_6_3124_i_fu_372;
reg   [15:0] p_0_0_016_6_4125_i_fu_376;
reg   [15:0] p_0_0_016_6_5126_i_fu_380;
reg   [15:0] p_0_0_016_6_6127_i_fu_384;
reg   [15:0] p_0_0_016_6_7128_i_fu_388;
reg   [15:0] p_0_0_016_7_1130_i_fu_392;
reg   [15:0] p_0_0_016_7_2131_i_fu_396;
reg   [15:0] p_0_0_016_7_3132_i_fu_400;
reg   [15:0] p_0_0_016_7_4133_i_fu_404;
reg   [15:0] p_0_0_016_7_5134_i_fu_408;
reg   [15:0] p_0_0_016_7_6135_i_fu_412;
reg   [15:0] p_0_0_016_7_7136_i_fu_416;
reg   [15:0] p_0_0_016_8_1138_i_fu_420;
reg   [15:0] p_0_0_016_8_2139_i_fu_424;
reg   [15:0] p_0_0_016_8_3140_i_fu_428;
reg   [15:0] p_0_0_016_8_4141_i_fu_432;
reg   [15:0] p_0_0_016_8_5142_i_fu_436;
reg   [15:0] p_0_0_016_8_6143_i_fu_440;
reg   [15:0] p_0_0_016_8_7144_i_fu_444;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] tmp_71_fu_863_p4;
wire   [28:0] tmp_72_fu_879_p4;
wire   [0:0] icmp_ln152_fu_873_p2;
wire   [0:0] icmp_ln152_1_fu_889_p2;
wire   [0:0] icmp_ln164_fu_901_p2;
wire   [0:0] icmp_ln164_1_fu_906_p2;
wire   [31:0] x_4_fu_917_p2;
wire   [0:0] icmp_ln172_fu_923_p2;
wire   [31:0] add_ln174_fu_928_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg10_fu_132 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg10_fu_132 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg16_fu_124 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg16_fu_124 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg22_fu_116 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg22_fu_116 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg28_fu_108 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg28_fu_108 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg34_fu_100 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg34_fu_100 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg40_fu_92 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg40_fu_92 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg46_fu_84 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg46_fu_84 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_140 <= 64'd18446744073709551615;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg_fu_140 <= idxprom50_i_fu_739_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg15_fu_128 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg15_fu_128 <= reuse_select14_fu_1222_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg21_fu_120 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg21_fu_120 <= reuse_select20_fu_1211_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg27_fu_112 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg27_fu_112 <= reuse_select26_fu_1200_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg33_fu_104 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg33_fu_104 <= reuse_select32_fu_1189_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg39_fu_96 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg39_fu_96 <= reuse_select38_fu_1178_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg45_fu_88 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg45_fu_88 <= reuse_select44_fu_1167_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg9_fu_136 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg9_fu_136 <= reuse_select_fu_1233_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_144 <= 16'd0;
        end else if (((icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg_fu_144 <= s_pix_i_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            t_fu_156 <= 17'd0;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            t_fu_156 <= add_ln117_fu_733_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_148 <= 32'd0;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_148 <= x_5_fu_934_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_152 <= 32'd0;
        end else if (((icmp_ln117_fu_728_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_152 <= y_3_fu_942_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_728_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp13_reg_2493 <= addr_cmp13_fu_808_p2;
        addr_cmp19_reg_2482 <= addr_cmp19_fu_799_p2;
        addr_cmp25_reg_2471 <= addr_cmp25_fu_790_p2;
        addr_cmp31_reg_2460 <= addr_cmp31_fu_781_p2;
        addr_cmp37_reg_2449 <= addr_cmp37_fu_772_p2;
        addr_cmp43_reg_2438 <= addr_cmp43_fu_763_p2;
        addr_cmp49_reg_2427 <= addr_cmp49_fu_754_p2;
        addr_cmp_reg_2504 <= addr_cmp_fu_817_p2;
        and_ln152_reg_2509 <= and_ln152_fu_895_p2;
        lb1_1_addr_reg_2487 <= idxprom50_i_fu_739_p1;
        lb1_2_addr_reg_2476 <= idxprom50_i_fu_739_p1;
        lb1_3_addr_reg_2465 <= idxprom50_i_fu_739_p1;
        lb1_4_addr_reg_2454 <= idxprom50_i_fu_739_p1;
        lb1_5_addr_reg_2443 <= idxprom50_i_fu_739_p1;
        lb1_6_addr_reg_2432 <= idxprom50_i_fu_739_p1;
        lb1_7_addr_reg_2421 <= idxprom50_i_fu_739_p1;
        lb1_addr_reg_2498 <= idxprom50_i_fu_739_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln117_reg_2417 <= icmp_ln117_fu_728_p2;
        zext_ln97_cast_reg_2406[8 : 0] <= zext_ln97_cast_fu_616_p1[8 : 0];
        zext_ln98_cast_reg_2411[8 : 0] <= zext_ln98_cast_fu_620_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_0_0_01673_i_fu_160 <= p_0_0_016_11374_i_fu_196;
        p_0_0_016_11374_i_fu_196 <= p_0_0_016_21775_i_fu_200;
        p_0_0_016_181_i_fu_164 <= p_0_0_016_1_182_i_fu_224;
        p_0_0_016_1_182_i_fu_224 <= p_0_0_016_1_283_i_fu_228;
        p_0_0_016_1_283_i_fu_228 <= p_0_0_016_1_384_i_fu_232;
        p_0_0_016_1_384_i_fu_232 <= p_0_0_016_1_485_i_fu_236;
        p_0_0_016_1_485_i_fu_236 <= p_0_0_016_1_586_i_fu_240;
        p_0_0_016_1_586_i_fu_240 <= p_0_0_016_1_687_i_fu_244;
        p_0_0_016_1_687_i_fu_244 <= p_0_0_016_1_788_i_fu_248;
        p_0_0_016_1_788_i_fu_248 <= reuse_select44_fu_1167_p3;
        p_0_0_016_21775_i_fu_200 <= p_0_0_016_32176_i_fu_204;
        p_0_0_016_289_i_fu_168 <= p_0_0_016_2_190_i_fu_252;
        p_0_0_016_2_190_i_fu_252 <= p_0_0_016_2_291_i_fu_256;
        p_0_0_016_2_291_i_fu_256 <= p_0_0_016_2_392_i_fu_260;
        p_0_0_016_2_392_i_fu_260 <= p_0_0_016_2_493_i_fu_264;
        p_0_0_016_2_493_i_fu_264 <= p_0_0_016_2_594_i_fu_268;
        p_0_0_016_2_594_i_fu_268 <= p_0_0_016_2_695_i_fu_272;
        p_0_0_016_2_695_i_fu_272 <= p_0_0_016_2_796_i_fu_276;
        p_0_0_016_2_796_i_fu_276 <= reuse_select38_fu_1178_p3;
        p_0_0_016_32176_i_fu_204 <= p_0_0_016_42577_i_fu_208;
        p_0_0_016_397_i_fu_172 <= p_0_0_016_3_198_i_fu_280;
        p_0_0_016_3_198_i_fu_280 <= p_0_0_016_3_299_i_fu_284;
        p_0_0_016_3_299_i_fu_284 <= p_0_0_016_3_3100_i_fu_288;
        p_0_0_016_3_3100_i_fu_288 <= p_0_0_016_3_4101_i_fu_292;
        p_0_0_016_3_4101_i_fu_292 <= p_0_0_016_3_5102_i_fu_296;
        p_0_0_016_3_5102_i_fu_296 <= p_0_0_016_3_6103_i_fu_300;
        p_0_0_016_3_6103_i_fu_300 <= p_0_0_016_3_7104_i_fu_304;
        p_0_0_016_3_7104_i_fu_304 <= reuse_select32_fu_1189_p3;
        p_0_0_016_4105_i_fu_176 <= p_0_0_016_4_1106_i_fu_308;
        p_0_0_016_42577_i_fu_208 <= p_0_0_016_52978_i_fu_212;
        p_0_0_016_4_1106_i_fu_308 <= p_0_0_016_4_2107_i_fu_312;
        p_0_0_016_4_2107_i_fu_312 <= p_0_0_016_4_3108_i_fu_316;
        p_0_0_016_4_3108_i_fu_316 <= p_0_0_016_4_4109_i_fu_320;
        p_0_0_016_4_4109_i_fu_320 <= p_0_0_016_4_5110_i_fu_324;
        p_0_0_016_4_5110_i_fu_324 <= p_0_0_016_4_6111_i_fu_328;
        p_0_0_016_4_6111_i_fu_328 <= p_0_0_016_4_7112_i_fu_332;
        p_0_0_016_4_7112_i_fu_332 <= reuse_select26_fu_1200_p3;
        p_0_0_016_5113_i_fu_180 <= p_0_0_016_5_1114_i_fu_336;
        p_0_0_016_52978_i_fu_212 <= p_0_0_016_63379_i_fu_216;
        p_0_0_016_5_1114_i_fu_336 <= p_0_0_016_5_2115_i_fu_340;
        p_0_0_016_5_2115_i_fu_340 <= p_0_0_016_5_3116_i_fu_344;
        p_0_0_016_5_3116_i_fu_344 <= p_0_0_016_5_4117_i_fu_348;
        p_0_0_016_5_4117_i_fu_348 <= p_0_0_016_5_5118_i_fu_352;
        p_0_0_016_5_5118_i_fu_352 <= p_0_0_016_5_6119_i_fu_356;
        p_0_0_016_5_6119_i_fu_356 <= p_0_0_016_5_7120_i_fu_360;
        p_0_0_016_5_7120_i_fu_360 <= reuse_select20_fu_1211_p3;
        p_0_0_016_6121_i_fu_184 <= p_0_0_016_6_1122_i_fu_364;
        p_0_0_016_63379_i_fu_216 <= p_0_0_016_73780_i_fu_220;
        p_0_0_016_6_1122_i_fu_364 <= p_0_0_016_6_2123_i_fu_368;
        p_0_0_016_6_2123_i_fu_368 <= p_0_0_016_6_3124_i_fu_372;
        p_0_0_016_6_3124_i_fu_372 <= p_0_0_016_6_4125_i_fu_376;
        p_0_0_016_6_4125_i_fu_376 <= p_0_0_016_6_5126_i_fu_380;
        p_0_0_016_6_5126_i_fu_380 <= p_0_0_016_6_6127_i_fu_384;
        p_0_0_016_6_6127_i_fu_384 <= p_0_0_016_6_7128_i_fu_388;
        p_0_0_016_6_7128_i_fu_388 <= reuse_select14_fu_1222_p3;
        p_0_0_016_7129_i_fu_188 <= p_0_0_016_7_1130_i_fu_392;
        p_0_0_016_73780_i_fu_220 <= reuse_select50_fu_1157_p3;
        p_0_0_016_7_1130_i_fu_392 <= p_0_0_016_7_2131_i_fu_396;
        p_0_0_016_7_2131_i_fu_396 <= p_0_0_016_7_3132_i_fu_400;
        p_0_0_016_7_3132_i_fu_400 <= p_0_0_016_7_4133_i_fu_404;
        p_0_0_016_7_4133_i_fu_404 <= p_0_0_016_7_5134_i_fu_408;
        p_0_0_016_7_5134_i_fu_408 <= p_0_0_016_7_6135_i_fu_412;
        p_0_0_016_7_6135_i_fu_412 <= p_0_0_016_7_7136_i_fu_416;
        p_0_0_016_7_7136_i_fu_416 <= reuse_select_fu_1233_p3;
        p_0_0_016_8137_i_fu_192 <= p_0_0_016_8_1138_i_fu_420;
        p_0_0_016_8_1138_i_fu_420 <= p_0_0_016_8_2139_i_fu_424;
        p_0_0_016_8_2139_i_fu_424 <= p_0_0_016_8_3140_i_fu_428;
        p_0_0_016_8_3140_i_fu_428 <= p_0_0_016_8_4141_i_fu_432;
        p_0_0_016_8_4141_i_fu_432 <= p_0_0_016_8_5142_i_fu_436;
        p_0_0_016_8_5142_i_fu_436 <= p_0_0_016_8_6143_i_fu_440;
        p_0_0_016_8_6143_i_fu_440 <= p_0_0_016_8_7144_i_fu_444;
        p_0_0_016_8_7144_i_fu_444 <= s_pix_i_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_fu_728_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln152_fu_895_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_valid_reg_2513 <= w_valid_fu_911_p2;
    end
end

always @ (*) begin
    if (((icmp_ln117_fu_728_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_1_ce0 = 1'b1;
    end else begin
        lb1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_1_ce1 = 1'b1;
    end else begin
        lb1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_1_we1 = 1'b1;
    end else begin
        lb1_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_2_ce0 = 1'b1;
    end else begin
        lb1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_2_ce1 = 1'b1;
    end else begin
        lb1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_2_we1 = 1'b1;
    end else begin
        lb1_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_3_ce0 = 1'b1;
    end else begin
        lb1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_3_ce1 = 1'b1;
    end else begin
        lb1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_3_we1 = 1'b1;
    end else begin
        lb1_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_4_ce0 = 1'b1;
    end else begin
        lb1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_4_ce1 = 1'b1;
    end else begin
        lb1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_4_we1 = 1'b1;
    end else begin
        lb1_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_5_ce0 = 1'b1;
    end else begin
        lb1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_5_ce1 = 1'b1;
    end else begin
        lb1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_5_we1 = 1'b1;
    end else begin
        lb1_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_6_ce0 = 1'b1;
    end else begin
        lb1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_6_ce1 = 1'b1;
    end else begin
        lb1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_6_we1 = 1'b1;
    end else begin
        lb1_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_7_ce0 = 1'b1;
    end else begin
        lb1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_7_ce1 = 1'b1;
    end else begin
        lb1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_7_we1 = 1'b1;
    end else begin
        lb1_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_ce0 = 1'b1;
    end else begin
        lb1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_ce1 = 1'b1;
    end else begin
        lb1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_we1 = 1'b1;
    end else begin
        lb1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_pix_i_blk_n = s_pix_i_empty_n;
    end else begin
        s_pix_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln117_reg_2417 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_pix_i_read = 1'b1;
    end else begin
        s_pix_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op312_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_win_i_blk_n = s_win_i_full_n;
    end else begin
        s_win_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op312_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_win_i_write = 1'b1;
    end else begin
        s_win_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln117_fu_733_p2 = (t_fu_156 + 17'd1);

assign add_ln174_fu_928_p2 = (y_fu_152 + 32'd1);

assign addr_cmp13_fu_808_p2 = ((reuse_addr_reg10_fu_132 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp19_fu_799_p2 = ((reuse_addr_reg16_fu_124 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp25_fu_790_p2 = ((reuse_addr_reg22_fu_116 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp31_fu_781_p2 = ((reuse_addr_reg28_fu_108 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp37_fu_772_p2 = ((reuse_addr_reg34_fu_100 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp43_fu_763_p2 = ((reuse_addr_reg40_fu_92 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp49_fu_754_p2 = ((reuse_addr_reg46_fu_84 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_817_p2 = ((reuse_addr_reg_fu_140 == idxprom50_i_fu_739_p1) ? 1'b1 : 1'b0);

assign and_ln152_fu_895_p2 = (icmp_ln152_fu_873_p2 & icmp_ln152_1_fu_889_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op312_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln117_reg_2417 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op312_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln117_reg_2417 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op312_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln117_reg_2417 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op312_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln117_reg_2417 == 1'd0) & (s_pix_i_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op312_write_state3 = ((1'd1 == and_ln152_reg_2509) & (icmp_ln117_reg_2417 == 1'd0));
end

assign icmp_ln117_fu_728_p2 = ((t_fu_156 == empty) ? 1'b1 : 1'b0);

assign icmp_ln152_1_fu_889_p2 = (($signed(tmp_72_fu_879_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_873_p2 = (($signed(tmp_71_fu_863_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln164_1_fu_906_p2 = (($signed(x_fu_148) < $signed(zext_ln98_cast_reg_2411)) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_901_p2 = (($signed(y_fu_152) < $signed(zext_ln97_cast_reg_2406)) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_923_p2 = ((x_4_fu_917_p2 == zext_ln98_cast_reg_2411) ? 1'b1 : 1'b0);

assign idxprom50_i_fu_739_p1 = x_fu_148;

assign lb1_1_address0 = idxprom50_i_fu_739_p1;

assign lb1_1_address1 = lb1_1_addr_reg_2487;

assign lb1_1_d1 = reuse_select_fu_1233_p3;

assign lb1_2_address0 = idxprom50_i_fu_739_p1;

assign lb1_2_address1 = lb1_2_addr_reg_2476;

assign lb1_2_d1 = reuse_select14_fu_1222_p3;

assign lb1_3_address0 = idxprom50_i_fu_739_p1;

assign lb1_3_address1 = lb1_3_addr_reg_2465;

assign lb1_3_d1 = reuse_select20_fu_1211_p3;

assign lb1_4_address0 = idxprom50_i_fu_739_p1;

assign lb1_4_address1 = lb1_4_addr_reg_2454;

assign lb1_4_d1 = reuse_select26_fu_1200_p3;

assign lb1_5_address0 = idxprom50_i_fu_739_p1;

assign lb1_5_address1 = lb1_5_addr_reg_2443;

assign lb1_5_d1 = reuse_select32_fu_1189_p3;

assign lb1_6_address0 = idxprom50_i_fu_739_p1;

assign lb1_6_address1 = lb1_6_addr_reg_2432;

assign lb1_6_d1 = reuse_select38_fu_1178_p3;

assign lb1_7_address0 = idxprom50_i_fu_739_p1;

assign lb1_7_address1 = lb1_7_addr_reg_2421;

assign lb1_7_d1 = reuse_select44_fu_1167_p3;

assign lb1_address0 = idxprom50_i_fu_739_p1;

assign lb1_address1 = lb1_addr_reg_2498;

assign lb1_d1 = s_pix_i_dout;

assign reuse_select14_fu_1222_p3 = ((addr_cmp13_reg_2493[0:0] == 1'b1) ? reuse_reg9_fu_136 : lb1_1_q0);

assign reuse_select20_fu_1211_p3 = ((addr_cmp19_reg_2482[0:0] == 1'b1) ? reuse_reg15_fu_128 : lb1_2_q0);

assign reuse_select26_fu_1200_p3 = ((addr_cmp25_reg_2471[0:0] == 1'b1) ? reuse_reg21_fu_120 : lb1_3_q0);

assign reuse_select32_fu_1189_p3 = ((addr_cmp31_reg_2460[0:0] == 1'b1) ? reuse_reg27_fu_112 : lb1_4_q0);

assign reuse_select38_fu_1178_p3 = ((addr_cmp37_reg_2449[0:0] == 1'b1) ? reuse_reg33_fu_104 : lb1_5_q0);

assign reuse_select44_fu_1167_p3 = ((addr_cmp43_reg_2438[0:0] == 1'b1) ? reuse_reg39_fu_96 : lb1_6_q0);

assign reuse_select50_fu_1157_p3 = ((addr_cmp49_reg_2427[0:0] == 1'b1) ? reuse_reg45_fu_88 : lb1_7_q0);

assign reuse_select_fu_1233_p3 = ((addr_cmp_reg_2504[0:0] == 1'b1) ? reuse_reg_fu_144 : lb1_q0);

assign s_win_i_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{w_valid_reg_2513}, {s_pix_i_dout}}, {p_0_0_016_8_7144_i_fu_444}}, {p_0_0_016_8_6143_i_fu_440}}, {p_0_0_016_8_5142_i_fu_436}}, {p_0_0_016_8_4141_i_fu_432}}, {p_0_0_016_8_3140_i_fu_428}}, {p_0_0_016_8_2139_i_fu_424}}, {p_0_0_016_8_1138_i_fu_420}}, {p_0_0_016_8137_i_fu_192}}, {reuse_select_fu_1233_p3}}, {p_0_0_016_7_7136_i_fu_416}}, {p_0_0_016_7_6135_i_fu_412}}, {p_0_0_016_7_5134_i_fu_408}}, {p_0_0_016_7_4133_i_fu_404}}, {p_0_0_016_7_3132_i_fu_400}}, {p_0_0_016_7_2131_i_fu_396}}, {p_0_0_016_7_1130_i_fu_392}}, {p_0_0_016_7129_i_fu_188}}, {reuse_select14_fu_1222_p3}}, {p_0_0_016_6_7128_i_fu_388}}, {p_0_0_016_6_6127_i_fu_384}}, {p_0_0_016_6_5126_i_fu_380}}, {p_0_0_016_6_4125_i_fu_376}}, {p_0_0_016_6_3124_i_fu_372}}, {p_0_0_016_6_2123_i_fu_368}}, {p_0_0_016_6_1122_i_fu_364}}, {p_0_0_016_6121_i_fu_184}}, {reuse_select20_fu_1211_p3}}, {p_0_0_016_5_7120_i_fu_360}}, {p_0_0_016_5_6119_i_fu_356}}, {p_0_0_016_5_5118_i_fu_352}}, {p_0_0_016_5_4117_i_fu_348}}, 
    {p_0_0_016_5_3116_i_fu_344}}, {p_0_0_016_5_2115_i_fu_340}}, {p_0_0_016_5_1114_i_fu_336}}, {p_0_0_016_5113_i_fu_180}}, {reuse_select26_fu_1200_p3}}, {p_0_0_016_4_7112_i_fu_332}}, {p_0_0_016_4_6111_i_fu_328}}, {p_0_0_016_4_5110_i_fu_324}}, {p_0_0_016_4_4109_i_fu_320}}, {p_0_0_016_4_3108_i_fu_316}}, {p_0_0_016_4_2107_i_fu_312}}, {p_0_0_016_4_1106_i_fu_308}}, {p_0_0_016_4105_i_fu_176}}, {reuse_select32_fu_1189_p3}}, {p_0_0_016_3_7104_i_fu_304}}, {p_0_0_016_3_6103_i_fu_300}}, {p_0_0_016_3_5102_i_fu_296}}, {p_0_0_016_3_4101_i_fu_292}}, {p_0_0_016_3_3100_i_fu_288}}, {p_0_0_016_3_299_i_fu_284}}, {p_0_0_016_3_198_i_fu_280}}, {p_0_0_016_397_i_fu_172}}, {reuse_select38_fu_1178_p3}}, {p_0_0_016_2_796_i_fu_276}}, {p_0_0_016_2_695_i_fu_272}}, {p_0_0_016_2_594_i_fu_268}}, {p_0_0_016_2_493_i_fu_264}}, {p_0_0_016_2_392_i_fu_260}}, {p_0_0_016_2_291_i_fu_256}}, {p_0_0_016_2_190_i_fu_252}}, {p_0_0_016_289_i_fu_168}}, {reuse_select44_fu_1167_p3}}, {p_0_0_016_1_788_i_fu_248}}, {p_0_0_016_1_687_i_fu_244}}, {p_0_0_016_1_586_i_fu_240}}, 
    {p_0_0_016_1_485_i_fu_236}}, {p_0_0_016_1_384_i_fu_232}}, {p_0_0_016_1_283_i_fu_228}}, {p_0_0_016_1_182_i_fu_224}}, {p_0_0_016_181_i_fu_164}}, {reuse_select50_fu_1157_p3}}, {p_0_0_016_73780_i_fu_220}}, {p_0_0_016_63379_i_fu_216}}, {p_0_0_016_52978_i_fu_212}}, {p_0_0_016_42577_i_fu_208}}, {p_0_0_016_32176_i_fu_204}}, {p_0_0_016_21775_i_fu_200}}, {p_0_0_016_11374_i_fu_196}}, {p_0_0_01673_i_fu_160}};

assign tmp_71_fu_863_p4 = {{y_fu_152[31:3]}};

assign tmp_72_fu_879_p4 = {{x_fu_148[31:3]}};

assign w_valid_fu_911_p2 = (icmp_ln164_fu_901_p2 & icmp_ln164_1_fu_906_p2);

assign x_4_fu_917_p2 = (x_fu_148 + 32'd1);

assign x_5_fu_934_p3 = ((icmp_ln172_fu_923_p2[0:0] == 1'b1) ? 32'd0 : x_4_fu_917_p2);

assign y_3_fu_942_p3 = ((icmp_ln172_fu_923_p2[0:0] == 1'b1) ? add_ln174_fu_928_p2 : y_fu_152);

assign zext_ln97_cast_fu_616_p1 = zext_ln97;

assign zext_ln98_cast_fu_620_p1 = zext_ln98;

always @ (posedge ap_clk) begin
    zext_ln97_cast_reg_2406[31:9] <= 23'b00000000000000000000000;
    zext_ln98_cast_reg_2411[31:9] <= 23'b00000000000000000000000;
end

endmodule //srcnn_make_win97_Pipeline_win9x9_read_pix
