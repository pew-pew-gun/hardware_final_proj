// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_tile_mm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY,
        m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY,
        m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID,
        m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP,
        m_axi_gmem_in_BID,
        m_axi_gmem_in_BUSER,
        input_ftmap,
        h0,
        w0,
        phase,
        inbuf_address0,
        inbuf_ce0,
        inbuf_we0,
        inbuf_d0,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_in_AWVALID;
input   m_axi_gmem_in_AWREADY;
output  [63:0] m_axi_gmem_in_AWADDR;
output  [0:0] m_axi_gmem_in_AWID;
output  [31:0] m_axi_gmem_in_AWLEN;
output  [2:0] m_axi_gmem_in_AWSIZE;
output  [1:0] m_axi_gmem_in_AWBURST;
output  [1:0] m_axi_gmem_in_AWLOCK;
output  [3:0] m_axi_gmem_in_AWCACHE;
output  [2:0] m_axi_gmem_in_AWPROT;
output  [3:0] m_axi_gmem_in_AWQOS;
output  [3:0] m_axi_gmem_in_AWREGION;
output  [0:0] m_axi_gmem_in_AWUSER;
output   m_axi_gmem_in_WVALID;
input   m_axi_gmem_in_WREADY;
output  [31:0] m_axi_gmem_in_WDATA;
output  [3:0] m_axi_gmem_in_WSTRB;
output   m_axi_gmem_in_WLAST;
output  [0:0] m_axi_gmem_in_WID;
output  [0:0] m_axi_gmem_in_WUSER;
output   m_axi_gmem_in_ARVALID;
input   m_axi_gmem_in_ARREADY;
output  [63:0] m_axi_gmem_in_ARADDR;
output  [0:0] m_axi_gmem_in_ARID;
output  [31:0] m_axi_gmem_in_ARLEN;
output  [2:0] m_axi_gmem_in_ARSIZE;
output  [1:0] m_axi_gmem_in_ARBURST;
output  [1:0] m_axi_gmem_in_ARLOCK;
output  [3:0] m_axi_gmem_in_ARCACHE;
output  [2:0] m_axi_gmem_in_ARPROT;
output  [3:0] m_axi_gmem_in_ARQOS;
output  [3:0] m_axi_gmem_in_ARREGION;
output  [0:0] m_axi_gmem_in_ARUSER;
input   m_axi_gmem_in_RVALID;
output   m_axi_gmem_in_RREADY;
input  [31:0] m_axi_gmem_in_RDATA;
input   m_axi_gmem_in_RLAST;
input  [0:0] m_axi_gmem_in_RID;
input  [8:0] m_axi_gmem_in_RFIFONUM;
input  [0:0] m_axi_gmem_in_RUSER;
input  [1:0] m_axi_gmem_in_RRESP;
input   m_axi_gmem_in_BVALID;
output   m_axi_gmem_in_BREADY;
input  [1:0] m_axi_gmem_in_BRESP;
input  [0:0] m_axi_gmem_in_BID;
input  [0:0] m_axi_gmem_in_BUSER;
input  [63:0] input_ftmap;
input  [8:0] h0;
input  [7:0] w0;
input  [0:0] phase;
output  [10:0] inbuf_address0;
output   inbuf_ce0;
output   inbuf_we0;
output  [31:0] inbuf_d0;
output  [8:0] ap_return_0;
output  [8:0] ap_return_1;
output  [0:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_in_ARVALID;
reg m_axi_gmem_in_RREADY;
reg inbuf_ce0;
reg inbuf_we0;
reg[8:0] ap_return_0;
reg[8:0] ap_return_1;
reg[0:0] ap_return_2;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_in_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_in_blk_n_R;
wire    ap_CS_fsm_state12;
reg    ap_block_state1;
wire   [8:0] w0_cast2_fu_177_p1;
reg   [8:0] w0_cast2_reg_597;
wire   [9:0] select_ln56_cast_cast_fu_241_p3;
reg   [9:0] select_ln56_cast_cast_reg_602;
wire   [8:0] add_ln42_fu_257_p2;
reg   [8:0] add_ln42_reg_607;
wire   [8:0] add_ln42_1_fu_267_p2;
reg   [8:0] add_ln42_1_reg_612;
wire  signed [9:0] add_ln46_fu_273_p2;
reg  signed [9:0] add_ln46_reg_617;
wire  signed [10:0] sext_ln46_fu_279_p1;
reg  signed [10:0] sext_ln46_reg_622;
wire  signed [10:0] sext_ln53_fu_289_p1;
reg  signed [10:0] sext_ln53_reg_627;
wire  signed [9:0] sext_ln53_1_fu_293_p1;
reg  signed [9:0] sext_ln53_1_reg_632;
wire   [10:0] sub_ln56_1_fu_338_p2;
reg   [10:0] sub_ln56_1_reg_637;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln42_2_fu_353_p2;
reg   [8:0] add_ln42_2_reg_645;
wire   [18:0] sub_ln56_fu_427_p2;
reg   [18:0] sub_ln56_reg_650;
wire   [0:0] icmp_ln42_fu_348_p2;
reg   [10:0] inbuf_addr_reg_655;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln51_fu_467_p2;
reg   [8:0] add_ln51_reg_663;
reg   [63:0] gmem_in_addr_reg_668;
wire   [0:0] icmp_ln51_fu_462_p2;
reg   [31:0] gmem_in_addr_read_reg_674;
reg   [8:0] px_reg_166;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln56_5_fu_457_p1;
wire  signed [63:0] sext_ln56_1_fu_557_p1;
reg   [8:0] py_fu_114;
wire   [8:0] add_ln428_fu_181_p2;
wire   [7:0] trunc_ln427_fu_195_p1;
wire   [0:0] tmp_fu_187_p3;
wire   [7:0] xor_ln428_fu_199_p2;
wire   [8:0] add_ln431_fu_213_p2;
wire   [0:0] tmp_5_fu_219_p3;
wire   [7:0] xor_ln431_fu_227_p2;
wire   [7:0] tw_eff_fu_233_p3;
wire   [8:0] tw_eff_cast_fu_253_p1;
wire   [7:0] th_eff_fu_205_p3;
wire   [8:0] th_eff_cast_fu_263_p1;
wire   [9:0] h0_cast11_i_fu_249_p1;
wire  signed [8:0] add_ln53_fu_283_p2;
wire   [9:0] zext_ln56_3_fu_305_p1;
wire   [9:0] add_ln56_2_fu_309_p2;
wire   [5:0] trunc_ln56_fu_314_p1;
wire   [8:0] trunc_ln56_1_fu_326_p1;
wire   [10:0] p_shl_fu_318_p3;
wire   [10:0] p_shl1_fu_330_p3;
wire   [10:0] zext_ln42_fu_344_p1;
wire   [10:0] add_ln46_1_fu_359_p2;
wire   [0:0] tmp_6_fu_369_p3;
wire   [9:0] add_ln47_fu_364_p2;
wire   [9:0] iy_fu_377_p3;
wire   [0:0] icmp_ln48_fu_389_p2;
wire   [7:0] trunc_ln46_fu_385_p1;
wire   [7:0] iy_1_fu_395_p3;
wire   [17:0] shl_ln_fu_403_p3;
wire   [9:0] shl_ln56_1_fu_415_p3;
wire   [18:0] zext_ln56_fu_411_p1;
wire   [18:0] zext_ln56_1_fu_423_p1;
wire   [10:0] zext_ln56_4_fu_448_p1;
wire   [10:0] add_ln56_3_fu_452_p2;
wire   [9:0] zext_ln53_fu_473_p1;
wire   [10:0] add_ln53_1_fu_477_p2;
wire   [0:0] tmp_7_fu_487_p3;
wire   [9:0] add_ln54_fu_482_p2;
wire   [9:0] ix_fu_495_p3;
wire   [0:0] icmp_ln55_fu_503_p2;
wire   [7:0] trunc_ln56_2_fu_509_p1;
wire   [7:0] select_ln55_fu_513_p3;
wire   [9:0] shl_ln56_2_fu_521_p3;
wire   [18:0] zext_ln56_2_fu_529_p1;
wire   [18:0] add_ln56_fu_533_p2;
wire  signed [63:0] sext_ln56_fu_538_p1;
wire   [63:0] add_ln56_1_fu_542_p2;
wire   [61:0] trunc_ln8_fu_547_p4;
reg   [8:0] ap_return_0_preg;
reg   [8:0] ap_return_1_preg;
reg   [0:0] ap_return_2_preg;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_return_0_preg = 9'd0;
#0 ap_return_1_preg = 9'd0;
#0 ap_return_2_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 9'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
            ap_return_0_preg <= h0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
                        ap_return_1_preg[7 : 0] <= w0_cast2_reg_597[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
            ap_return_2_preg <= phase;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        px_reg_166 <= add_ln51_reg_663;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd0))) begin
        px_reg_166 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        py_fu_114 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_462_p2 == 1'd1))) begin
        py_fu_114 <= add_ln42_2_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln42_1_reg_612 <= add_ln42_1_fu_267_p2;
        add_ln42_reg_607 <= add_ln42_fu_257_p2;
        add_ln46_reg_617 <= add_ln46_fu_273_p2;
        select_ln56_cast_cast_reg_602[4 : 2] <= select_ln56_cast_cast_fu_241_p3[4 : 2];
        sext_ln46_reg_622 <= sext_ln46_fu_279_p1;
        sext_ln53_1_reg_632 <= sext_ln53_1_fu_293_p1;
        sext_ln53_reg_627 <= sext_ln53_fu_289_p1;
        w0_cast2_reg_597[7 : 0] <= w0_cast2_fu_177_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln42_2_reg_645 <= add_ln42_2_fu_353_p2;
        sub_ln56_1_reg_637[10 : 2] <= sub_ln56_1_fu_338_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln51_reg_663 <= add_ln51_fu_467_p2;
        inbuf_addr_reg_655 <= zext_ln56_5_fu_457_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_in_addr_read_reg_674 <= m_axi_gmem_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_462_p2 == 1'd0))) begin
        gmem_in_addr_reg_668 <= sext_ln56_1_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd0))) begin
        sub_ln56_reg_650[18 : 2] <= sub_ln56_fu_427_p2[18 : 2];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_in_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_in_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
        ap_return_0 = h0;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
        ap_return_1 = w0_cast2_reg_597;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
        ap_return_2 = phase;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_in_blk_n_AR = m_axi_gmem_in_ARREADY;
    end else begin
        gmem_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_in_blk_n_R = m_axi_gmem_in_RVALID;
    end else begin
        gmem_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        inbuf_ce0 = 1'b1;
    end else begin
        inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        inbuf_we0 = 1'b1;
    end else begin
        inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_in_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_in_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_in_RREADY = 1'b1;
    end else begin
        m_axi_gmem_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln42_fu_348_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_462_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_in_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln428_fu_181_p2 = (h0 + 9'd16);

assign add_ln42_1_fu_267_p2 = (th_eff_cast_fu_263_p1 + 9'd12);

assign add_ln42_2_fu_353_p2 = (py_fu_114 + 9'd1);

assign add_ln42_fu_257_p2 = (tw_eff_cast_fu_253_p1 + 9'd12);

assign add_ln431_fu_213_p2 = (w0_cast2_fu_177_p1 + 9'd16);

assign add_ln46_1_fu_359_p2 = ($signed(sext_ln46_reg_622) + $signed(zext_ln42_fu_344_p1));

assign add_ln46_fu_273_p2 = ($signed(h0_cast11_i_fu_249_p1) + $signed(10'd1018));

assign add_ln47_fu_364_p2 = ($signed(add_ln46_reg_617) + $signed(zext_ln56_3_fu_305_p1));

assign add_ln51_fu_467_p2 = (px_reg_166 + 9'd1);

assign add_ln53_1_fu_477_p2 = ($signed(sext_ln53_reg_627) + $signed(zext_ln56_4_fu_448_p1));

assign add_ln53_fu_283_p2 = ($signed(w0_cast2_fu_177_p1) + $signed(9'd506));

assign add_ln54_fu_482_p2 = ($signed(sext_ln53_1_reg_632) + $signed(zext_ln53_fu_473_p1));

assign add_ln56_1_fu_542_p2 = ($signed(sext_ln56_fu_538_p1) + $signed(input_ftmap));

assign add_ln56_2_fu_309_p2 = (select_ln56_cast_cast_reg_602 + zext_ln56_3_fu_305_p1);

assign add_ln56_3_fu_452_p2 = (sub_ln56_1_reg_637 + zext_ln56_4_fu_448_p1);

assign add_ln56_fu_533_p2 = (sub_ln56_reg_650 + zext_ln56_2_fu_529_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign h0_cast11_i_fu_249_p1 = h0;

assign icmp_ln42_fu_348_p2 = ((py_fu_114 == add_ln42_1_reg_612) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_389_p2 = ((iy_fu_377_p3 > 10'd254) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_462_p2 = ((px_reg_166 == add_ln42_reg_607) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_503_p2 = ((ix_fu_495_p3 > 10'd254) ? 1'b1 : 1'b0);

assign inbuf_address0 = inbuf_addr_reg_655;

assign inbuf_d0 = gmem_in_addr_read_reg_674;

assign ix_fu_495_p3 = ((tmp_7_fu_487_p3[0:0] == 1'b1) ? 10'd0 : add_ln54_fu_482_p2);

assign iy_1_fu_395_p3 = ((icmp_ln48_fu_389_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln46_fu_385_p1);

assign iy_fu_377_p3 = ((tmp_6_fu_369_p3[0:0] == 1'b1) ? 10'd0 : add_ln47_fu_364_p2);

assign m_axi_gmem_in_ARADDR = gmem_in_addr_reg_668;

assign m_axi_gmem_in_ARBURST = 2'd0;

assign m_axi_gmem_in_ARCACHE = 4'd0;

assign m_axi_gmem_in_ARID = 1'd0;

assign m_axi_gmem_in_ARLEN = 32'd1;

assign m_axi_gmem_in_ARLOCK = 2'd0;

assign m_axi_gmem_in_ARPROT = 3'd0;

assign m_axi_gmem_in_ARQOS = 4'd0;

assign m_axi_gmem_in_ARREGION = 4'd0;

assign m_axi_gmem_in_ARSIZE = 3'd0;

assign m_axi_gmem_in_ARUSER = 1'd0;

assign m_axi_gmem_in_AWADDR = 64'd0;

assign m_axi_gmem_in_AWBURST = 2'd0;

assign m_axi_gmem_in_AWCACHE = 4'd0;

assign m_axi_gmem_in_AWID = 1'd0;

assign m_axi_gmem_in_AWLEN = 32'd0;

assign m_axi_gmem_in_AWLOCK = 2'd0;

assign m_axi_gmem_in_AWPROT = 3'd0;

assign m_axi_gmem_in_AWQOS = 4'd0;

assign m_axi_gmem_in_AWREGION = 4'd0;

assign m_axi_gmem_in_AWSIZE = 3'd0;

assign m_axi_gmem_in_AWUSER = 1'd0;

assign m_axi_gmem_in_AWVALID = 1'b0;

assign m_axi_gmem_in_BREADY = 1'b0;

assign m_axi_gmem_in_WDATA = 32'd0;

assign m_axi_gmem_in_WID = 1'd0;

assign m_axi_gmem_in_WLAST = 1'b0;

assign m_axi_gmem_in_WSTRB = 4'd0;

assign m_axi_gmem_in_WUSER = 1'd0;

assign m_axi_gmem_in_WVALID = 1'b0;

assign p_shl1_fu_330_p3 = {{trunc_ln56_1_fu_326_p1}, {2'd0}};

assign p_shl_fu_318_p3 = {{trunc_ln56_fu_314_p1}, {5'd0}};

assign select_ln55_fu_513_p3 = ((icmp_ln55_fu_503_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln56_2_fu_509_p1);

assign select_ln56_cast_cast_fu_241_p3 = ((phase[0:0] == 1'b1) ? 10'd28 : 10'd0);

assign sext_ln46_fu_279_p1 = add_ln46_fu_273_p2;

assign sext_ln53_1_fu_293_p1 = add_ln53_fu_283_p2;

assign sext_ln53_fu_289_p1 = add_ln53_fu_283_p2;

assign sext_ln56_1_fu_557_p1 = $signed(trunc_ln8_fu_547_p4);

assign sext_ln56_fu_538_p1 = $signed(add_ln56_fu_533_p2);

assign shl_ln56_1_fu_415_p3 = {{iy_1_fu_395_p3}, {2'd0}};

assign shl_ln56_2_fu_521_p3 = {{select_ln55_fu_513_p3}, {2'd0}};

assign shl_ln_fu_403_p3 = {{iy_1_fu_395_p3}, {10'd0}};

assign sub_ln56_1_fu_338_p2 = (p_shl_fu_318_p3 - p_shl1_fu_330_p3);

assign sub_ln56_fu_427_p2 = (zext_ln56_fu_411_p1 - zext_ln56_1_fu_423_p1);

assign th_eff_cast_fu_263_p1 = th_eff_fu_205_p3;

assign th_eff_fu_205_p3 = ((tmp_fu_187_p3[0:0] == 1'b1) ? xor_ln428_fu_199_p2 : 8'd16);

assign tmp_5_fu_219_p3 = add_ln431_fu_213_p2[32'd8];

assign tmp_6_fu_369_p3 = add_ln46_1_fu_359_p2[32'd10];

assign tmp_7_fu_487_p3 = add_ln53_1_fu_477_p2[32'd10];

assign tmp_fu_187_p3 = add_ln428_fu_181_p2[32'd8];

assign trunc_ln427_fu_195_p1 = h0[7:0];

assign trunc_ln46_fu_385_p1 = iy_fu_377_p3[7:0];

assign trunc_ln56_1_fu_326_p1 = add_ln56_2_fu_309_p2[8:0];

assign trunc_ln56_2_fu_509_p1 = ix_fu_495_p3[7:0];

assign trunc_ln56_fu_314_p1 = add_ln56_2_fu_309_p2[5:0];

assign trunc_ln8_fu_547_p4 = {{add_ln56_1_fu_542_p2[63:2]}};

assign tw_eff_cast_fu_253_p1 = tw_eff_fu_233_p3;

assign tw_eff_fu_233_p3 = ((tmp_5_fu_219_p3[0:0] == 1'b1) ? xor_ln431_fu_227_p2 : 8'd16);

assign w0_cast2_fu_177_p1 = w0;

assign xor_ln428_fu_199_p2 = (trunc_ln427_fu_195_p1 ^ 8'd255);

assign xor_ln431_fu_227_p2 = (w0 ^ 8'd255);

assign zext_ln42_fu_344_p1 = py_fu_114;

assign zext_ln53_fu_473_p1 = px_reg_166;

assign zext_ln56_1_fu_423_p1 = shl_ln56_1_fu_415_p3;

assign zext_ln56_2_fu_529_p1 = shl_ln56_2_fu_521_p3;

assign zext_ln56_3_fu_305_p1 = py_fu_114;

assign zext_ln56_4_fu_448_p1 = px_reg_166;

assign zext_ln56_5_fu_457_p1 = add_ln56_3_fu_452_p2;

assign zext_ln56_fu_411_p1 = shl_ln_fu_403_p3;

always @ (posedge ap_clk) begin
    w0_cast2_reg_597[8] <= 1'b0;
    select_ln56_cast_cast_reg_602[1:0] <= 2'b00;
    select_ln56_cast_cast_reg_602[9:5] <= 5'b00000;
    sub_ln56_1_reg_637[1:0] <= 2'b00;
    sub_ln56_reg_650[1:0] <= 2'b00;
    ap_return_1_preg[8] <= 1'b0;
end

endmodule //srcnn_load_tile_mm
