// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_make_win97_Pipeline_win9x9_read_pix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_pix_i_dout,
        s_pix_i_num_data_valid,
        s_pix_i_fifo_cap,
        s_pix_i_empty_n,
        s_pix_i_read,
        s_win_i_din,
        s_win_i_num_data_valid,
        s_win_i_fifo_cap,
        s_win_i_full_n,
        s_win_i_write,
        empty,
        zext_ln125,
        lb1_7_address0,
        lb1_7_ce0,
        lb1_7_q0,
        lb1_7_address1,
        lb1_7_ce1,
        lb1_7_we1,
        lb1_7_d1,
        lb1_6_address0,
        lb1_6_ce0,
        lb1_6_q0,
        lb1_6_address1,
        lb1_6_ce1,
        lb1_6_we1,
        lb1_6_d1,
        lb1_5_address0,
        lb1_5_ce0,
        lb1_5_q0,
        lb1_5_address1,
        lb1_5_ce1,
        lb1_5_we1,
        lb1_5_d1,
        lb1_4_address0,
        lb1_4_ce0,
        lb1_4_q0,
        lb1_4_address1,
        lb1_4_ce1,
        lb1_4_we1,
        lb1_4_d1,
        lb1_3_address0,
        lb1_3_ce0,
        lb1_3_q0,
        lb1_3_address1,
        lb1_3_ce1,
        lb1_3_we1,
        lb1_3_d1,
        lb1_2_address0,
        lb1_2_ce0,
        lb1_2_q0,
        lb1_2_address1,
        lb1_2_ce1,
        lb1_2_we1,
        lb1_2_d1,
        lb1_1_address0,
        lb1_1_ce0,
        lb1_1_q0,
        lb1_1_address1,
        lb1_1_ce1,
        lb1_1_we1,
        lb1_1_d1,
        lb1_address0,
        lb1_ce0,
        lb1_q0,
        lb1_address1,
        lb1_ce1,
        lb1_we1,
        lb1_d1,
        zext_ln124
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] s_pix_i_dout;
input  [10:0] s_pix_i_num_data_valid;
input  [10:0] s_pix_i_fifo_cap;
input   s_pix_i_empty_n;
output   s_pix_i_read;
output  [2592:0] s_win_i_din;
input  [6:0] s_win_i_num_data_valid;
input  [6:0] s_win_i_fifo_cap;
input   s_win_i_full_n;
output   s_win_i_write;
input  [16:0] empty;
input  [8:0] zext_ln125;
output  [4:0] lb1_7_address0;
output   lb1_7_ce0;
input  [31:0] lb1_7_q0;
output  [4:0] lb1_7_address1;
output   lb1_7_ce1;
output   lb1_7_we1;
output  [31:0] lb1_7_d1;
output  [4:0] lb1_6_address0;
output   lb1_6_ce0;
input  [31:0] lb1_6_q0;
output  [4:0] lb1_6_address1;
output   lb1_6_ce1;
output   lb1_6_we1;
output  [31:0] lb1_6_d1;
output  [4:0] lb1_5_address0;
output   lb1_5_ce0;
input  [31:0] lb1_5_q0;
output  [4:0] lb1_5_address1;
output   lb1_5_ce1;
output   lb1_5_we1;
output  [31:0] lb1_5_d1;
output  [4:0] lb1_4_address0;
output   lb1_4_ce0;
input  [31:0] lb1_4_q0;
output  [4:0] lb1_4_address1;
output   lb1_4_ce1;
output   lb1_4_we1;
output  [31:0] lb1_4_d1;
output  [4:0] lb1_3_address0;
output   lb1_3_ce0;
input  [31:0] lb1_3_q0;
output  [4:0] lb1_3_address1;
output   lb1_3_ce1;
output   lb1_3_we1;
output  [31:0] lb1_3_d1;
output  [4:0] lb1_2_address0;
output   lb1_2_ce0;
input  [31:0] lb1_2_q0;
output  [4:0] lb1_2_address1;
output   lb1_2_ce1;
output   lb1_2_we1;
output  [31:0] lb1_2_d1;
output  [4:0] lb1_1_address0;
output   lb1_1_ce0;
input  [31:0] lb1_1_q0;
output  [4:0] lb1_1_address1;
output   lb1_1_ce1;
output   lb1_1_we1;
output  [31:0] lb1_1_d1;
output  [4:0] lb1_address0;
output   lb1_ce0;
input  [31:0] lb1_q0;
output  [4:0] lb1_address1;
output   lb1_ce1;
output   lb1_we1;
output  [31:0] lb1_d1;
input  [8:0] zext_ln124;

reg ap_idle;
reg s_pix_i_read;
reg s_win_i_write;
reg lb1_7_ce0;
reg lb1_7_ce1;
reg lb1_7_we1;
reg lb1_6_ce0;
reg lb1_6_ce1;
reg lb1_6_we1;
reg lb1_5_ce0;
reg lb1_5_ce1;
reg lb1_5_we1;
reg lb1_4_ce0;
reg lb1_4_ce1;
reg lb1_4_we1;
reg lb1_3_ce0;
reg lb1_3_ce1;
reg lb1_3_we1;
reg lb1_2_ce0;
reg lb1_2_ce1;
reg lb1_2_we1;
reg lb1_1_ce0;
reg lb1_1_ce1;
reg lb1_1_we1;
reg lb1_ce0;
reg lb1_ce1;
reg lb1_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln145_reg_2709;
reg   [0:0] and_ln180_reg_2801;
reg    ap_predicate_op385_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln145_fu_727_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_pix_i_blk_n;
wire    ap_block_pp0_stage0;
reg    s_win_i_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln124_cast_fu_615_p1;
reg   [31:0] zext_ln124_cast_reg_2698;
wire   [31:0] zext_ln125_cast_fu_619_p1;
reg   [31:0] zext_ln125_cast_reg_2703;
reg   [4:0] lb1_7_addr_reg_2713;
wire   [0:0] addr_cmp120_fu_753_p2;
reg   [0:0] addr_cmp120_reg_2719;
reg   [4:0] lb1_6_addr_reg_2724;
wire   [0:0] addr_cmp114_fu_762_p2;
reg   [0:0] addr_cmp114_reg_2730;
reg   [4:0] lb1_5_addr_reg_2735;
wire   [0:0] addr_cmp108_fu_771_p2;
reg   [0:0] addr_cmp108_reg_2741;
reg   [4:0] lb1_4_addr_reg_2746;
wire   [0:0] addr_cmp102_fu_780_p2;
reg   [0:0] addr_cmp102_reg_2752;
reg   [4:0] lb1_3_addr_reg_2757;
wire   [0:0] addr_cmp96_fu_789_p2;
reg   [0:0] addr_cmp96_reg_2763;
reg   [4:0] lb1_2_addr_reg_2768;
wire   [0:0] addr_cmp90_fu_798_p2;
reg   [0:0] addr_cmp90_reg_2774;
reg   [4:0] lb1_1_addr_reg_2779;
wire   [0:0] addr_cmp84_fu_807_p2;
reg   [0:0] addr_cmp84_reg_2785;
reg   [4:0] lb1_addr_reg_2790;
wire   [0:0] addr_cmp_fu_816_p2;
reg   [0:0] addr_cmp_reg_2796;
wire   [0:0] and_ln180_fu_894_p2;
wire   [0:0] w_valid_fu_910_p2;
reg   [0:0] w_valid_reg_2805;
wire   [63:0] idxprom29_i_fu_738_p1;
reg   [63:0] reuse_addr_reg117_fu_84;
wire    ap_loop_init;
reg   [31:0] reuse_reg116_fu_88;
wire   [31:0] reuse_select115_fu_1171_p3;
reg   [63:0] reuse_addr_reg111_fu_92;
reg   [31:0] reuse_reg110_fu_96;
wire   [31:0] reuse_select109_fu_1182_p3;
reg   [63:0] reuse_addr_reg105_fu_100;
reg   [31:0] reuse_reg104_fu_104;
wire   [31:0] reuse_select103_fu_1193_p3;
reg   [63:0] reuse_addr_reg99_fu_108;
reg   [31:0] reuse_reg98_fu_112;
wire   [31:0] reuse_select97_fu_1204_p3;
reg   [63:0] reuse_addr_reg93_fu_116;
reg   [31:0] reuse_reg92_fu_120;
wire   [31:0] reuse_select91_fu_1215_p3;
reg   [63:0] reuse_addr_reg87_fu_124;
reg   [31:0] reuse_reg86_fu_128;
wire   [31:0] reuse_select85_fu_1226_p3;
reg   [63:0] reuse_addr_reg81_fu_132;
reg   [31:0] reuse_reg80_fu_136;
wire   [31:0] reuse_select_fu_1237_p3;
reg   [63:0] reuse_addr_reg_fu_140;
reg   [31:0] reuse_reg_fu_144;
wire   [31:0] pix_fu_1153_p1;
reg   [31:0] x_fu_148;
wire   [31:0] x_5_fu_933_p3;
reg   [31:0] y_fu_152;
wire   [31:0] y_3_fu_941_p3;
reg   [16:0] t_fu_156;
wire   [16:0] add_ln145_fu_732_p2;
reg   [31:0] empty_70_fu_160;
reg   [31:0] empty_71_fu_164;
reg   [31:0] empty_72_fu_168;
reg   [31:0] empty_73_fu_172;
reg   [31:0] empty_74_fu_176;
reg   [31:0] empty_75_fu_180;
reg   [31:0] empty_76_fu_184;
reg   [31:0] empty_77_fu_188;
reg   [31:0] empty_78_fu_192;
reg   [31:0] empty_79_fu_196;
reg   [31:0] empty_80_fu_200;
reg   [31:0] empty_81_fu_204;
reg   [31:0] empty_82_fu_208;
reg   [31:0] empty_83_fu_212;
reg   [31:0] empty_84_fu_216;
reg   [31:0] empty_85_fu_220;
wire   [31:0] reuse_select121_fu_1161_p3;
reg   [31:0] empty_86_fu_224;
reg   [31:0] empty_87_fu_228;
reg   [31:0] empty_88_fu_232;
reg   [31:0] empty_89_fu_236;
reg   [31:0] empty_90_fu_240;
reg   [31:0] empty_91_fu_244;
reg   [31:0] empty_92_fu_248;
reg   [31:0] empty_93_fu_252;
reg   [31:0] empty_94_fu_256;
reg   [31:0] empty_95_fu_260;
reg   [31:0] empty_96_fu_264;
reg   [31:0] empty_97_fu_268;
reg   [31:0] empty_98_fu_272;
reg   [31:0] empty_99_fu_276;
reg   [31:0] empty_100_fu_280;
reg   [31:0] empty_101_fu_284;
reg   [31:0] empty_102_fu_288;
reg   [31:0] empty_103_fu_292;
reg   [31:0] empty_104_fu_296;
reg   [31:0] empty_105_fu_300;
reg   [31:0] empty_106_fu_304;
reg   [31:0] empty_107_fu_308;
reg   [31:0] empty_108_fu_312;
reg   [31:0] empty_109_fu_316;
reg   [31:0] empty_110_fu_320;
reg   [31:0] empty_111_fu_324;
reg   [31:0] empty_112_fu_328;
reg   [31:0] empty_113_fu_332;
reg   [31:0] empty_114_fu_336;
reg   [31:0] empty_115_fu_340;
reg   [31:0] empty_116_fu_344;
reg   [31:0] empty_117_fu_348;
reg   [31:0] empty_118_fu_352;
reg   [31:0] empty_119_fu_356;
reg   [31:0] empty_120_fu_360;
reg   [31:0] empty_121_fu_364;
reg   [31:0] empty_122_fu_368;
reg   [31:0] empty_123_fu_372;
reg   [31:0] empty_124_fu_376;
reg   [31:0] empty_125_fu_380;
reg   [31:0] empty_126_fu_384;
reg   [31:0] empty_127_fu_388;
reg   [31:0] empty_128_fu_392;
reg   [31:0] empty_129_fu_396;
reg   [31:0] empty_130_fu_400;
reg   [31:0] empty_131_fu_404;
reg   [31:0] empty_132_fu_408;
reg   [31:0] empty_133_fu_412;
reg   [31:0] empty_134_fu_416;
reg   [31:0] empty_135_fu_420;
reg   [31:0] empty_136_fu_424;
reg   [31:0] empty_137_fu_428;
reg   [31:0] empty_138_fu_432;
reg   [31:0] empty_139_fu_436;
reg   [31:0] empty_140_fu_440;
reg   [31:0] empty_141_fu_444;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] tmp_3_fu_862_p4;
wire   [28:0] tmp_4_fu_878_p4;
wire   [0:0] icmp_ln180_fu_872_p2;
wire   [0:0] icmp_ln180_1_fu_888_p2;
wire   [0:0] icmp_ln192_fu_900_p2;
wire   [0:0] icmp_ln192_1_fu_905_p2;
wire   [31:0] x_4_fu_916_p2;
wire   [0:0] icmp_ln200_fu_922_p2;
wire   [31:0] add_ln202_fu_927_p2;
wire   [31:0] bitcast_ln196_71_fu_1596_p1;
wire   [31:0] bitcast_ln196_70_fu_1592_p1;
wire   [31:0] bitcast_ln196_69_fu_1588_p1;
wire   [31:0] bitcast_ln196_68_fu_1584_p1;
wire   [31:0] bitcast_ln196_67_fu_1580_p1;
wire   [31:0] bitcast_ln196_66_fu_1576_p1;
wire   [31:0] bitcast_ln196_65_fu_1572_p1;
wire   [31:0] bitcast_ln196_64_fu_1568_p1;
wire   [31:0] bitcast_ln196_63_fu_1564_p1;
wire   [31:0] bitcast_ln196_62_fu_1560_p1;
wire   [31:0] bitcast_ln196_61_fu_1556_p1;
wire   [31:0] bitcast_ln196_60_fu_1552_p1;
wire   [31:0] bitcast_ln196_59_fu_1548_p1;
wire   [31:0] bitcast_ln196_58_fu_1544_p1;
wire   [31:0] bitcast_ln196_57_fu_1540_p1;
wire   [31:0] bitcast_ln196_56_fu_1536_p1;
wire   [31:0] bitcast_ln196_55_fu_1532_p1;
wire   [31:0] bitcast_ln196_54_fu_1528_p1;
wire   [31:0] bitcast_ln196_53_fu_1524_p1;
wire   [31:0] bitcast_ln196_52_fu_1520_p1;
wire   [31:0] bitcast_ln196_51_fu_1516_p1;
wire   [31:0] bitcast_ln196_50_fu_1512_p1;
wire   [31:0] bitcast_ln196_49_fu_1508_p1;
wire   [31:0] bitcast_ln196_48_fu_1504_p1;
wire   [31:0] bitcast_ln196_47_fu_1500_p1;
wire   [31:0] bitcast_ln196_46_fu_1496_p1;
wire   [31:0] bitcast_ln196_45_fu_1492_p1;
wire   [31:0] bitcast_ln196_44_fu_1488_p1;
wire   [31:0] bitcast_ln196_43_fu_1484_p1;
wire   [31:0] bitcast_ln196_42_fu_1480_p1;
wire   [31:0] bitcast_ln196_41_fu_1476_p1;
wire   [31:0] bitcast_ln196_40_fu_1472_p1;
wire   [31:0] bitcast_ln196_39_fu_1468_p1;
wire   [31:0] bitcast_ln196_38_fu_1464_p1;
wire   [31:0] bitcast_ln196_37_fu_1460_p1;
wire   [31:0] bitcast_ln196_36_fu_1456_p1;
wire   [31:0] bitcast_ln196_35_fu_1452_p1;
wire   [31:0] bitcast_ln196_34_fu_1448_p1;
wire   [31:0] bitcast_ln196_33_fu_1444_p1;
wire   [31:0] bitcast_ln196_32_fu_1440_p1;
wire   [31:0] bitcast_ln196_31_fu_1436_p1;
wire   [31:0] bitcast_ln196_30_fu_1432_p1;
wire   [31:0] bitcast_ln196_29_fu_1428_p1;
wire   [31:0] bitcast_ln196_28_fu_1424_p1;
wire   [31:0] bitcast_ln196_27_fu_1420_p1;
wire   [31:0] bitcast_ln196_26_fu_1416_p1;
wire   [31:0] bitcast_ln196_25_fu_1412_p1;
wire   [31:0] bitcast_ln196_24_fu_1408_p1;
wire   [31:0] bitcast_ln196_23_fu_1404_p1;
wire   [31:0] bitcast_ln196_22_fu_1400_p1;
wire   [31:0] bitcast_ln196_21_fu_1396_p1;
wire   [31:0] bitcast_ln196_20_fu_1392_p1;
wire   [31:0] bitcast_ln196_19_fu_1388_p1;
wire   [31:0] bitcast_ln196_18_fu_1384_p1;
wire   [31:0] bitcast_ln196_17_fu_1380_p1;
wire   [31:0] bitcast_ln196_16_fu_1376_p1;
wire   [31:0] bitcast_ln196_15_fu_1372_p1;
wire   [31:0] bitcast_ln196_14_fu_1368_p1;
wire   [31:0] bitcast_ln196_13_fu_1364_p1;
wire   [31:0] bitcast_ln196_12_fu_1360_p1;
wire   [31:0] bitcast_ln196_11_fu_1356_p1;
wire   [31:0] bitcast_ln196_10_fu_1352_p1;
wire   [31:0] bitcast_ln196_9_fu_1348_p1;
wire   [31:0] bitcast_ln196_8_fu_1344_p1;
wire   [31:0] bitcast_ln196_7_fu_1340_p1;
wire   [31:0] bitcast_ln196_6_fu_1336_p1;
wire   [31:0] bitcast_ln196_5_fu_1332_p1;
wire   [31:0] bitcast_ln196_4_fu_1328_p1;
wire   [31:0] bitcast_ln196_3_fu_1324_p1;
wire   [31:0] bitcast_ln196_2_fu_1320_p1;
wire   [31:0] bitcast_ln196_1_fu_1316_p1;
wire   [31:0] bitcast_ln196_fu_1312_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg105_fu_100 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg105_fu_100 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg111_fu_92 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg111_fu_92 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg117_fu_84 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg117_fu_84 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg81_fu_132 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg81_fu_132 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg87_fu_124 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg87_fu_124 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg93_fu_116 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg93_fu_116 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg99_fu_108 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg99_fu_108 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_140 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg_fu_140 <= idxprom29_i_fu_738_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg104_fu_104 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg104_fu_104 <= reuse_select103_fu_1193_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg110_fu_96 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg110_fu_96 <= reuse_select109_fu_1182_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg116_fu_88 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg116_fu_88 <= reuse_select115_fu_1171_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg80_fu_136 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg80_fu_136 <= reuse_select_fu_1237_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg86_fu_128 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg86_fu_128 <= reuse_select85_fu_1226_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg92_fu_120 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg92_fu_120 <= reuse_select91_fu_1215_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg98_fu_112 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg98_fu_112 <= reuse_select97_fu_1204_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_144 <= 32'd0;
        end else if (((icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg_fu_144 <= pix_fu_1153_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            t_fu_156 <= 17'd0;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            t_fu_156 <= add_ln145_fu_732_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_148 <= 32'd0;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_148 <= x_5_fu_933_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_152 <= 32'd0;
        end else if (((icmp_ln145_fu_727_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_152 <= y_3_fu_941_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_fu_727_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp102_reg_2752 <= addr_cmp102_fu_780_p2;
        addr_cmp108_reg_2741 <= addr_cmp108_fu_771_p2;
        addr_cmp114_reg_2730 <= addr_cmp114_fu_762_p2;
        addr_cmp120_reg_2719 <= addr_cmp120_fu_753_p2;
        addr_cmp84_reg_2785 <= addr_cmp84_fu_807_p2;
        addr_cmp90_reg_2774 <= addr_cmp90_fu_798_p2;
        addr_cmp96_reg_2763 <= addr_cmp96_fu_789_p2;
        addr_cmp_reg_2796 <= addr_cmp_fu_816_p2;
        and_ln180_reg_2801 <= and_ln180_fu_894_p2;
        lb1_1_addr_reg_2779 <= idxprom29_i_fu_738_p1;
        lb1_2_addr_reg_2768 <= idxprom29_i_fu_738_p1;
        lb1_3_addr_reg_2757 <= idxprom29_i_fu_738_p1;
        lb1_4_addr_reg_2746 <= idxprom29_i_fu_738_p1;
        lb1_5_addr_reg_2735 <= idxprom29_i_fu_738_p1;
        lb1_6_addr_reg_2724 <= idxprom29_i_fu_738_p1;
        lb1_7_addr_reg_2713 <= idxprom29_i_fu_738_p1;
        lb1_addr_reg_2790 <= idxprom29_i_fu_738_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_100_fu_280 <= empty_101_fu_284;
        empty_101_fu_284 <= empty_102_fu_288;
        empty_102_fu_288 <= empty_103_fu_292;
        empty_103_fu_292 <= empty_104_fu_296;
        empty_104_fu_296 <= empty_105_fu_300;
        empty_105_fu_300 <= empty_106_fu_304;
        empty_106_fu_304 <= reuse_select103_fu_1193_p3;
        empty_107_fu_308 <= empty_108_fu_312;
        empty_108_fu_312 <= empty_109_fu_316;
        empty_109_fu_316 <= empty_110_fu_320;
        empty_110_fu_320 <= empty_111_fu_324;
        empty_111_fu_324 <= empty_112_fu_328;
        empty_112_fu_328 <= empty_113_fu_332;
        empty_113_fu_332 <= reuse_select97_fu_1204_p3;
        empty_114_fu_336 <= empty_115_fu_340;
        empty_115_fu_340 <= empty_116_fu_344;
        empty_116_fu_344 <= empty_117_fu_348;
        empty_117_fu_348 <= empty_118_fu_352;
        empty_118_fu_352 <= empty_119_fu_356;
        empty_119_fu_356 <= empty_120_fu_360;
        empty_120_fu_360 <= reuse_select91_fu_1215_p3;
        empty_121_fu_364 <= empty_122_fu_368;
        empty_122_fu_368 <= empty_123_fu_372;
        empty_123_fu_372 <= empty_124_fu_376;
        empty_124_fu_376 <= empty_125_fu_380;
        empty_125_fu_380 <= empty_126_fu_384;
        empty_126_fu_384 <= empty_127_fu_388;
        empty_127_fu_388 <= reuse_select85_fu_1226_p3;
        empty_128_fu_392 <= empty_129_fu_396;
        empty_129_fu_396 <= empty_130_fu_400;
        empty_130_fu_400 <= empty_131_fu_404;
        empty_131_fu_404 <= empty_132_fu_408;
        empty_132_fu_408 <= empty_133_fu_412;
        empty_133_fu_412 <= empty_134_fu_416;
        empty_134_fu_416 <= reuse_select_fu_1237_p3;
        empty_135_fu_420 <= empty_136_fu_424;
        empty_136_fu_424 <= empty_137_fu_428;
        empty_137_fu_428 <= empty_138_fu_432;
        empty_138_fu_432 <= empty_139_fu_436;
        empty_139_fu_436 <= empty_140_fu_440;
        empty_140_fu_440 <= empty_141_fu_444;
        empty_141_fu_444 <= s_pix_i_dout;
        empty_70_fu_160 <= empty_79_fu_196;
        empty_71_fu_164 <= empty_86_fu_224;
        empty_72_fu_168 <= empty_93_fu_252;
        empty_73_fu_172 <= empty_100_fu_280;
        empty_74_fu_176 <= empty_107_fu_308;
        empty_75_fu_180 <= empty_114_fu_336;
        empty_76_fu_184 <= empty_121_fu_364;
        empty_77_fu_188 <= empty_128_fu_392;
        empty_78_fu_192 <= empty_135_fu_420;
        empty_79_fu_196 <= empty_80_fu_200;
        empty_80_fu_200 <= empty_81_fu_204;
        empty_81_fu_204 <= empty_82_fu_208;
        empty_82_fu_208 <= empty_83_fu_212;
        empty_83_fu_212 <= empty_84_fu_216;
        empty_84_fu_216 <= empty_85_fu_220;
        empty_85_fu_220 <= reuse_select121_fu_1161_p3;
        empty_86_fu_224 <= empty_87_fu_228;
        empty_87_fu_228 <= empty_88_fu_232;
        empty_88_fu_232 <= empty_89_fu_236;
        empty_89_fu_236 <= empty_90_fu_240;
        empty_90_fu_240 <= empty_91_fu_244;
        empty_91_fu_244 <= empty_92_fu_248;
        empty_92_fu_248 <= reuse_select115_fu_1171_p3;
        empty_93_fu_252 <= empty_94_fu_256;
        empty_94_fu_256 <= empty_95_fu_260;
        empty_95_fu_260 <= empty_96_fu_264;
        empty_96_fu_264 <= empty_97_fu_268;
        empty_97_fu_268 <= empty_98_fu_272;
        empty_98_fu_272 <= empty_99_fu_276;
        empty_99_fu_276 <= reuse_select109_fu_1182_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln145_reg_2709 <= icmp_ln145_fu_727_p2;
        zext_ln124_cast_reg_2698[8 : 0] <= zext_ln124_cast_fu_615_p1[8 : 0];
        zext_ln125_cast_reg_2703[8 : 0] <= zext_ln125_cast_fu_619_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_fu_727_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln180_fu_894_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_valid_reg_2805 <= w_valid_fu_910_p2;
    end
end

always @ (*) begin
    if (((icmp_ln145_fu_727_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_1_ce0 = 1'b1;
    end else begin
        lb1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_1_ce1 = 1'b1;
    end else begin
        lb1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_1_we1 = 1'b1;
    end else begin
        lb1_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_2_ce0 = 1'b1;
    end else begin
        lb1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_2_ce1 = 1'b1;
    end else begin
        lb1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_2_we1 = 1'b1;
    end else begin
        lb1_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_3_ce0 = 1'b1;
    end else begin
        lb1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_3_ce1 = 1'b1;
    end else begin
        lb1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_3_we1 = 1'b1;
    end else begin
        lb1_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_4_ce0 = 1'b1;
    end else begin
        lb1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_4_ce1 = 1'b1;
    end else begin
        lb1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_4_we1 = 1'b1;
    end else begin
        lb1_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_5_ce0 = 1'b1;
    end else begin
        lb1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_5_ce1 = 1'b1;
    end else begin
        lb1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_5_we1 = 1'b1;
    end else begin
        lb1_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_6_ce0 = 1'b1;
    end else begin
        lb1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_6_ce1 = 1'b1;
    end else begin
        lb1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_6_we1 = 1'b1;
    end else begin
        lb1_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_7_ce0 = 1'b1;
    end else begin
        lb1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_7_ce1 = 1'b1;
    end else begin
        lb1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_7_we1 = 1'b1;
    end else begin
        lb1_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_ce0 = 1'b1;
    end else begin
        lb1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_ce1 = 1'b1;
    end else begin
        lb1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_we1 = 1'b1;
    end else begin
        lb1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_pix_i_blk_n = s_pix_i_empty_n;
    end else begin
        s_pix_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2709 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_pix_i_read = 1'b1;
    end else begin
        s_pix_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op385_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_win_i_blk_n = s_win_i_full_n;
    end else begin
        s_win_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op385_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_win_i_write = 1'b1;
    end else begin
        s_win_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln145_fu_732_p2 = (t_fu_156 + 17'd1);

assign add_ln202_fu_927_p2 = (y_fu_152 + 32'd1);

assign addr_cmp102_fu_780_p2 = ((reuse_addr_reg99_fu_108 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp108_fu_771_p2 = ((reuse_addr_reg105_fu_100 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp114_fu_762_p2 = ((reuse_addr_reg111_fu_92 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp120_fu_753_p2 = ((reuse_addr_reg117_fu_84 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp84_fu_807_p2 = ((reuse_addr_reg81_fu_132 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp90_fu_798_p2 = ((reuse_addr_reg87_fu_124 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp96_fu_789_p2 = ((reuse_addr_reg93_fu_116 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_816_p2 = ((reuse_addr_reg_fu_140 == idxprom29_i_fu_738_p1) ? 1'b1 : 1'b0);

assign and_ln180_fu_894_p2 = (icmp_ln180_fu_872_p2 & icmp_ln180_1_fu_888_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2709 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2709 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2709 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2709 == 1'd0) & (s_pix_i_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op385_write_state3 = ((1'd1 == and_ln180_reg_2801) & (icmp_ln145_reg_2709 == 1'd0));
end

assign bitcast_ln196_10_fu_1352_p1 = empty_86_fu_224;

assign bitcast_ln196_11_fu_1356_p1 = empty_87_fu_228;

assign bitcast_ln196_12_fu_1360_p1 = empty_88_fu_232;

assign bitcast_ln196_13_fu_1364_p1 = empty_89_fu_236;

assign bitcast_ln196_14_fu_1368_p1 = empty_90_fu_240;

assign bitcast_ln196_15_fu_1372_p1 = empty_91_fu_244;

assign bitcast_ln196_16_fu_1376_p1 = empty_92_fu_248;

assign bitcast_ln196_17_fu_1380_p1 = reuse_select115_fu_1171_p3;

assign bitcast_ln196_18_fu_1384_p1 = empty_72_fu_168;

assign bitcast_ln196_19_fu_1388_p1 = empty_93_fu_252;

assign bitcast_ln196_1_fu_1316_p1 = empty_79_fu_196;

assign bitcast_ln196_20_fu_1392_p1 = empty_94_fu_256;

assign bitcast_ln196_21_fu_1396_p1 = empty_95_fu_260;

assign bitcast_ln196_22_fu_1400_p1 = empty_96_fu_264;

assign bitcast_ln196_23_fu_1404_p1 = empty_97_fu_268;

assign bitcast_ln196_24_fu_1408_p1 = empty_98_fu_272;

assign bitcast_ln196_25_fu_1412_p1 = empty_99_fu_276;

assign bitcast_ln196_26_fu_1416_p1 = reuse_select109_fu_1182_p3;

assign bitcast_ln196_27_fu_1420_p1 = empty_73_fu_172;

assign bitcast_ln196_28_fu_1424_p1 = empty_100_fu_280;

assign bitcast_ln196_29_fu_1428_p1 = empty_101_fu_284;

assign bitcast_ln196_2_fu_1320_p1 = empty_80_fu_200;

assign bitcast_ln196_30_fu_1432_p1 = empty_102_fu_288;

assign bitcast_ln196_31_fu_1436_p1 = empty_103_fu_292;

assign bitcast_ln196_32_fu_1440_p1 = empty_104_fu_296;

assign bitcast_ln196_33_fu_1444_p1 = empty_105_fu_300;

assign bitcast_ln196_34_fu_1448_p1 = empty_106_fu_304;

assign bitcast_ln196_35_fu_1452_p1 = reuse_select103_fu_1193_p3;

assign bitcast_ln196_36_fu_1456_p1 = empty_74_fu_176;

assign bitcast_ln196_37_fu_1460_p1 = empty_107_fu_308;

assign bitcast_ln196_38_fu_1464_p1 = empty_108_fu_312;

assign bitcast_ln196_39_fu_1468_p1 = empty_109_fu_316;

assign bitcast_ln196_3_fu_1324_p1 = empty_81_fu_204;

assign bitcast_ln196_40_fu_1472_p1 = empty_110_fu_320;

assign bitcast_ln196_41_fu_1476_p1 = empty_111_fu_324;

assign bitcast_ln196_42_fu_1480_p1 = empty_112_fu_328;

assign bitcast_ln196_43_fu_1484_p1 = empty_113_fu_332;

assign bitcast_ln196_44_fu_1488_p1 = reuse_select97_fu_1204_p3;

assign bitcast_ln196_45_fu_1492_p1 = empty_75_fu_180;

assign bitcast_ln196_46_fu_1496_p1 = empty_114_fu_336;

assign bitcast_ln196_47_fu_1500_p1 = empty_115_fu_340;

assign bitcast_ln196_48_fu_1504_p1 = empty_116_fu_344;

assign bitcast_ln196_49_fu_1508_p1 = empty_117_fu_348;

assign bitcast_ln196_4_fu_1328_p1 = empty_82_fu_208;

assign bitcast_ln196_50_fu_1512_p1 = empty_118_fu_352;

assign bitcast_ln196_51_fu_1516_p1 = empty_119_fu_356;

assign bitcast_ln196_52_fu_1520_p1 = empty_120_fu_360;

assign bitcast_ln196_53_fu_1524_p1 = reuse_select91_fu_1215_p3;

assign bitcast_ln196_54_fu_1528_p1 = empty_76_fu_184;

assign bitcast_ln196_55_fu_1532_p1 = empty_121_fu_364;

assign bitcast_ln196_56_fu_1536_p1 = empty_122_fu_368;

assign bitcast_ln196_57_fu_1540_p1 = empty_123_fu_372;

assign bitcast_ln196_58_fu_1544_p1 = empty_124_fu_376;

assign bitcast_ln196_59_fu_1548_p1 = empty_125_fu_380;

assign bitcast_ln196_5_fu_1332_p1 = empty_83_fu_212;

assign bitcast_ln196_60_fu_1552_p1 = empty_126_fu_384;

assign bitcast_ln196_61_fu_1556_p1 = empty_127_fu_388;

assign bitcast_ln196_62_fu_1560_p1 = reuse_select85_fu_1226_p3;

assign bitcast_ln196_63_fu_1564_p1 = empty_77_fu_188;

assign bitcast_ln196_64_fu_1568_p1 = empty_128_fu_392;

assign bitcast_ln196_65_fu_1572_p1 = empty_129_fu_396;

assign bitcast_ln196_66_fu_1576_p1 = empty_130_fu_400;

assign bitcast_ln196_67_fu_1580_p1 = empty_131_fu_404;

assign bitcast_ln196_68_fu_1584_p1 = empty_132_fu_408;

assign bitcast_ln196_69_fu_1588_p1 = empty_133_fu_412;

assign bitcast_ln196_6_fu_1336_p1 = empty_84_fu_216;

assign bitcast_ln196_70_fu_1592_p1 = empty_134_fu_416;

assign bitcast_ln196_71_fu_1596_p1 = reuse_select_fu_1237_p3;

assign bitcast_ln196_7_fu_1340_p1 = empty_85_fu_220;

assign bitcast_ln196_8_fu_1344_p1 = reuse_select121_fu_1161_p3;

assign bitcast_ln196_9_fu_1348_p1 = empty_71_fu_164;

assign bitcast_ln196_fu_1312_p1 = empty_70_fu_160;

assign icmp_ln145_fu_727_p2 = ((t_fu_156 == empty) ? 1'b1 : 1'b0);

assign icmp_ln180_1_fu_888_p2 = (($signed(tmp_4_fu_878_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_872_p2 = (($signed(tmp_3_fu_862_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln192_1_fu_905_p2 = (($signed(x_fu_148) < $signed(zext_ln125_cast_reg_2703)) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_900_p2 = (($signed(y_fu_152) < $signed(zext_ln124_cast_reg_2698)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_922_p2 = ((x_4_fu_916_p2 == zext_ln125_cast_reg_2703) ? 1'b1 : 1'b0);

assign idxprom29_i_fu_738_p1 = x_fu_148;

assign lb1_1_address0 = idxprom29_i_fu_738_p1;

assign lb1_1_address1 = lb1_1_addr_reg_2779;

assign lb1_1_d1 = reuse_select_fu_1237_p3;

assign lb1_2_address0 = idxprom29_i_fu_738_p1;

assign lb1_2_address1 = lb1_2_addr_reg_2768;

assign lb1_2_d1 = reuse_select85_fu_1226_p3;

assign lb1_3_address0 = idxprom29_i_fu_738_p1;

assign lb1_3_address1 = lb1_3_addr_reg_2757;

assign lb1_3_d1 = reuse_select91_fu_1215_p3;

assign lb1_4_address0 = idxprom29_i_fu_738_p1;

assign lb1_4_address1 = lb1_4_addr_reg_2746;

assign lb1_4_d1 = reuse_select97_fu_1204_p3;

assign lb1_5_address0 = idxprom29_i_fu_738_p1;

assign lb1_5_address1 = lb1_5_addr_reg_2735;

assign lb1_5_d1 = reuse_select103_fu_1193_p3;

assign lb1_6_address0 = idxprom29_i_fu_738_p1;

assign lb1_6_address1 = lb1_6_addr_reg_2724;

assign lb1_6_d1 = reuse_select109_fu_1182_p3;

assign lb1_7_address0 = idxprom29_i_fu_738_p1;

assign lb1_7_address1 = lb1_7_addr_reg_2713;

assign lb1_7_d1 = reuse_select115_fu_1171_p3;

assign lb1_address0 = idxprom29_i_fu_738_p1;

assign lb1_address1 = lb1_addr_reg_2790;

assign lb1_d1 = s_pix_i_dout;

assign pix_fu_1153_p1 = s_pix_i_dout;

assign reuse_select103_fu_1193_p3 = ((addr_cmp102_reg_2752[0:0] == 1'b1) ? reuse_reg98_fu_112 : lb1_4_q0);

assign reuse_select109_fu_1182_p3 = ((addr_cmp108_reg_2741[0:0] == 1'b1) ? reuse_reg104_fu_104 : lb1_5_q0);

assign reuse_select115_fu_1171_p3 = ((addr_cmp114_reg_2730[0:0] == 1'b1) ? reuse_reg110_fu_96 : lb1_6_q0);

assign reuse_select121_fu_1161_p3 = ((addr_cmp120_reg_2719[0:0] == 1'b1) ? reuse_reg116_fu_88 : lb1_7_q0);

assign reuse_select85_fu_1226_p3 = ((addr_cmp84_reg_2785[0:0] == 1'b1) ? reuse_reg80_fu_136 : lb1_1_q0);

assign reuse_select91_fu_1215_p3 = ((addr_cmp90_reg_2774[0:0] == 1'b1) ? reuse_reg86_fu_128 : lb1_2_q0);

assign reuse_select97_fu_1204_p3 = ((addr_cmp96_reg_2763[0:0] == 1'b1) ? reuse_reg92_fu_120 : lb1_3_q0);

assign reuse_select_fu_1237_p3 = ((addr_cmp_reg_2796[0:0] == 1'b1) ? reuse_reg_fu_144 : lb1_q0);

assign s_win_i_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{w_valid_reg_2805}, {s_pix_i_dout}}, {empty_141_fu_444}}, {empty_140_fu_440}}, {empty_139_fu_436}}, {empty_138_fu_432}}, {empty_137_fu_428}}, {empty_136_fu_424}}, {empty_135_fu_420}}, {empty_78_fu_192}}, {bitcast_ln196_71_fu_1596_p1}}, {bitcast_ln196_70_fu_1592_p1}}, {bitcast_ln196_69_fu_1588_p1}}, {bitcast_ln196_68_fu_1584_p1}}, {bitcast_ln196_67_fu_1580_p1}}, {bitcast_ln196_66_fu_1576_p1}}, {bitcast_ln196_65_fu_1572_p1}}, {bitcast_ln196_64_fu_1568_p1}}, {bitcast_ln196_63_fu_1564_p1}}, {bitcast_ln196_62_fu_1560_p1}}, {bitcast_ln196_61_fu_1556_p1}}, {bitcast_ln196_60_fu_1552_p1}}, {bitcast_ln196_59_fu_1548_p1}}, {bitcast_ln196_58_fu_1544_p1}}, {bitcast_ln196_57_fu_1540_p1}}, {bitcast_ln196_56_fu_1536_p1}}, {bitcast_ln196_55_fu_1532_p1}}, {bitcast_ln196_54_fu_1528_p1}}, {bitcast_ln196_53_fu_1524_p1}}, {bitcast_ln196_52_fu_1520_p1}}, {bitcast_ln196_51_fu_1516_p1}}, {bitcast_ln196_50_fu_1512_p1}}, {bitcast_ln196_49_fu_1508_p1}}, {bitcast_ln196_48_fu_1504_p1}}, 
    {bitcast_ln196_47_fu_1500_p1}}, {bitcast_ln196_46_fu_1496_p1}}, {bitcast_ln196_45_fu_1492_p1}}, {bitcast_ln196_44_fu_1488_p1}}, {bitcast_ln196_43_fu_1484_p1}}, {bitcast_ln196_42_fu_1480_p1}}, {bitcast_ln196_41_fu_1476_p1}}, {bitcast_ln196_40_fu_1472_p1}}, {bitcast_ln196_39_fu_1468_p1}}, {bitcast_ln196_38_fu_1464_p1}}, {bitcast_ln196_37_fu_1460_p1}}, {bitcast_ln196_36_fu_1456_p1}}, {bitcast_ln196_35_fu_1452_p1}}, {bitcast_ln196_34_fu_1448_p1}}, {bitcast_ln196_33_fu_1444_p1}}, {bitcast_ln196_32_fu_1440_p1}}, {bitcast_ln196_31_fu_1436_p1}}, {bitcast_ln196_30_fu_1432_p1}}, {bitcast_ln196_29_fu_1428_p1}}, {bitcast_ln196_28_fu_1424_p1}}, {bitcast_ln196_27_fu_1420_p1}}, {bitcast_ln196_26_fu_1416_p1}}, {bitcast_ln196_25_fu_1412_p1}}, {bitcast_ln196_24_fu_1408_p1}}, {bitcast_ln196_23_fu_1404_p1}}, {bitcast_ln196_22_fu_1400_p1}}, {bitcast_ln196_21_fu_1396_p1}}, {bitcast_ln196_20_fu_1392_p1}}, {bitcast_ln196_19_fu_1388_p1}}, {bitcast_ln196_18_fu_1384_p1}}, {bitcast_ln196_17_fu_1380_p1}}, {bitcast_ln196_16_fu_1376_p1}}, {bitcast_ln196_15_fu_1372_p1}}, 
    {bitcast_ln196_14_fu_1368_p1}}, {bitcast_ln196_13_fu_1364_p1}}, {bitcast_ln196_12_fu_1360_p1}}, {bitcast_ln196_11_fu_1356_p1}}, {bitcast_ln196_10_fu_1352_p1}}, {bitcast_ln196_9_fu_1348_p1}}, {bitcast_ln196_8_fu_1344_p1}}, {bitcast_ln196_7_fu_1340_p1}}, {bitcast_ln196_6_fu_1336_p1}}, {bitcast_ln196_5_fu_1332_p1}}, {bitcast_ln196_4_fu_1328_p1}}, {bitcast_ln196_3_fu_1324_p1}}, {bitcast_ln196_2_fu_1320_p1}}, {bitcast_ln196_1_fu_1316_p1}}, {bitcast_ln196_fu_1312_p1}};

assign tmp_3_fu_862_p4 = {{y_fu_152[31:3]}};

assign tmp_4_fu_878_p4 = {{x_fu_148[31:3]}};

assign w_valid_fu_910_p2 = (icmp_ln192_fu_900_p2 & icmp_ln192_1_fu_905_p2);

assign x_4_fu_916_p2 = (x_fu_148 + 32'd1);

assign x_5_fu_933_p3 = ((icmp_ln200_fu_922_p2[0:0] == 1'b1) ? 32'd0 : x_4_fu_916_p2);

assign y_3_fu_941_p3 = ((icmp_ln200_fu_922_p2[0:0] == 1'b1) ? add_ln202_fu_927_p2 : y_fu_152);

assign zext_ln124_cast_fu_615_p1 = zext_ln124;

assign zext_ln125_cast_fu_619_p1 = zext_ln125;

always @ (posedge ap_clk) begin
    zext_ln124_cast_reg_2698[31:9] <= 23'b00000000000000000000000;
    zext_ln125_cast_reg_2703[31:9] <= 23'b00000000000000000000000;
end

endmodule //srcnn_make_win97_Pipeline_win9x9_read_pix
