// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_store_tile_mm_Block_entry23_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        phase_dout,
        phase_num_data_valid,
        phase_fifo_cap,
        phase_empty_n,
        phase_read,
        h0,
        w0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] phase_dout;
input  [1:0] phase_num_data_valid;
input  [1:0] phase_fifo_cap;
input   phase_empty_n;
output   phase_read;
input  [8:0] h0;
input  [8:0] w0;
output  [63:0] ap_return_0;
output  [9:0] ap_return_1;
output  [63:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg phase_read;
reg[63:0] ap_return_0;
reg[9:0] ap_return_1;
reg[63:0] ap_return_2;
reg[31:0] ap_return_3;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    phase_blk_n;
reg    ap_block_state1;
wire   [8:0] add_ln532_fu_68_p2;
wire   [7:0] trunc_ln531_fu_82_p1;
wire   [0:0] tmp_fu_74_p3;
wire   [7:0] xor_ln532_fu_86_p2;
wire   [0:0] xor_ln538_fu_62_p2;
wire   [10:0] shl_ln_fu_108_p3;
wire   [7:0] select_ln532_fu_92_p3;
wire   [63:0] out_tile_offset_cast_loc_i_i_0_fu_100_p1;
wire   [9:0] zext_ln333_fu_104_p1;
wire   [63:0] shl_ln333_cast_loc_i_i_0_fu_116_p1;
wire   [31:0] zext_ln333_6_fu_120_p1;
reg   [63:0] ap_return_0_preg;
reg   [9:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 10'd0;
#0 ap_return_2_preg = 64'd0;
#0 ap_return_3_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[0] <= out_tile_offset_cast_loc_i_i_0_fu_100_p1[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[8 : 0] <= zext_ln333_fu_104_p1[8 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[2] <= 1'b0;
        ap_return_2_preg[3] <= 1'b0;
        ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
        ap_return_2_preg[10] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[10 : 2] <= shl_ln333_cast_loc_i_i_0_fu_116_p1[10 : 2];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[0] <= 1'b0;
        ap_return_3_preg[1] <= 1'b0;
        ap_return_3_preg[2] <= 1'b0;
        ap_return_3_preg[3] <= 1'b0;
        ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_3_preg[7 : 0] <= zext_ln333_6_fu_120_p1[7 : 0];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = out_tile_offset_cast_loc_i_i_0_fu_100_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = zext_ln333_fu_104_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = shl_ln333_cast_loc_i_i_0_fu_116_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = zext_ln333_6_fu_120_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phase_blk_n = phase_empty_n;
    end else begin
        phase_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phase_read = 1'b1;
    end else begin
        phase_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln532_fu_68_p2 = (w0 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (phase_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign out_tile_offset_cast_loc_i_i_0_fu_100_p1 = xor_ln538_fu_62_p2;

assign select_ln532_fu_92_p3 = ((tmp_fu_74_p3[0:0] == 1'b1) ? xor_ln532_fu_86_p2 : 8'd16);

assign shl_ln333_cast_loc_i_i_0_fu_116_p1 = shl_ln_fu_108_p3;

assign shl_ln_fu_108_p3 = {{w0}, {2'd0}};

assign tmp_fu_74_p3 = add_ln532_fu_68_p2[32'd8];

assign trunc_ln531_fu_82_p1 = w0[7:0];

assign xor_ln532_fu_86_p2 = (trunc_ln531_fu_82_p1 ^ 8'd255);

assign xor_ln538_fu_62_p2 = (phase_dout ^ 1'd1);

assign zext_ln333_6_fu_120_p1 = select_ln532_fu_92_p3;

assign zext_ln333_fu_104_p1 = h0;

always @ (posedge ap_clk) begin
    ap_return_0_preg[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    ap_return_1_preg[9] <= 1'b0;
    ap_return_2_preg[1:0] <= 2'b00;
    ap_return_2_preg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_return_3_preg[31:8] <= 24'b000000000000000000000000;
end

endmodule //srcnn_store_tile_mm_Block_entry23_proc
