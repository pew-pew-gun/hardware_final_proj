// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_conv1conv2_from_windows8_Pipeline_Push_conv2pix_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        acc2_address0,
        acc2_ce0,
        acc2_q0,
        outpix_address0,
        outpix_ce0,
        outpix_we0,
        outpix_d0,
        acc2_1_address0,
        acc2_1_ce0,
        acc2_1_q0,
        acc2_2_address0,
        acc2_2_ce0,
        acc2_2_q0,
        acc2_3_address0,
        acc2_3_ce0,
        acc2_3_q0,
        grp_fu_5557_p_din0,
        grp_fu_5557_p_din1,
        grp_fu_5557_p_opcode,
        grp_fu_5557_p_dout0,
        grp_fu_5557_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] acc2_address0;
output   acc2_ce0;
input  [31:0] acc2_q0;
output  [4:0] outpix_address0;
output   outpix_ce0;
output   outpix_we0;
output  [31:0] outpix_d0;
output  [2:0] acc2_1_address0;
output   acc2_1_ce0;
input  [31:0] acc2_1_q0;
output  [2:0] acc2_2_address0;
output   acc2_2_ce0;
input  [31:0] acc2_2_q0;
output  [2:0] acc2_3_address0;
output   acc2_3_ce0;
input  [31:0] acc2_3_q0;
output  [31:0] grp_fu_5557_p_din0;
output  [31:0] grp_fu_5557_p_din1;
output  [4:0] grp_fu_5557_p_opcode;
input  [0:0] grp_fu_5557_p_dout0;
output   grp_fu_5557_p_ce;

reg ap_idle;
reg acc2_ce0;
reg[4:0] outpix_address0;
reg outpix_ce0;
reg outpix_we0;
reg[31:0] outpix_d0;
reg acc2_1_ce0;
reg acc2_2_ce0;
reg acc2_3_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] tmp_reg_450;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [5:0] n2_1_reg_444;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_fu_167_p3;
reg   [31:0] t2_reg_474;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] t2_1_reg_481;
reg   [31:0] t2_2_reg_488;
reg   [31:0] t2_3_reg_495;
wire   [4:0] trunc_ln376_fu_208_p1;
reg   [4:0] trunc_ln376_reg_502;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln376_1_fu_185_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln376_fu_204_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln379_fu_265_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln379_1_fu_324_p1;
wire   [63:0] zext_ln379_2_fu_383_p1;
wire    ap_block_pp0_stage1;
reg   [5:0] n2_fu_60;
wire   [5:0] add_ln376_fu_193_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_n2_1;
wire   [31:0] select_ln380_fu_252_p3;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] select_ln380_1_fu_311_p3;
wire   [31:0] select_ln380_2_fu_370_p3;
wire   [31:0] select_ln380_3_fu_429_p3;
reg   [31:0] grp_fu_153_p0;
wire   [2:0] lshr_ln1_fu_175_p4;
wire   [31:0] bitcast_ln380_fu_211_p1;
wire   [7:0] tmp_2_fu_214_p4;
wire   [22:0] trunc_ln380_fu_224_p1;
wire   [0:0] icmp_ln380_1_fu_234_p2;
wire   [0:0] icmp_ln380_fu_228_p2;
wire   [0:0] or_ln380_fu_240_p2;
wire   [0:0] and_ln380_fu_246_p2;
wire   [4:0] or_ln376_fu_260_p2;
wire   [31:0] bitcast_ln380_1_fu_270_p1;
wire   [7:0] tmp_4_fu_273_p4;
wire   [22:0] trunc_ln380_1_fu_283_p1;
wire   [0:0] icmp_ln380_3_fu_293_p2;
wire   [0:0] icmp_ln380_2_fu_287_p2;
wire   [0:0] or_ln380_1_fu_299_p2;
wire   [0:0] and_ln380_1_fu_305_p2;
wire   [4:0] or_ln376_1_fu_319_p2;
wire   [31:0] bitcast_ln380_2_fu_329_p1;
wire   [7:0] tmp_6_fu_332_p4;
wire   [22:0] trunc_ln380_2_fu_342_p1;
wire   [0:0] icmp_ln380_5_fu_352_p2;
wire   [0:0] icmp_ln380_4_fu_346_p2;
wire   [0:0] or_ln380_2_fu_358_p2;
wire   [0:0] and_ln380_2_fu_364_p2;
wire   [4:0] or_ln376_2_fu_378_p2;
wire   [31:0] bitcast_ln380_3_fu_388_p1;
wire   [7:0] tmp_8_fu_391_p4;
wire   [22:0] trunc_ln380_3_fu_401_p1;
wire   [0:0] icmp_ln380_7_fu_411_p2;
wire   [0:0] icmp_ln380_6_fu_405_p2;
wire   [0:0] or_ln380_3_fu_417_p2;
wire   [0:0] and_ln380_3_fu_423_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_167_p3 == 1'd0))) begin
            n2_fu_60 <= add_ln376_fu_193_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n2_fu_60 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n2_1_reg_444 <= ap_sig_allocacmp_n2_1;
        tmp_reg_450 <= ap_sig_allocacmp_n2_1[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_450 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t2_1_reg_481 <= acc2_1_q0;
        t2_2_reg_488 <= acc2_2_q0;
        t2_3_reg_495 <= acc2_3_q0;
        t2_reg_474 <= acc2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_450 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln376_reg_502 <= trunc_ln376_fu_208_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_1_ce0 = 1'b1;
    end else begin
        acc2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_2_ce0 = 1'b1;
    end else begin
        acc2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_3_ce0 = 1'b1;
    end else begin
        acc2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_ce0 = 1'b1;
    end else begin
        acc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_450 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n2_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_n2_1 = n2_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_153_p0 = t2_3_reg_495;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_153_p0 = t2_2_reg_488;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_153_p0 = t2_1_reg_481;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_153_p0 = acc2_q0;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        outpix_address0 = zext_ln379_2_fu_383_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outpix_address0 = zext_ln379_1_fu_324_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        outpix_address0 = zext_ln379_fu_265_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        outpix_address0 = zext_ln376_fu_204_p1;
    end else begin
        outpix_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        outpix_ce0 = 1'b1;
    end else begin
        outpix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        outpix_d0 = select_ln380_3_fu_429_p3;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outpix_d0 = select_ln380_2_fu_370_p3;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        outpix_d0 = select_ln380_1_fu_311_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        outpix_d0 = select_ln380_fu_252_p3;
    end else begin
        outpix_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_450 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((tmp_reg_450 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        outpix_we0 = 1'b1;
    end else begin
        outpix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc2_1_address0 = zext_ln376_1_fu_185_p1;

assign acc2_2_address0 = zext_ln376_1_fu_185_p1;

assign acc2_3_address0 = zext_ln376_1_fu_185_p1;

assign acc2_address0 = zext_ln376_1_fu_185_p1;

assign add_ln376_fu_193_p2 = (ap_sig_allocacmp_n2_1 + 6'd4);

assign and_ln380_1_fu_305_p2 = (or_ln380_1_fu_299_p2 & grp_fu_5557_p_dout0);

assign and_ln380_2_fu_364_p2 = (or_ln380_2_fu_358_p2 & grp_fu_5557_p_dout0);

assign and_ln380_3_fu_423_p2 = (or_ln380_3_fu_417_p2 & grp_fu_5557_p_dout0);

assign and_ln380_fu_246_p2 = (or_ln380_fu_240_p2 & grp_fu_5557_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln380_1_fu_270_p1 = t2_1_reg_481;

assign bitcast_ln380_2_fu_329_p1 = t2_2_reg_488;

assign bitcast_ln380_3_fu_388_p1 = t2_3_reg_495;

assign bitcast_ln380_fu_211_p1 = t2_reg_474;

assign grp_fu_5557_p_ce = 1'b1;

assign grp_fu_5557_p_din0 = grp_fu_153_p0;

assign grp_fu_5557_p_din1 = 32'd0;

assign grp_fu_5557_p_opcode = 5'd2;

assign icmp_ln380_1_fu_234_p2 = ((trunc_ln380_fu_224_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln380_2_fu_287_p2 = ((tmp_4_fu_273_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln380_3_fu_293_p2 = ((trunc_ln380_1_fu_283_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln380_4_fu_346_p2 = ((tmp_6_fu_332_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln380_5_fu_352_p2 = ((trunc_ln380_2_fu_342_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln380_6_fu_405_p2 = ((tmp_8_fu_391_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln380_7_fu_411_p2 = ((trunc_ln380_3_fu_401_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln380_fu_228_p2 = ((tmp_2_fu_214_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_175_p4 = {{ap_sig_allocacmp_n2_1[4:2]}};

assign or_ln376_1_fu_319_p2 = (trunc_ln376_reg_502 | 5'd2);

assign or_ln376_2_fu_378_p2 = (trunc_ln376_reg_502 | 5'd3);

assign or_ln376_fu_260_p2 = (trunc_ln376_reg_502 | 5'd1);

assign or_ln380_1_fu_299_p2 = (icmp_ln380_3_fu_293_p2 | icmp_ln380_2_fu_287_p2);

assign or_ln380_2_fu_358_p2 = (icmp_ln380_5_fu_352_p2 | icmp_ln380_4_fu_346_p2);

assign or_ln380_3_fu_417_p2 = (icmp_ln380_7_fu_411_p2 | icmp_ln380_6_fu_405_p2);

assign or_ln380_fu_240_p2 = (icmp_ln380_fu_228_p2 | icmp_ln380_1_fu_234_p2);

assign select_ln380_1_fu_311_p3 = ((and_ln380_1_fu_305_p2[0:0] == 1'b1) ? t2_1_reg_481 : 32'd0);

assign select_ln380_2_fu_370_p3 = ((and_ln380_2_fu_364_p2[0:0] == 1'b1) ? t2_2_reg_488 : 32'd0);

assign select_ln380_3_fu_429_p3 = ((and_ln380_3_fu_423_p2[0:0] == 1'b1) ? t2_3_reg_495 : 32'd0);

assign select_ln380_fu_252_p3 = ((and_ln380_fu_246_p2[0:0] == 1'b1) ? t2_reg_474 : 32'd0);

assign tmp_2_fu_214_p4 = {{bitcast_ln380_fu_211_p1[30:23]}};

assign tmp_4_fu_273_p4 = {{bitcast_ln380_1_fu_270_p1[30:23]}};

assign tmp_6_fu_332_p4 = {{bitcast_ln380_2_fu_329_p1[30:23]}};

assign tmp_8_fu_391_p4 = {{bitcast_ln380_3_fu_388_p1[30:23]}};

assign tmp_fu_167_p3 = ap_sig_allocacmp_n2_1[32'd5];

assign trunc_ln376_fu_208_p1 = n2_1_reg_444[4:0];

assign trunc_ln380_1_fu_283_p1 = bitcast_ln380_1_fu_270_p1[22:0];

assign trunc_ln380_2_fu_342_p1 = bitcast_ln380_2_fu_329_p1[22:0];

assign trunc_ln380_3_fu_401_p1 = bitcast_ln380_3_fu_388_p1[22:0];

assign trunc_ln380_fu_224_p1 = bitcast_ln380_fu_211_p1[22:0];

assign zext_ln376_1_fu_185_p1 = lshr_ln1_fu_175_p4;

assign zext_ln376_fu_204_p1 = n2_1_reg_444;

assign zext_ln379_1_fu_324_p1 = or_ln376_1_fu_319_p2;

assign zext_ln379_2_fu_383_p1 = or_ln376_2_fu_378_p2;

assign zext_ln379_fu_265_p1 = or_ln376_fu_260_p2;

endmodule //srcnn_conv1conv2_from_windows8_Pipeline_Push_conv2pix_out
