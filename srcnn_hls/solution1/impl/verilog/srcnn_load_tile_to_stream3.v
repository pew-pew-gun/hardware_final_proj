// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_tile_to_stream3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY,
        m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY,
        m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID,
        m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP,
        m_axi_gmem_in_BID,
        m_axi_gmem_in_BUSER,
        input_ftmap,
        h0,
        w0,
        p_read,
        s_pix_i_din,
        s_pix_i_num_data_valid,
        s_pix_i_fifo_cap,
        s_pix_i_full_n,
        s_pix_i_write,
        tw_eff_loc_i_c2_din,
        tw_eff_loc_i_c2_num_data_valid,
        tw_eff_loc_i_c2_fifo_cap,
        tw_eff_loc_i_c2_full_n,
        tw_eff_loc_i_c2_write,
        w0_c4_din,
        w0_c4_num_data_valid,
        w0_c4_fifo_cap,
        w0_c4_full_n,
        w0_c4_write,
        h0_c6_din,
        h0_c6_num_data_valid,
        h0_c6_fifo_cap,
        h0_c6_full_n,
        h0_c6_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_in_AWVALID;
input   m_axi_gmem_in_AWREADY;
output  [63:0] m_axi_gmem_in_AWADDR;
output  [0:0] m_axi_gmem_in_AWID;
output  [31:0] m_axi_gmem_in_AWLEN;
output  [2:0] m_axi_gmem_in_AWSIZE;
output  [1:0] m_axi_gmem_in_AWBURST;
output  [1:0] m_axi_gmem_in_AWLOCK;
output  [3:0] m_axi_gmem_in_AWCACHE;
output  [2:0] m_axi_gmem_in_AWPROT;
output  [3:0] m_axi_gmem_in_AWQOS;
output  [3:0] m_axi_gmem_in_AWREGION;
output  [0:0] m_axi_gmem_in_AWUSER;
output   m_axi_gmem_in_WVALID;
input   m_axi_gmem_in_WREADY;
output  [31:0] m_axi_gmem_in_WDATA;
output  [3:0] m_axi_gmem_in_WSTRB;
output   m_axi_gmem_in_WLAST;
output  [0:0] m_axi_gmem_in_WID;
output  [0:0] m_axi_gmem_in_WUSER;
output   m_axi_gmem_in_ARVALID;
input   m_axi_gmem_in_ARREADY;
output  [63:0] m_axi_gmem_in_ARADDR;
output  [0:0] m_axi_gmem_in_ARID;
output  [31:0] m_axi_gmem_in_ARLEN;
output  [2:0] m_axi_gmem_in_ARSIZE;
output  [1:0] m_axi_gmem_in_ARBURST;
output  [1:0] m_axi_gmem_in_ARLOCK;
output  [3:0] m_axi_gmem_in_ARCACHE;
output  [2:0] m_axi_gmem_in_ARPROT;
output  [3:0] m_axi_gmem_in_ARQOS;
output  [3:0] m_axi_gmem_in_ARREGION;
output  [0:0] m_axi_gmem_in_ARUSER;
input   m_axi_gmem_in_RVALID;
output   m_axi_gmem_in_RREADY;
input  [31:0] m_axi_gmem_in_RDATA;
input   m_axi_gmem_in_RLAST;
input  [0:0] m_axi_gmem_in_RID;
input  [8:0] m_axi_gmem_in_RFIFONUM;
input  [0:0] m_axi_gmem_in_RUSER;
input  [1:0] m_axi_gmem_in_RRESP;
input   m_axi_gmem_in_BVALID;
output   m_axi_gmem_in_BREADY;
input  [1:0] m_axi_gmem_in_BRESP;
input  [0:0] m_axi_gmem_in_BID;
input  [0:0] m_axi_gmem_in_BUSER;
input  [63:0] input_ftmap;
input  [8:0] h0;
input  [7:0] w0;
input  [7:0] p_read;
output  [31:0] s_pix_i_din;
input  [10:0] s_pix_i_num_data_valid;
input  [10:0] s_pix_i_fifo_cap;
input   s_pix_i_full_n;
output   s_pix_i_write;
output  [7:0] tw_eff_loc_i_c2_din;
input  [1:0] tw_eff_loc_i_c2_num_data_valid;
input  [1:0] tw_eff_loc_i_c2_fifo_cap;
input   tw_eff_loc_i_c2_full_n;
output   tw_eff_loc_i_c2_write;
output  [7:0] w0_c4_din;
input  [2:0] w0_c4_num_data_valid;
input  [2:0] w0_c4_fifo_cap;
input   w0_c4_full_n;
output   w0_c4_write;
output  [8:0] h0_c6_din;
input  [1:0] h0_c6_num_data_valid;
input  [1:0] h0_c6_fifo_cap;
input   h0_c6_full_n;
output   h0_c6_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_in_ARVALID;
reg m_axi_gmem_in_RREADY;
reg s_pix_i_write;
reg tw_eff_loc_i_c2_write;
reg w0_c4_write;
reg h0_c6_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_in_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_in_blk_n_R;
wire    ap_CS_fsm_state12;
reg    s_pix_i_blk_n;
wire    ap_CS_fsm_state13;
reg    tw_eff_loc_i_c2_blk_n;
reg    w0_c4_blk_n;
reg    h0_c6_blk_n;
reg    ap_block_state1;
wire   [8:0] add_ln103_fu_244_p2;
reg   [8:0] add_ln103_reg_514;
wire  signed [9:0] add_ln104_fu_250_p2;
reg  signed [9:0] add_ln104_reg_519;
wire  signed [10:0] sext_ln104_fu_256_p1;
reg  signed [10:0] sext_ln104_reg_524;
wire  signed [10:0] sext_ln103_fu_266_p1;
reg  signed [10:0] sext_ln103_reg_529;
wire   [8:0] add_ln103_1_fu_274_p2;
reg   [8:0] add_ln103_1_reg_534;
wire  signed [9:0] sext_ln110_fu_280_p1;
reg  signed [9:0] sext_ln110_reg_539;
wire   [8:0] py_2_fu_301_p2;
reg   [8:0] py_2_reg_547;
wire    ap_CS_fsm_state2;
wire  signed [19:0] sext_ln109_fu_385_p1;
reg  signed [19:0] sext_ln109_reg_552;
wire   [0:0] icmp_ln103_fu_296_p2;
wire   [8:0] px_1_fu_398_p2;
reg   [8:0] px_1_reg_560;
wire    ap_CS_fsm_state3;
reg   [63:0] gmem_in_addr_reg_565;
wire   [0:0] icmp_ln109_fu_393_p2;
reg   [31:0] gmem_in_addr_read_reg_571;
reg   [8:0] px_reg_189;
wire  signed [63:0] sext_ln113_fu_488_p1;
reg   [8:0] py_fu_118;
wire   [8:0] add_ln962_fu_200_p2;
wire   [7:0] trunc_ln961_fu_214_p1;
wire   [0:0] tmp_fu_206_p3;
wire   [7:0] xor_ln962_fu_218_p2;
wire   [7:0] th_eff_fu_224_p3;
wire   [8:0] th_eff_cast_fu_240_p1;
wire   [9:0] h0_cast4_i_fu_236_p1;
wire   [8:0] w0_cast_fu_232_p1;
wire  signed [8:0] add_ln110_fu_260_p2;
wire   [8:0] p_read_cast_fu_270_p1;
wire   [10:0] zext_ln103_fu_292_p1;
wire   [9:0] zext_ln104_fu_307_p1;
wire   [10:0] iy_fu_311_p2;
wire   [0:0] tmp_5_fu_321_p3;
wire   [9:0] add_ln104_2_fu_316_p2;
wire   [9:0] iy_1_fu_329_p3;
wire   [0:0] icmp_ln106_fu_341_p2;
wire   [7:0] trunc_ln104_fu_337_p1;
wire   [7:0] iy_2_fu_347_p3;
wire   [17:0] shl_ln_fu_355_p3;
wire   [9:0] shl_ln113_1_fu_367_p3;
wire   [18:0] zext_ln113_fu_363_p1;
wire   [18:0] zext_ln113_1_fu_375_p1;
wire   [18:0] sub_ln113_fu_379_p2;
wire   [10:0] zext_ln109_fu_389_p1;
wire   [9:0] zext_ln110_fu_404_p1;
wire   [10:0] ix_fu_408_p2;
wire   [0:0] tmp_6_fu_418_p3;
wire   [9:0] add_ln110_2_fu_413_p2;
wire   [9:0] ix_1_fu_426_p3;
wire   [0:0] icmp_ln112_fu_434_p2;
wire   [7:0] trunc_ln113_fu_440_p1;
wire   [7:0] select_ln112_fu_444_p3;
wire   [9:0] shl_ln113_2_fu_452_p3;
wire   [19:0] zext_ln113_2_fu_460_p1;
wire   [19:0] add_ln113_fu_464_p2;
wire  signed [63:0] sext_ln113_1_fu_469_p1;
wire   [63:0] add_ln113_1_fu_473_p2;
wire   [61:0] trunc_ln7_fu_478_p4;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln103_fu_296_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (s_pix_i_full_n == 1'b1))) begin
        px_reg_189 <= px_1_reg_560;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln103_fu_296_p2 == 1'd0))) begin
        px_reg_189 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        py_fu_118 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln109_fu_393_p2 == 1'd1))) begin
        py_fu_118 <= py_2_reg_547;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln103_1_reg_534 <= add_ln103_1_fu_274_p2;
        add_ln103_reg_514 <= add_ln103_fu_244_p2;
        add_ln104_reg_519 <= add_ln104_fu_250_p2;
        sext_ln103_reg_529 <= sext_ln103_fu_266_p1;
        sext_ln104_reg_524 <= sext_ln104_fu_256_p1;
        sext_ln110_reg_539 <= sext_ln110_fu_280_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_in_addr_read_reg_571 <= m_axi_gmem_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln109_fu_393_p2 == 1'd0))) begin
        gmem_in_addr_reg_565 <= sext_ln113_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        px_1_reg_560 <= px_1_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        py_2_reg_547 <= py_2_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln103_fu_296_p2 == 1'd0))) begin
        sext_ln109_reg_552[19 : 2] <= sext_ln109_fu_385_p1[19 : 2];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_in_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((s_pix_i_full_n == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_in_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln103_fu_296_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln103_fu_296_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_in_blk_n_AR = m_axi_gmem_in_ARREADY;
    end else begin
        gmem_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_in_blk_n_R = m_axi_gmem_in_RVALID;
    end else begin
        gmem_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_c6_blk_n = h0_c6_full_n;
    end else begin
        h0_c6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_c6_write = 1'b1;
    end else begin
        h0_c6_write = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_in_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_in_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_in_RREADY = 1'b1;
    end else begin
        m_axi_gmem_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        s_pix_i_blk_n = s_pix_i_full_n;
    end else begin
        s_pix_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (s_pix_i_full_n == 1'b1))) begin
        s_pix_i_write = 1'b1;
    end else begin
        s_pix_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tw_eff_loc_i_c2_blk_n = tw_eff_loc_i_c2_full_n;
    end else begin
        tw_eff_loc_i_c2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tw_eff_loc_i_c2_write = 1'b1;
    end else begin
        tw_eff_loc_i_c2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_c4_blk_n = w0_c4_full_n;
    end else begin
        w0_c4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_c4_write = 1'b1;
    end else begin
        w0_c4_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln103_fu_296_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln109_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_in_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (s_pix_i_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_1_fu_274_p2 = (p_read_cast_fu_270_p1 + 9'd12);

assign add_ln103_fu_244_p2 = (th_eff_cast_fu_240_p1 + 9'd12);

assign add_ln104_2_fu_316_p2 = ($signed(add_ln104_reg_519) + $signed(zext_ln104_fu_307_p1));

assign add_ln104_fu_250_p2 = ($signed(h0_cast4_i_fu_236_p1) + $signed(10'd1018));

assign add_ln110_2_fu_413_p2 = ($signed(sext_ln110_reg_539) + $signed(zext_ln110_fu_404_p1));

assign add_ln110_fu_260_p2 = ($signed(w0_cast_fu_232_p1) + $signed(9'd506));

assign add_ln113_1_fu_473_p2 = ($signed(sext_ln113_1_fu_469_p1) + $signed(input_ftmap));

assign add_ln113_fu_464_p2 = ($signed(sext_ln109_reg_552) + $signed(zext_ln113_2_fu_460_p1));

assign add_ln962_fu_200_p2 = (h0 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c6_full_n == 1'b0) | (w0_c4_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0));
end

assign h0_c6_din = h0;

assign h0_cast4_i_fu_236_p1 = h0;

assign icmp_ln103_fu_296_p2 = ((py_fu_118 == add_ln103_reg_514) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_341_p2 = ((iy_1_fu_329_p3 > 10'd254) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_393_p2 = ((px_reg_189 == add_ln103_1_reg_534) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_434_p2 = ((ix_1_fu_426_p3 > 10'd254) ? 1'b1 : 1'b0);

assign ix_1_fu_426_p3 = ((tmp_6_fu_418_p3[0:0] == 1'b1) ? 10'd0 : add_ln110_2_fu_413_p2);

assign ix_fu_408_p2 = ($signed(sext_ln103_reg_529) + $signed(zext_ln109_fu_389_p1));

assign iy_1_fu_329_p3 = ((tmp_5_fu_321_p3[0:0] == 1'b1) ? 10'd0 : add_ln104_2_fu_316_p2);

assign iy_2_fu_347_p3 = ((icmp_ln106_fu_341_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln104_fu_337_p1);

assign iy_fu_311_p2 = ($signed(sext_ln104_reg_524) + $signed(zext_ln103_fu_292_p1));

assign m_axi_gmem_in_ARADDR = gmem_in_addr_reg_565;

assign m_axi_gmem_in_ARBURST = 2'd0;

assign m_axi_gmem_in_ARCACHE = 4'd0;

assign m_axi_gmem_in_ARID = 1'd0;

assign m_axi_gmem_in_ARLEN = 32'd1;

assign m_axi_gmem_in_ARLOCK = 2'd0;

assign m_axi_gmem_in_ARPROT = 3'd0;

assign m_axi_gmem_in_ARQOS = 4'd0;

assign m_axi_gmem_in_ARREGION = 4'd0;

assign m_axi_gmem_in_ARSIZE = 3'd0;

assign m_axi_gmem_in_ARUSER = 1'd0;

assign m_axi_gmem_in_AWADDR = 64'd0;

assign m_axi_gmem_in_AWBURST = 2'd0;

assign m_axi_gmem_in_AWCACHE = 4'd0;

assign m_axi_gmem_in_AWID = 1'd0;

assign m_axi_gmem_in_AWLEN = 32'd0;

assign m_axi_gmem_in_AWLOCK = 2'd0;

assign m_axi_gmem_in_AWPROT = 3'd0;

assign m_axi_gmem_in_AWQOS = 4'd0;

assign m_axi_gmem_in_AWREGION = 4'd0;

assign m_axi_gmem_in_AWSIZE = 3'd0;

assign m_axi_gmem_in_AWUSER = 1'd0;

assign m_axi_gmem_in_AWVALID = 1'b0;

assign m_axi_gmem_in_BREADY = 1'b0;

assign m_axi_gmem_in_WDATA = 32'd0;

assign m_axi_gmem_in_WID = 1'd0;

assign m_axi_gmem_in_WLAST = 1'b0;

assign m_axi_gmem_in_WSTRB = 4'd0;

assign m_axi_gmem_in_WUSER = 1'd0;

assign m_axi_gmem_in_WVALID = 1'b0;

assign p_read_cast_fu_270_p1 = p_read;

assign px_1_fu_398_p2 = (px_reg_189 + 9'd1);

assign py_2_fu_301_p2 = (py_fu_118 + 9'd1);

assign s_pix_i_din = gmem_in_addr_read_reg_571;

assign select_ln112_fu_444_p3 = ((icmp_ln112_fu_434_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln113_fu_440_p1);

assign sext_ln103_fu_266_p1 = add_ln110_fu_260_p2;

assign sext_ln104_fu_256_p1 = add_ln104_fu_250_p2;

assign sext_ln109_fu_385_p1 = $signed(sub_ln113_fu_379_p2);

assign sext_ln110_fu_280_p1 = add_ln110_fu_260_p2;

assign sext_ln113_1_fu_469_p1 = $signed(add_ln113_fu_464_p2);

assign sext_ln113_fu_488_p1 = $signed(trunc_ln7_fu_478_p4);

assign shl_ln113_1_fu_367_p3 = {{iy_2_fu_347_p3}, {2'd0}};

assign shl_ln113_2_fu_452_p3 = {{select_ln112_fu_444_p3}, {2'd0}};

assign shl_ln_fu_355_p3 = {{iy_2_fu_347_p3}, {10'd0}};

assign sub_ln113_fu_379_p2 = (zext_ln113_fu_363_p1 - zext_ln113_1_fu_375_p1);

assign th_eff_cast_fu_240_p1 = th_eff_fu_224_p3;

assign th_eff_fu_224_p3 = ((tmp_fu_206_p3[0:0] == 1'b1) ? xor_ln962_fu_218_p2 : 8'd16);

assign tmp_5_fu_321_p3 = iy_fu_311_p2[32'd10];

assign tmp_6_fu_418_p3 = ix_fu_408_p2[32'd10];

assign tmp_fu_206_p3 = add_ln962_fu_200_p2[32'd8];

assign trunc_ln104_fu_337_p1 = iy_1_fu_329_p3[7:0];

assign trunc_ln113_fu_440_p1 = ix_1_fu_426_p3[7:0];

assign trunc_ln7_fu_478_p4 = {{add_ln113_1_fu_473_p2[63:2]}};

assign trunc_ln961_fu_214_p1 = h0[7:0];

assign tw_eff_loc_i_c2_din = p_read;

assign w0_c4_din = w0;

assign w0_cast_fu_232_p1 = w0;

assign xor_ln962_fu_218_p2 = (trunc_ln961_fu_214_p1 ^ 8'd255);

assign zext_ln103_fu_292_p1 = py_fu_118;

assign zext_ln104_fu_307_p1 = py_fu_118;

assign zext_ln109_fu_389_p1 = px_reg_189;

assign zext_ln110_fu_404_p1 = px_reg_189;

assign zext_ln113_1_fu_375_p1 = shl_ln113_1_fu_367_p3;

assign zext_ln113_2_fu_460_p1 = shl_ln113_2_fu_452_p3;

assign zext_ln113_fu_363_p1 = shl_ln_fu_355_p3;

always @ (posedge ap_clk) begin
    sext_ln109_reg_552[1:0] <= 2'b00;
end

endmodule //srcnn_load_tile_to_stream3
