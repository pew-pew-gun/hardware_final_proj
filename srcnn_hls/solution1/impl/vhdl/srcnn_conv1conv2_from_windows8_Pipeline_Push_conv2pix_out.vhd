-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1conv2_from_windows8_Pipeline_Push_conv2pix_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_ce0 : OUT STD_LOGIC;
    acc2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outpix_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    outpix_ce0 : OUT STD_LOGIC;
    outpix_we0 : OUT STD_LOGIC;
    outpix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outpix_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    outpix_ce1 : OUT STD_LOGIC;
    outpix_we1 : OUT STD_LOGIC;
    outpix_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_1_ce0 : OUT STD_LOGIC;
    acc2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_2_ce0 : OUT STD_LOGIC;
    acc2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_3_ce0 : OUT STD_LOGIC;
    acc2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_4_ce0 : OUT STD_LOGIC;
    acc2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_5_ce0 : OUT STD_LOGIC;
    acc2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_6_ce0 : OUT STD_LOGIC;
    acc2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_7_ce0 : OUT STD_LOGIC;
    acc2_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5529_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5529_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5529_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_5529_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_5529_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_conv1conv2_from_windows8_Pipeline_Push_conv2pix_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal n2_1_reg_795 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal t2_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal t2_1_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_2_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_3_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_4_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_5_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_6_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal t2_7_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln384_fu_322_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln384_reg_901 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln384_1_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln384_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln387_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln387_1_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln387_2_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln387_3_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln387_4_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln387_5_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln387_6_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_76 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln384_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n2_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln388_fu_366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln388_1_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln388_2_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln388_3_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln388_4_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln388_5_fu_662_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln388_6_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln388_7_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1_fu_285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln388_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_328_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_fu_338_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_fu_374_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_1_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_1_fu_398_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_3_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_2_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_1_fu_434_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_2_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_2_fu_457_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_5_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_4_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_2_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_2_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_2_fu_493_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_3_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_3_fu_516_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_7_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_6_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_3_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_3_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_3_fu_552_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_4_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_4_fu_575_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_9_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_8_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_4_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_4_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_4_fu_611_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_5_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_624_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_5_fu_634_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_11_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_10_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_5_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_5_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_5_fu_670_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_6_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_683_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_6_fu_693_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_13_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_12_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_6_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_6_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln384_6_fu_729_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln388_7_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln388_7_fu_752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln388_15_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln388_14_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln388_7_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln388_7_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U559 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_263_p2);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    n2_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_277_p3 = ap_const_lv1_0))) then 
                    n2_fu_76 <= add_ln384_fu_307_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_76 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                n2_1_reg_795 <= ap_sig_allocacmp_n2_1;
                tmp_reg_801 <= ap_sig_allocacmp_n2_1(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                t2_1_reg_852 <= acc2_1_q0;
                t2_2_reg_859 <= acc2_2_q0;
                t2_3_reg_866 <= acc2_3_q0;
                t2_4_reg_873 <= acc2_4_q0;
                t2_5_reg_880 <= acc2_5_q0;
                t2_6_reg_887 <= acc2_6_q0;
                t2_7_reg_894 <= acc2_7_q0;
                t2_reg_845 <= acc2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln384_reg_901 <= trunc_ln384_fu_322_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc2_1_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_1_ce0 <= ap_const_logic_1;
        else 
            acc2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_2_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_2_ce0 <= ap_const_logic_1;
        else 
            acc2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_3_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_3_ce0 <= ap_const_logic_1;
        else 
            acc2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_4_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_4_ce0 <= ap_const_logic_1;
        else 
            acc2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_5_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_5_ce0 <= ap_const_logic_1;
        else 
            acc2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_6_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_6_ce0 <= ap_const_logic_1;
        else 
            acc2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_7_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_7_ce0 <= ap_const_logic_1;
        else 
            acc2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_address0 <= zext_ln384_1_fu_295_p1(2 - 1 downto 0);

    acc2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_ce0 <= ap_const_logic_1;
        else 
            acc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln384_fu_307_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2_1) + unsigned(ap_const_lv6_8));
    and_ln388_1_fu_420_p2 <= (or_ln388_1_fu_414_p2 and grp_fu_263_p2);
    and_ln388_2_fu_479_p2 <= (or_ln388_2_fu_473_p2 and grp_fu_5529_p_dout0);
    and_ln388_3_fu_538_p2 <= (or_ln388_3_fu_532_p2 and grp_fu_263_p2);
    and_ln388_4_fu_597_p2 <= (or_ln388_4_fu_591_p2 and grp_fu_5529_p_dout0);
    and_ln388_5_fu_656_p2 <= (or_ln388_5_fu_650_p2 and grp_fu_263_p2);
    and_ln388_6_fu_715_p2 <= (or_ln388_6_fu_709_p2 and grp_fu_5529_p_dout0);
    and_ln388_7_fu_774_p2 <= (or_ln388_7_fu_768_p2 and grp_fu_263_p2);
    and_ln388_fu_360_p2 <= (or_ln388_fu_354_p2 and grp_fu_5529_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_reg_801)
    begin
        if (((tmp_reg_801 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n2_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n2_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_n2_1 <= n2_fu_76;
        end if; 
    end process;

    bitcast_ln388_1_fu_385_p1 <= t2_1_reg_852;
    bitcast_ln388_2_fu_444_p1 <= t2_2_reg_859;
    bitcast_ln388_3_fu_503_p1 <= t2_3_reg_866;
    bitcast_ln388_4_fu_562_p1 <= t2_4_reg_873;
    bitcast_ln388_5_fu_621_p1 <= t2_5_reg_880;
    bitcast_ln388_6_fu_680_p1 <= t2_6_reg_887;
    bitcast_ln388_7_fu_739_p1 <= t2_7_reg_894;
    bitcast_ln388_fu_325_p1 <= t2_reg_845;

    grp_fu_257_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, acc2_q0, t2_2_reg_859, t2_4_reg_873, t2_6_reg_887, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_257_p0 <= t2_6_reg_887;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_257_p0 <= t2_4_reg_873;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_257_p0 <= t2_2_reg_859;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_257_p0 <= acc2_q0;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_263_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, acc2_1_q0, t2_3_reg_866, t2_5_reg_880, t2_7_reg_894, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_263_p0 <= t2_7_reg_894;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_263_p0 <= t2_5_reg_880;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_263_p0 <= t2_3_reg_866;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_263_p0 <= acc2_1_q0;
        else 
            grp_fu_263_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_5529_p_ce <= ap_const_logic_1;
    grp_fu_5529_p_din0 <= grp_fu_257_p0;
    grp_fu_5529_p_din1 <= ap_const_lv32_0;
    grp_fu_5529_p_opcode <= ap_const_lv5_2;
    icmp_ln388_10_fu_638_p2 <= "0" when (tmp_10_fu_624_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_11_fu_644_p2 <= "1" when (trunc_ln388_5_fu_634_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_12_fu_697_p2 <= "0" when (tmp_12_fu_683_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_13_fu_703_p2 <= "1" when (trunc_ln388_6_fu_693_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_14_fu_756_p2 <= "0" when (tmp_14_fu_742_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_15_fu_762_p2 <= "1" when (trunc_ln388_7_fu_752_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_1_fu_348_p2 <= "1" when (trunc_ln388_fu_338_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_2_fu_402_p2 <= "0" when (tmp_4_fu_388_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_3_fu_408_p2 <= "1" when (trunc_ln388_1_fu_398_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_4_fu_461_p2 <= "0" when (tmp_6_fu_447_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_5_fu_467_p2 <= "1" when (trunc_ln388_2_fu_457_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_6_fu_520_p2 <= "0" when (tmp_8_fu_506_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_7_fu_526_p2 <= "1" when (trunc_ln388_3_fu_516_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_8_fu_579_p2 <= "0" when (tmp_s_fu_565_p4 = ap_const_lv8_FF) else "1";
    icmp_ln388_9_fu_585_p2 <= "1" when (trunc_ln388_4_fu_575_p1 = ap_const_lv23_0) else "0";
    icmp_ln388_fu_342_p2 <= "0" when (tmp_2_fu_328_p4 = ap_const_lv8_FF) else "1";
    lshr_ln1_fu_285_p4 <= ap_sig_allocacmp_n2_1(4 downto 3);
    or_ln384_1_fu_434_p2 <= (trunc_ln384_reg_901 or ap_const_lv5_2);
    or_ln384_2_fu_493_p2 <= (trunc_ln384_reg_901 or ap_const_lv5_3);
    or_ln384_3_fu_552_p2 <= (trunc_ln384_reg_901 or ap_const_lv5_4);
    or_ln384_4_fu_611_p2 <= (trunc_ln384_reg_901 or ap_const_lv5_5);
    or_ln384_5_fu_670_p2 <= (trunc_ln384_reg_901 or ap_const_lv5_6);
    or_ln384_6_fu_729_p2 <= (trunc_ln384_reg_901 or ap_const_lv5_7);
    or_ln384_fu_374_p2 <= (trunc_ln384_fu_322_p1 or ap_const_lv5_1);
    or_ln388_1_fu_414_p2 <= (icmp_ln388_3_fu_408_p2 or icmp_ln388_2_fu_402_p2);
    or_ln388_2_fu_473_p2 <= (icmp_ln388_5_fu_467_p2 or icmp_ln388_4_fu_461_p2);
    or_ln388_3_fu_532_p2 <= (icmp_ln388_7_fu_526_p2 or icmp_ln388_6_fu_520_p2);
    or_ln388_4_fu_591_p2 <= (icmp_ln388_9_fu_585_p2 or icmp_ln388_8_fu_579_p2);
    or_ln388_5_fu_650_p2 <= (icmp_ln388_11_fu_644_p2 or icmp_ln388_10_fu_638_p2);
    or_ln388_6_fu_709_p2 <= (icmp_ln388_13_fu_703_p2 or icmp_ln388_12_fu_697_p2);
    or_ln388_7_fu_768_p2 <= (icmp_ln388_15_fu_762_p2 or icmp_ln388_14_fu_756_p2);
    or_ln388_fu_354_p2 <= (icmp_ln388_fu_342_p2 or icmp_ln388_1_fu_348_p2);

    outpix_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln387_fu_380_p1, ap_block_pp0_stage3, zext_ln387_2_fu_498_p1, zext_ln387_4_fu_616_p1, ap_block_pp0_stage1, zext_ln387_6_fu_734_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_address0 <= zext_ln387_6_fu_734_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_address0 <= zext_ln387_4_fu_616_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_address0 <= zext_ln387_2_fu_498_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_address0 <= zext_ln387_fu_380_p1(5 - 1 downto 0);
        else 
            outpix_address0 <= "XXXXX";
        end if; 
    end process;


    outpix_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln384_fu_318_p1, ap_block_pp0_stage2, zext_ln387_1_fu_439_p1, ap_block_pp0_stage3, zext_ln387_3_fu_557_p1, zext_ln387_5_fu_675_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_address1 <= zext_ln387_5_fu_675_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_address1 <= zext_ln387_3_fu_557_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_address1 <= zext_ln387_1_fu_439_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_address1 <= zext_ln384_fu_318_p1(5 - 1 downto 0);
        else 
            outpix_address1 <= "XXXXX";
        end if; 
    end process;


    outpix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_ce0 <= ap_const_logic_1;
        else 
            outpix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outpix_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_ce1 <= ap_const_logic_1;
        else 
            outpix_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outpix_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, select_ln388_1_fu_426_p3, select_ln388_3_fu_544_p3, select_ln388_5_fu_662_p3, select_ln388_7_fu_780_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_d0 <= select_ln388_7_fu_780_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_d0 <= select_ln388_5_fu_662_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_d0 <= select_ln388_3_fu_544_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_d0 <= select_ln388_1_fu_426_p3;
        else 
            outpix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outpix_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, select_ln388_fu_366_p3, select_ln388_2_fu_485_p3, select_ln388_4_fu_603_p3, select_ln388_6_fu_721_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_d1 <= select_ln388_6_fu_721_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_d1 <= select_ln388_4_fu_603_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_d1 <= select_ln388_2_fu_485_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_d1 <= select_ln388_fu_366_p3;
        else 
            outpix_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outpix_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp_reg_801, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((tmp_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_we0 <= ap_const_logic_1;
        else 
            outpix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outpix_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp_reg_801, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((tmp_reg_801 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_we1 <= ap_const_logic_1;
        else 
            outpix_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln388_1_fu_426_p3 <= 
        t2_1_reg_852 when (and_ln388_1_fu_420_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_2_fu_485_p3 <= 
        t2_2_reg_859 when (and_ln388_2_fu_479_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_3_fu_544_p3 <= 
        t2_3_reg_866 when (and_ln388_3_fu_538_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_4_fu_603_p3 <= 
        t2_4_reg_873 when (and_ln388_4_fu_597_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_5_fu_662_p3 <= 
        t2_5_reg_880 when (and_ln388_5_fu_656_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_6_fu_721_p3 <= 
        t2_6_reg_887 when (and_ln388_6_fu_715_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_7_fu_780_p3 <= 
        t2_7_reg_894 when (and_ln388_7_fu_774_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln388_fu_366_p3 <= 
        t2_reg_845 when (and_ln388_fu_360_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_10_fu_624_p4 <= bitcast_ln388_5_fu_621_p1(30 downto 23);
    tmp_12_fu_683_p4 <= bitcast_ln388_6_fu_680_p1(30 downto 23);
    tmp_14_fu_742_p4 <= bitcast_ln388_7_fu_739_p1(30 downto 23);
    tmp_2_fu_328_p4 <= bitcast_ln388_fu_325_p1(30 downto 23);
    tmp_4_fu_388_p4 <= bitcast_ln388_1_fu_385_p1(30 downto 23);
    tmp_6_fu_447_p4 <= bitcast_ln388_2_fu_444_p1(30 downto 23);
    tmp_8_fu_506_p4 <= bitcast_ln388_3_fu_503_p1(30 downto 23);
    tmp_fu_277_p3 <= ap_sig_allocacmp_n2_1(5 downto 5);
    tmp_s_fu_565_p4 <= bitcast_ln388_4_fu_562_p1(30 downto 23);
    trunc_ln384_fu_322_p1 <= n2_1_reg_795(5 - 1 downto 0);
    trunc_ln388_1_fu_398_p1 <= bitcast_ln388_1_fu_385_p1(23 - 1 downto 0);
    trunc_ln388_2_fu_457_p1 <= bitcast_ln388_2_fu_444_p1(23 - 1 downto 0);
    trunc_ln388_3_fu_516_p1 <= bitcast_ln388_3_fu_503_p1(23 - 1 downto 0);
    trunc_ln388_4_fu_575_p1 <= bitcast_ln388_4_fu_562_p1(23 - 1 downto 0);
    trunc_ln388_5_fu_634_p1 <= bitcast_ln388_5_fu_621_p1(23 - 1 downto 0);
    trunc_ln388_6_fu_693_p1 <= bitcast_ln388_6_fu_680_p1(23 - 1 downto 0);
    trunc_ln388_7_fu_752_p1 <= bitcast_ln388_7_fu_739_p1(23 - 1 downto 0);
    trunc_ln388_fu_338_p1 <= bitcast_ln388_fu_325_p1(23 - 1 downto 0);
    zext_ln384_1_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_285_p4),64));
    zext_ln384_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_1_reg_795),64));
    zext_ln387_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_1_fu_434_p2),64));
    zext_ln387_2_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_2_fu_493_p2),64));
    zext_ln387_3_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_3_fu_552_p2),64));
    zext_ln387_4_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_4_fu_611_p2),64));
    zext_ln387_5_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_5_fu_670_p2),64));
    zext_ln387_6_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_6_fu_729_p2),64));
    zext_ln387_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln384_fu_374_p2),64));
end behav;
