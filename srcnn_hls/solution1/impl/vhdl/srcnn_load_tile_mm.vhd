-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_tile_mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_in_AWREADY : IN STD_LOGIC;
    m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WVALID : OUT STD_LOGIC;
    m_axi_gmem_in_WREADY : IN STD_LOGIC;
    m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_WLAST : OUT STD_LOGIC;
    m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_in_ARREADY : IN STD_LOGIC;
    m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RVALID : IN STD_LOGIC;
    m_axi_gmem_in_RREADY : OUT STD_LOGIC;
    m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_RLAST : IN STD_LOGIC;
    m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BVALID : IN STD_LOGIC;
    m_axi_gmem_in_BREADY : OUT STD_LOGIC;
    m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    h0 : IN STD_LOGIC_VECTOR (8 downto 0);
    w0 : IN STD_LOGIC_VECTOR (7 downto 0);
    phase_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of srcnn_load_tile_mm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_60 : STD_LOGIC_VECTOR (8 downto 0) := "001100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_580 : STD_LOGIC_VECTOR (10 downto 0) := "10110000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1B0 : STD_LOGIC_VECTOR (10 downto 0) := "00110110000";
    constant ap_const_lv10_3FA : STD_LOGIC_VECTOR (9 downto 0) := "1111111010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal w0_cast2_fu_123_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal w0_cast2_reg_282 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln43_fu_191_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln43_reg_287 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln43_reg_297 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln60_fu_205_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln60_reg_312 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln60_2_fu_230_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_2_reg_317 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_fu_240_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_reg_322 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_idle : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_ready : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWVALID : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WVALID : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WLAST : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARVALID : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_RREADY : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_BREADY : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0 : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0 : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0 : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0 : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0 : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0 : STD_LOGIC;
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln540_fu_127_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln539_fu_141_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln540_fu_145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln543_fu_159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln543_fu_173_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_fu_179_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_cast_fu_187_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal th_eff_fu_151_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln60_1_fu_214_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln60_2_fu_222_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal h0_cast10_i_fu_237_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal grp_fu_263_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_load_tile_mm_Pipeline_InputTileHread_InputTileWread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_in_AWREADY : IN STD_LOGIC;
        m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_WVALID : OUT STD_LOGIC;
        m_axi_gmem_in_WREADY : IN STD_LOGIC;
        m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_WLAST : OUT STD_LOGIC;
        m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_in_ARREADY : IN STD_LOGIC;
        m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_RVALID : IN STD_LOGIC;
        m_axi_gmem_in_RREADY : OUT STD_LOGIC;
        m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_in_RLAST : IN STD_LOGIC;
        m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_BVALID : IN STD_LOGIC;
        m_axi_gmem_in_BREADY : OUT STD_LOGIC;
        m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        add_ln60_2 : IN STD_LOGIC_VECTOR (10 downto 0);
        sext_ln48 : IN STD_LOGIC_VECTOR (9 downto 0);
        add_ln48 : IN STD_LOGIC_VECTOR (9 downto 0);
        bound : IN STD_LOGIC_VECTOR (16 downto 0);
        add_ln43 : IN STD_LOGIC_VECTOR (8 downto 0);
        select_ln60 : IN STD_LOGIC_VECTOR (5 downto 0);
        w0_cast2 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0 : OUT STD_LOGIC;
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0 : OUT STD_LOGIC;
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0 : OUT STD_LOGIC;
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0 : OUT STD_LOGIC;
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0 : OUT STD_LOGIC;
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0 : OUT STD_LOGIC;
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_am_addmul_8ns_4ns_9ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102 : component srcnn_load_tile_mm_Pipeline_InputTileHread_InputTileWread
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start,
        ap_done => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done,
        ap_idle => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_idle,
        ap_ready => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_ready,
        m_axi_gmem_in_AWVALID => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY => ap_const_logic_0,
        m_axi_gmem_in_AWADDR => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY => ap_const_logic_0,
        m_axi_gmem_in_WDATA => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY => m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID => m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA => m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST => m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID => m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM => m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER => m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP => m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID => ap_const_logic_0,
        m_axi_gmem_in_BREADY => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP => ap_const_lv2_0,
        m_axi_gmem_in_BID => ap_const_lv1_0,
        m_axi_gmem_in_BUSER => ap_const_lv1_0,
        add_ln60_2 => add_ln60_2_reg_317,
        sext_ln48 => add_ln48_reg_322,
        add_ln48 => add_ln48_reg_322,
        bound => mul_ln43_reg_297,
        add_ln43 => add_ln43_reg_287,
        select_ln60 => select_ln60_reg_312,
        w0_cast2 => w0,
        input_ftmap => input_ftmap,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0 => grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0);

    am_addmul_8ns_4ns_9ns_17_4_1_U453 : component srcnn_am_addmul_8ns_4ns_9ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        din2 => grp_fu_263_p2,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv9_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
                    ap_return_0_preg <= h0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
                ap_return_1_preg(6) <= '0';
                ap_return_1_preg(7) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
                                        ap_return_1_preg(7 downto 0) <= w0_cast2_reg_282(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
                    ap_return_2_preg <= phase_1;
                end if; 
            end if;
        end if;
    end process;


    grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln43_reg_287 <= add_ln43_fu_191_p2;
                    w0_cast2_reg_282(7 downto 0) <= w0_cast2_fu_123_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln48_reg_322 <= add_ln48_fu_240_p2;
                    add_ln60_2_reg_317(10 downto 4) <= add_ln60_2_fu_230_p2(10 downto 4);
                    select_ln60_reg_312(3 downto 2) <= select_ln60_fu_205_p3(3 downto 2);    select_ln60_reg_312(5) <= select_ln60_fu_205_p3(5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln43_reg_297 <= grp_fu_263_p3;
            end if;
        end if;
    end process;
    w0_cast2_reg_282(8) <= '0';
    select_ln60_reg_312(1 downto 0) <= "00";
    select_ln60_reg_312(4) <= '0';
    add_ln60_2_reg_317(3 downto 0) <= "0000";
    ap_return_1_preg(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln43_fu_191_p2 <= std_logic_vector(unsigned(tw_eff_cast_fu_187_p1) + unsigned(ap_const_lv9_C));
    add_ln48_fu_240_p2 <= std_logic_vector(unsigned(h0_cast10_i_fu_237_p1) + unsigned(ap_const_lv10_3FA));
    add_ln540_fu_127_p2 <= std_logic_vector(unsigned(h0) + unsigned(ap_const_lv9_60));
    add_ln543_fu_159_p2 <= std_logic_vector(unsigned(w0_cast2_fu_123_p1) + unsigned(ap_const_lv9_60));
    add_ln60_2_fu_230_p2 <= std_logic_vector(unsigned(select_ln60_1_fu_214_p3) + unsigned(select_ln60_2_fu_222_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done)
    begin
        if ((grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(h0, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done, ap_CS_fsm_state6, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
            ap_return_0 <= h0;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(w0_cast2_reg_282, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done, ap_CS_fsm_state6, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
            ap_return_1 <= w0_cast2_reg_282;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(phase_1, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done, ap_CS_fsm_state6, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_done = ap_const_logic_1))) then 
            ap_return_2 <= phase_1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    grp_fu_263_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_263_ce <= ap_const_logic_0;
        else 
            grp_fu_263_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_263_p0 <= grp_fu_263_p00(8 - 1 downto 0);
    grp_fu_263_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_eff_fu_151_p3),9));
    grp_fu_263_p1 <= ap_const_lv9_C(4 - 1 downto 0);
    grp_fu_263_p2 <= grp_fu_263_p20(9 - 1 downto 0);
    grp_fu_263_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_191_p2),17));
    grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_ap_start_reg;
    h0_cast10_i_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h0),10));
    m_axi_gmem_in_ARADDR <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARADDR;
    m_axi_gmem_in_ARBURST <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARBURST;
    m_axi_gmem_in_ARCACHE <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARCACHE;
    m_axi_gmem_in_ARID <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARID;
    m_axi_gmem_in_ARLEN <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARLEN;
    m_axi_gmem_in_ARLOCK <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARLOCK;
    m_axi_gmem_in_ARPROT <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARPROT;
    m_axi_gmem_in_ARQOS <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARQOS;
    m_axi_gmem_in_ARREGION <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARREGION;
    m_axi_gmem_in_ARSIZE <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARSIZE;
    m_axi_gmem_in_ARUSER <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARUSER;

    m_axi_gmem_in_ARVALID_assign_proc : process(ap_CS_fsm_state5, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARVALID, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_in_ARVALID <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_ARVALID;
        else 
            m_axi_gmem_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_in_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_in_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_AWID <= ap_const_lv1_0;
    m_axi_gmem_in_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_in_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_in_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_in_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_in_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_in_AWVALID <= ap_const_logic_0;
    m_axi_gmem_in_BREADY <= ap_const_logic_0;

    m_axi_gmem_in_RREADY_assign_proc : process(ap_CS_fsm_state5, grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_RREADY, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_in_RREADY <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_m_axi_gmem_in_RREADY;
        else 
            m_axi_gmem_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_WDATA <= ap_const_lv32_0;
    m_axi_gmem_in_WID <= ap_const_lv1_0;
    m_axi_gmem_in_WLAST <= ap_const_logic_0;
    m_axi_gmem_in_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_in_WUSER <= ap_const_lv1_0;
    m_axi_gmem_in_WVALID <= ap_const_logic_0;
    select_ln60_1_fu_214_p3 <= 
        ap_const_lv11_580 when (phase_1(0) = '1') else 
        ap_const_lv11_0;
    select_ln60_2_fu_222_p3 <= 
        ap_const_lv11_1B0 when (phase_1(0) = '1') else 
        ap_const_lv11_0;
    select_ln60_fu_205_p3 <= 
        ap_const_lv6_2C when (phase_1(0) = '1') else 
        ap_const_lv6_0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_address0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_ce0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_d0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43_we0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_address0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_ce0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_d0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44_we0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_address0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_ce0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_d0;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0 <= grp_load_tile_mm_Pipeline_InputTileHread_InputTileWread_fu_102_srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45_we0;
    th_eff_fu_151_p3 <= 
        xor_ln540_fu_145_p2 when (tmp_fu_133_p3(0) = '1') else 
        ap_const_lv8_60;
    tmp_7_fu_165_p3 <= add_ln543_fu_159_p2(8 downto 8);
    tmp_fu_133_p3 <= add_ln540_fu_127_p2(8 downto 8);
    trunc_ln539_fu_141_p1 <= h0(8 - 1 downto 0);
    tw_eff_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_eff_fu_179_p3),9));
    tw_eff_fu_179_p3 <= 
        xor_ln543_fu_173_p2 when (tmp_7_fu_165_p3(0) = '1') else 
        ap_const_lv8_60;
    w0_cast2_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0),9));
    xor_ln540_fu_145_p2 <= (trunc_ln539_fu_141_p1 xor ap_const_lv8_FF);
    xor_ln543_fu_173_p2 <= (w0 xor ap_const_lv8_FF);
end behav;
