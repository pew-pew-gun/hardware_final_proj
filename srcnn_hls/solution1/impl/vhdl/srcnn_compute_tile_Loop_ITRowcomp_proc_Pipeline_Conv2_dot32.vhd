-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_compute_tile_Loop_ITRowcomp_proc_Pipeline_Conv2_dot32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln130 : IN STD_LOGIC_VECTOR (5 downto 0);
    acc2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_7_ce0 : OUT STD_LOGIC;
    acc2_7_we0 : OUT STD_LOGIC;
    acc2_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_7_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_7_ce1 : OUT STD_LOGIC;
    acc2_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_6_ce0 : OUT STD_LOGIC;
    acc2_6_we0 : OUT STD_LOGIC;
    acc2_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_6_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_6_ce1 : OUT STD_LOGIC;
    acc2_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_5_ce0 : OUT STD_LOGIC;
    acc2_5_we0 : OUT STD_LOGIC;
    acc2_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_5_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_5_ce1 : OUT STD_LOGIC;
    acc2_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_4_ce0 : OUT STD_LOGIC;
    acc2_4_we0 : OUT STD_LOGIC;
    acc2_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_4_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_4_ce1 : OUT STD_LOGIC;
    acc2_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_3_ce0 : OUT STD_LOGIC;
    acc2_3_we0 : OUT STD_LOGIC;
    acc2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_3_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_3_ce1 : OUT STD_LOGIC;
    acc2_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_2_ce0 : OUT STD_LOGIC;
    acc2_2_we0 : OUT STD_LOGIC;
    acc2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_2_ce1 : OUT STD_LOGIC;
    acc2_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_1_ce0 : OUT STD_LOGIC;
    acc2_1_we0 : OUT STD_LOGIC;
    acc2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_1_ce1 : OUT STD_LOGIC;
    acc2_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_ce0 : OUT STD_LOGIC;
    acc2_we0 : OUT STD_LOGIC;
    acc2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_ce1 : OUT STD_LOGIC;
    acc2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3180_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3180_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3180_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_3180_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3180_p_ce : OUT STD_LOGIC;
    grp_fu_5700_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5700_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5700_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5700_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5700_p_ce : OUT STD_LOGIC;
    grp_fu_5704_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5704_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5704_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5704_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5704_p_ce : OUT STD_LOGIC;
    grp_fu_5720_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5720_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5720_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5720_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5720_p_ce : OUT STD_LOGIC;
    grp_fu_5724_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5724_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5724_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5724_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5724_p_ce : OUT STD_LOGIC;
    grp_fu_5728_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5728_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5728_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5728_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5728_p_ce : OUT STD_LOGIC;
    grp_fu_5732_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5732_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5732_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5732_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5732_p_ce : OUT STD_LOGIC;
    grp_fu_5736_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5736_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5736_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_5736_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5736_p_ce : OUT STD_LOGIC;
    grp_fu_5708_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5708_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5708_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5708_p_ce : OUT STD_LOGIC;
    grp_fu_5712_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5712_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5712_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5712_p_ce : OUT STD_LOGIC;
    grp_fu_5716_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5716_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5716_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5716_p_ce : OUT STD_LOGIC;
    grp_fu_5740_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5740_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5740_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5740_p_ce : OUT STD_LOGIC;
    grp_fu_5744_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5744_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5744_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5744_p_ce : OUT STD_LOGIC;
    grp_fu_5748_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5748_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5748_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5748_p_ce : OUT STD_LOGIC;
    grp_fu_5752_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5752_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5752_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5752_p_ce : OUT STD_LOGIC;
    grp_fu_5756_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5756_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5756_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5756_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_compute_tile_Loop_ITRowcomp_proc_Pipeline_Conv2_dot32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lshr_ln4_fu_436_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln4_reg_511 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln4_reg_511_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln4_reg_511_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln4_reg_511_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_57_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_58_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_59_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_60_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_61_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_62_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_63_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_64_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_i_i_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_addr_reg_601 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_addr_reg_601_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_addr_reg_601_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_addr_reg_601_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_1_addr_reg_607 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_1_addr_reg_607_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_1_addr_reg_607_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_1_addr_reg_607_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_2_addr_reg_613 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_2_addr_reg_613_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_2_addr_reg_613_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_2_addr_reg_613_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_3_addr_reg_619 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_3_addr_reg_619_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_3_addr_reg_619_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_3_addr_reg_619_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_4_addr_reg_625 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_4_addr_reg_625_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_4_addr_reg_625_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_4_addr_reg_625_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_5_addr_reg_631 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_5_addr_reg_631_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_5_addr_reg_631_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_5_addr_reg_631_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_6_addr_reg_637 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_6_addr_reg_637_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_6_addr_reg_637_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_6_addr_reg_637_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mul83_1_i_i_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul83_2_i_i_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul83_3_i_i_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul83_4_i_i_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul83_5_i_i_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul83_6_i_i_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul83_7_i_i_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_7_addr_reg_678 : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_7_addr_reg_678_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_7_addr_reg_678_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal acc2_7_addr_reg_678_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln185_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln182_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_84 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln182_fu_466_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n2_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln_fu_446_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    n2_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_428_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n2_fu_84 <= add_ln182_fu_466_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_84 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                acc2_1_addr_reg_607 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_1_addr_reg_607_pp0_iter5_reg <= acc2_1_addr_reg_607;
                acc2_1_addr_reg_607_pp0_iter6_reg <= acc2_1_addr_reg_607_pp0_iter5_reg;
                acc2_1_addr_reg_607_pp0_iter7_reg <= acc2_1_addr_reg_607_pp0_iter6_reg;
                acc2_2_addr_reg_613 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_2_addr_reg_613_pp0_iter5_reg <= acc2_2_addr_reg_613;
                acc2_2_addr_reg_613_pp0_iter6_reg <= acc2_2_addr_reg_613_pp0_iter5_reg;
                acc2_2_addr_reg_613_pp0_iter7_reg <= acc2_2_addr_reg_613_pp0_iter6_reg;
                acc2_3_addr_reg_619 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_3_addr_reg_619_pp0_iter5_reg <= acc2_3_addr_reg_619;
                acc2_3_addr_reg_619_pp0_iter6_reg <= acc2_3_addr_reg_619_pp0_iter5_reg;
                acc2_3_addr_reg_619_pp0_iter7_reg <= acc2_3_addr_reg_619_pp0_iter6_reg;
                acc2_4_addr_reg_625 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_4_addr_reg_625_pp0_iter5_reg <= acc2_4_addr_reg_625;
                acc2_4_addr_reg_625_pp0_iter6_reg <= acc2_4_addr_reg_625_pp0_iter5_reg;
                acc2_4_addr_reg_625_pp0_iter7_reg <= acc2_4_addr_reg_625_pp0_iter6_reg;
                acc2_5_addr_reg_631 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_5_addr_reg_631_pp0_iter5_reg <= acc2_5_addr_reg_631;
                acc2_5_addr_reg_631_pp0_iter6_reg <= acc2_5_addr_reg_631_pp0_iter5_reg;
                acc2_5_addr_reg_631_pp0_iter7_reg <= acc2_5_addr_reg_631_pp0_iter6_reg;
                acc2_6_addr_reg_637 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_6_addr_reg_637_pp0_iter5_reg <= acc2_6_addr_reg_637;
                acc2_6_addr_reg_637_pp0_iter6_reg <= acc2_6_addr_reg_637_pp0_iter5_reg;
                acc2_6_addr_reg_637_pp0_iter7_reg <= acc2_6_addr_reg_637_pp0_iter6_reg;
                acc2_7_addr_reg_678 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_7_addr_reg_678_pp0_iter5_reg <= acc2_7_addr_reg_678;
                acc2_7_addr_reg_678_pp0_iter6_reg <= acc2_7_addr_reg_678_pp0_iter5_reg;
                acc2_7_addr_reg_678_pp0_iter7_reg <= acc2_7_addr_reg_678_pp0_iter6_reg;
                acc2_addr_reg_601 <= zext_ln182_fu_477_p1(2 - 1 downto 0);
                acc2_addr_reg_601_pp0_iter5_reg <= acc2_addr_reg_601;
                acc2_addr_reg_601_pp0_iter6_reg <= acc2_addr_reg_601_pp0_iter5_reg;
                acc2_addr_reg_601_pp0_iter7_reg <= acc2_addr_reg_601_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                lshr_ln4_reg_511_pp0_iter2_reg <= lshr_ln4_reg_511_pp0_iter1_reg;
                lshr_ln4_reg_511_pp0_iter3_reg <= lshr_ln4_reg_511_pp0_iter2_reg;
                mul1_i_i_reg_596 <= grp_fu_5708_p_dout0;
                mul83_1_i_i_reg_643 <= grp_fu_5712_p_dout0;
                mul83_2_i_i_reg_648 <= grp_fu_5716_p_dout0;
                mul83_3_i_i_reg_653 <= grp_fu_5740_p_dout0;
                mul83_4_i_i_reg_658 <= grp_fu_5744_p_dout0;
                mul83_5_i_i_reg_663 <= grp_fu_5748_p_dout0;
                mul83_6_i_i_reg_668 <= grp_fu_5752_p_dout0;
                mul83_7_i_i_reg_673 <= grp_fu_5756_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                lshr_ln4_reg_511_pp0_iter1_reg <= lshr_ln4_reg_511;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_57_reg_556 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_58_reg_561 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_59_reg_566 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_60_reg_571 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_61_reg_576 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_62_reg_581 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_63_reg_586 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_q0;
                srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_64_reg_591 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_428_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln4_reg_511 <= ap_sig_allocacmp_n2_4(4 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc2_1_address0 <= acc2_1_addr_reg_607_pp0_iter7_reg;
    acc2_1_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_1_ce0 <= ap_const_logic_1;
        else 
            acc2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_1_ce1 <= ap_const_logic_1;
        else 
            acc2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_1_d0 <= grp_fu_5700_p_dout0;

    acc2_1_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_1_we0 <= ap_const_logic_1;
        else 
            acc2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_2_address0 <= acc2_2_addr_reg_613_pp0_iter7_reg;
    acc2_2_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_2_ce0 <= ap_const_logic_1;
        else 
            acc2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_2_ce1 <= ap_const_logic_1;
        else 
            acc2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_2_d0 <= grp_fu_5704_p_dout0;

    acc2_2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_2_we0 <= ap_const_logic_1;
        else 
            acc2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_3_address0 <= acc2_3_addr_reg_619_pp0_iter7_reg;
    acc2_3_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_3_ce0 <= ap_const_logic_1;
        else 
            acc2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_3_ce1 <= ap_const_logic_1;
        else 
            acc2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_3_d0 <= grp_fu_5720_p_dout0;

    acc2_3_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_3_we0 <= ap_const_logic_1;
        else 
            acc2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_4_address0 <= acc2_4_addr_reg_625_pp0_iter7_reg;
    acc2_4_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_4_ce0 <= ap_const_logic_1;
        else 
            acc2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_4_ce1 <= ap_const_logic_1;
        else 
            acc2_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_4_d0 <= grp_fu_5724_p_dout0;

    acc2_4_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_4_we0 <= ap_const_logic_1;
        else 
            acc2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_5_address0 <= acc2_5_addr_reg_631_pp0_iter7_reg;
    acc2_5_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_5_ce0 <= ap_const_logic_1;
        else 
            acc2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_5_ce1 <= ap_const_logic_1;
        else 
            acc2_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_5_d0 <= grp_fu_5728_p_dout0;

    acc2_5_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_5_we0 <= ap_const_logic_1;
        else 
            acc2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_6_address0 <= acc2_6_addr_reg_637_pp0_iter7_reg;
    acc2_6_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_6_ce0 <= ap_const_logic_1;
        else 
            acc2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_6_ce1 <= ap_const_logic_1;
        else 
            acc2_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_6_d0 <= grp_fu_5732_p_dout0;

    acc2_6_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_6_we0 <= ap_const_logic_1;
        else 
            acc2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_7_address0 <= acc2_7_addr_reg_678_pp0_iter7_reg;
    acc2_7_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_7_ce0 <= ap_const_logic_1;
        else 
            acc2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_7_ce1 <= ap_const_logic_1;
        else 
            acc2_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_7_d0 <= grp_fu_5736_p_dout0;

    acc2_7_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_7_we0 <= ap_const_logic_1;
        else 
            acc2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_address0 <= acc2_addr_reg_601_pp0_iter7_reg;
    acc2_address1 <= zext_ln182_fu_477_p1(2 - 1 downto 0);

    acc2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_ce0 <= ap_const_logic_1;
        else 
            acc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc2_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            acc2_ce1 <= ap_const_logic_1;
        else 
            acc2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_d0 <= grp_fu_3180_p_dout0;

    acc2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            acc2_we0 <= ap_const_logic_1;
        else 
            acc2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln182_fu_466_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2_4) + unsigned(ap_const_lv6_8));
    add_ln_fu_446_p3 <= (lshr_ln4_fu_436_p4 & zext_ln130);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_428_p3)
    begin
        if (((tmp_fu_428_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n2_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n2_4 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_n2_4 <= n2_fu_84;
        end if; 
    end process;

    grp_fu_3180_p_ce <= ap_const_logic_1;
    grp_fu_3180_p_din0 <= acc2_q1;
    grp_fu_3180_p_din1 <= mul1_i_i_reg_596;
    grp_fu_3180_p_opcode <= ap_const_lv2_0;
    grp_fu_5700_p_ce <= ap_const_logic_1;
    grp_fu_5700_p_din0 <= acc2_1_q1;
    grp_fu_5700_p_din1 <= mul83_1_i_i_reg_643;
    grp_fu_5700_p_opcode <= ap_const_lv2_0;
    grp_fu_5704_p_ce <= ap_const_logic_1;
    grp_fu_5704_p_din0 <= acc2_2_q1;
    grp_fu_5704_p_din1 <= mul83_2_i_i_reg_648;
    grp_fu_5704_p_opcode <= ap_const_lv2_0;
    grp_fu_5708_p_ce <= ap_const_logic_1;
    grp_fu_5708_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_57_reg_556;
    grp_fu_5708_p_din1 <= acc1_1;
    grp_fu_5712_p_ce <= ap_const_logic_1;
    grp_fu_5712_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_58_reg_561;
    grp_fu_5712_p_din1 <= acc1_1;
    grp_fu_5716_p_ce <= ap_const_logic_1;
    grp_fu_5716_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_59_reg_566;
    grp_fu_5716_p_din1 <= acc1_1;
    grp_fu_5720_p_ce <= ap_const_logic_1;
    grp_fu_5720_p_din0 <= acc2_3_q1;
    grp_fu_5720_p_din1 <= mul83_3_i_i_reg_653;
    grp_fu_5720_p_opcode <= ap_const_lv2_0;
    grp_fu_5724_p_ce <= ap_const_logic_1;
    grp_fu_5724_p_din0 <= acc2_4_q1;
    grp_fu_5724_p_din1 <= mul83_4_i_i_reg_658;
    grp_fu_5724_p_opcode <= ap_const_lv2_0;
    grp_fu_5728_p_ce <= ap_const_logic_1;
    grp_fu_5728_p_din0 <= acc2_5_q1;
    grp_fu_5728_p_din1 <= mul83_5_i_i_reg_663;
    grp_fu_5728_p_opcode <= ap_const_lv2_0;
    grp_fu_5732_p_ce <= ap_const_logic_1;
    grp_fu_5732_p_din0 <= acc2_6_q1;
    grp_fu_5732_p_din1 <= mul83_6_i_i_reg_668;
    grp_fu_5732_p_opcode <= ap_const_lv2_0;
    grp_fu_5736_p_ce <= ap_const_logic_1;
    grp_fu_5736_p_din0 <= acc2_7_q1;
    grp_fu_5736_p_din1 <= mul83_7_i_i_reg_673;
    grp_fu_5736_p_opcode <= ap_const_lv2_0;
    grp_fu_5740_p_ce <= ap_const_logic_1;
    grp_fu_5740_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_60_reg_571;
    grp_fu_5740_p_din1 <= acc1_1;
    grp_fu_5744_p_ce <= ap_const_logic_1;
    grp_fu_5744_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_61_reg_576;
    grp_fu_5744_p_din1 <= acc1_1;
    grp_fu_5748_p_ce <= ap_const_logic_1;
    grp_fu_5748_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_62_reg_581;
    grp_fu_5748_p_din1 <= acc1_1;
    grp_fu_5752_p_ce <= ap_const_logic_1;
    grp_fu_5752_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_63_reg_586;
    grp_fu_5752_p_din1 <= acc1_1;
    grp_fu_5756_p_ce <= ap_const_logic_1;
    grp_fu_5756_p_din0 <= srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_64_reg_591;
    grp_fu_5756_p_din1 <= acc1_1;
    lshr_ln4_fu_436_p4 <= ap_sig_allocacmp_n2_4(4 downto 3);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 <= zext_ln185_fu_454_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_428_p3 <= ap_sig_allocacmp_n2_4(5 downto 5);
    zext_ln182_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_reg_511_pp0_iter3_reg),64));
    zext_ln185_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_446_p3),64));
end behav;
