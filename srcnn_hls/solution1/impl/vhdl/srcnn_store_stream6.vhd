-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_store_stream6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_out_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_out_i_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    s_out_i_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    s_out_i_empty_n : IN STD_LOGIC;
    s_out_i_read : OUT STD_LOGIC;
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    output_ftmap_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    output_ftmap_empty_n : IN STD_LOGIC;
    output_ftmap_read : OUT STD_LOGIC;
    h0_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    h0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_empty_n : IN STD_LOGIC;
    h0_read : OUT STD_LOGIC;
    w0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    w0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    w0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    w0_empty_n : IN STD_LOGIC;
    w0_read : OUT STD_LOGIC;
    tw_eff_loc_i_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    tw_eff_loc_i_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    tw_eff_loc_i_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    tw_eff_loc_i_empty_n : IN STD_LOGIC;
    tw_eff_loc_i_read : OUT STD_LOGIC );
end;


architecture behav of srcnn_store_stream6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_out_i_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln735_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_out_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_out_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_ftmap_blk_n : STD_LOGIC;
    signal h0_blk_n : STD_LOGIC;
    signal w0_blk_n : STD_LOGIC;
    signal tw_eff_loc_i_blk_n : STD_LOGIC;
    signal out_reg_330 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tw_eff_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_fu_184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln733_fu_192_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln733_reg_345 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln733_1_fu_204_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln733_1_reg_350 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln733_2_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln733_2_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln733_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln733_reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_out_addr_reg_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln733_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln735_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln735_reg_377 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal s_out_i_read_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln735_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln978_fu_160_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln977_fu_174_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_166_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln978_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_196_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln733_3_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_235_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_fu_240_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl1_i_fu_252_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast7_i_fu_248_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl1_cast8_i_fu_260_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_87_fu_264_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_cast_fu_270_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_274_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_cast_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_88_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_288_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln733_fu_224_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    x_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_149 <= ap_const_lv8_0;
            elsif (((m_axi_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_reg_149 <= add_ln735_reg_377;
            end if; 
        end if;
    end process;

    y_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_100 <= ap_const_lv8_0;
            elsif ((not(((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln735_fu_308_p2 = ap_const_lv1_1))) then 
                y_fu_100 <= add_ln733_reg_363;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln733_reg_363 <= add_ln733_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln735_reg_377 <= add_ln735_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln733_fu_224_p2 = ap_const_lv1_0))) then
                gmem_out_addr_reg_368 <= sext_ln735_fu_298_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                out_reg_330 <= output_ftmap_dout;
                th_eff_reg_340 <= th_eff_fu_184_p3;
                tw_eff_reg_335 <= tw_eff_loc_i_dout;
                    zext_ln733_1_reg_350(9 downto 2) <= zext_ln733_1_fu_204_p1(9 downto 2);
                    zext_ln733_2_reg_355(7 downto 0) <= zext_ln733_2_fu_208_p1(7 downto 0);
                    zext_ln733_reg_345(8 downto 0) <= zext_ln733_fu_192_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) then
                s_out_i_read_reg_382 <= s_out_i_dout;
            end if;
        end if;
    end process;
    zext_ln733_reg_345(9) <= '0';
    zext_ln733_1_reg_350(1 downto 0) <= "00";
    zext_ln733_1_reg_350(21 downto 10) <= "000000000000";
    zext_ln733_2_reg_355(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, s_out_i_empty_n, m_axi_gmem_out_AWREADY, m_axi_gmem_out_WREADY, m_axi_gmem_out_BVALID, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n, ap_CS_fsm_state4, icmp_ln735_fu_308_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln733_fu_224_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln733_fu_224_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln735_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_gmem_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln733_fu_229_p2 <= std_logic_vector(unsigned(y_fu_100) + unsigned(ap_const_lv8_1));
    add_ln735_fu_313_p2 <= std_logic_vector(unsigned(x_reg_149) + unsigned(ap_const_lv8_1));
    add_ln978_fu_160_p2 <= std_logic_vector(unsigned(h0_dout) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_gmem_out_BVALID)
    begin
        if ((m_axi_gmem_out_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n)
    begin
        if (((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem_out_AWREADY)
    begin
        if ((m_axi_gmem_out_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(s_out_i_empty_n, icmp_ln735_fu_308_p2)
    begin
        if (((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem_out_WREADY)
    begin
        if ((m_axi_gmem_out_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n)
    begin
                ap_block_state1 <= ((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(s_out_i_empty_n, icmp_ln735_fu_308_p2)
    begin
                ap_block_state4 <= ((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln733_fu_224_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln733_fu_224_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln733_fu_224_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln733_fu_224_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_87_fu_264_p2 <= std_logic_vector(unsigned(p_shl_cast7_i_fu_248_p1) - unsigned(p_shl1_cast8_i_fu_260_p1));
    empty_88_fu_283_p2 <= std_logic_vector(signed(tmp_cast_fu_279_p1) + signed(out_reg_330));
    empty_fu_235_p2 <= std_logic_vector(unsigned(zext_ln733_reg_345) + unsigned(zext_ln733_3_fu_220_p1));

    gmem_out_blk_n_AW_assign_proc : process(m_axi_gmem_out_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_out_blk_n_AW <= m_axi_gmem_out_AWREADY;
        else 
            gmem_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_B_assign_proc : process(m_axi_gmem_out_BVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem_out_blk_n_B <= m_axi_gmem_out_BVALID;
        else 
            gmem_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_W_assign_proc : process(m_axi_gmem_out_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem_out_blk_n_W <= m_axi_gmem_out_WREADY;
        else 
            gmem_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    h0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_blk_n <= h0_empty_n;
        else 
            h0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    h0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n)
    begin
        if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_read <= ap_const_logic_1;
        else 
            h0_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln733_fu_224_p2 <= "1" when (y_fu_100 = th_eff_reg_340) else "0";
    icmp_ln735_fu_308_p2 <= "1" when (x_reg_149 = tw_eff_reg_335) else "0";
    m_axi_gmem_out_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_out_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_out_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_out_ARID <= ap_const_lv1_0;
    m_axi_gmem_out_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_out_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_out_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_out_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_out_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_out_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_out_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_out_ARVALID <= ap_const_logic_0;
    m_axi_gmem_out_AWADDR <= gmem_out_addr_reg_368;
    m_axi_gmem_out_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_out_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_out_AWID <= ap_const_lv1_0;
    m_axi_gmem_out_AWLEN <= zext_ln733_2_reg_355;
    m_axi_gmem_out_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_out_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_out_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_out_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_out_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_out_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_out_AWVALID_assign_proc : process(m_axi_gmem_out_AWREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_out_BREADY_assign_proc : process(m_axi_gmem_out_BVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_gmem_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_out_RREADY <= ap_const_logic_0;
    m_axi_gmem_out_WDATA <= s_out_i_read_reg_382;
    m_axi_gmem_out_WID <= ap_const_lv1_0;
    m_axi_gmem_out_WLAST <= ap_const_logic_0;
    m_axi_gmem_out_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_out_WUSER <= ap_const_lv1_0;

    m_axi_gmem_out_WVALID_assign_proc : process(m_axi_gmem_out_WREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_ftmap_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_ftmap_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_ftmap_blk_n <= output_ftmap_empty_n;
        else 
            output_ftmap_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_ftmap_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n)
    begin
        if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_ftmap_read <= ap_const_logic_1;
        else 
            output_ftmap_read <= ap_const_logic_0;
        end if; 
    end process;

        p_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_87_fu_264_p2),22));

    p_shl1_cast8_i_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_252_p3),21));
    p_shl1_i_fu_252_p3 <= (empty_fu_235_p2 & ap_const_lv2_0);
    p_shl_cast7_i_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_240_p3),21));
    p_shl_i_fu_240_p3 <= (empty_fu_235_p2 & ap_const_lv10_0);

    s_out_i_blk_n_assign_proc : process(s_out_i_empty_n, ap_CS_fsm_state4, icmp_ln735_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) then 
            s_out_i_blk_n <= s_out_i_empty_n;
        else 
            s_out_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_out_i_read_assign_proc : process(s_out_i_empty_n, ap_CS_fsm_state4, icmp_ln735_fu_308_p2)
    begin
        if ((not(((s_out_i_empty_n = ap_const_logic_0) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln735_fu_308_p2 = ap_const_lv1_0))) then 
            s_out_i_read <= ap_const_logic_1;
        else 
            s_out_i_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln735_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_288_p4),64));

    th_eff_fu_184_p3 <= 
        xor_ln978_fu_178_p2 when (tmp_2_fu_166_p3(0) = '1') else 
        ap_const_lv8_10;
    tmp_1_fu_196_p3 <= (w0_dout & ap_const_lv2_0);
    tmp_2_fu_166_p3 <= add_ln978_fu_160_p2(8 downto 8);
        tmp_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_274_p2),64));

    tmp_fu_274_p2 <= std_logic_vector(signed(p_cast_fu_270_p1) + signed(zext_ln733_1_reg_350));
    trunc_ln1_fu_288_p4 <= empty_88_fu_283_p2(63 downto 2);
    trunc_ln977_fu_174_p1 <= h0_dout(8 - 1 downto 0);

    tw_eff_loc_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tw_eff_loc_i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tw_eff_loc_i_blk_n <= tw_eff_loc_i_empty_n;
        else 
            tw_eff_loc_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tw_eff_loc_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n)
    begin
        if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tw_eff_loc_i_read <= ap_const_logic_1;
        else 
            tw_eff_loc_i_read <= ap_const_logic_0;
        end if; 
    end process;


    w0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, w0_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_blk_n <= w0_empty_n;
        else 
            w0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    w0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_ftmap_empty_n, h0_empty_n, w0_empty_n, tw_eff_loc_i_empty_n)
    begin
        if ((not(((output_ftmap_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (tw_eff_loc_i_empty_n = ap_const_logic_0) or (w0_empty_n = ap_const_logic_0) or (h0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_read <= ap_const_logic_1;
        else 
            w0_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln978_fu_178_p2 <= (trunc_ln977_fu_174_p1 xor ap_const_lv8_FF);
    zext_ln733_1_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_196_p3),22));
    zext_ln733_2_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_eff_loc_i_dout),32));
    zext_ln733_3_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_100),10));
    zext_ln733_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h0_dout),10));
end behav;
