-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_srcnn_Pipeline_VITIS_LOOP_346_2_VITIS_LOOP_348_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_w1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_w1_AWREADY : IN STD_LOGIC;
    m_axi_gmem_w1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_w1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_WVALID : OUT STD_LOGIC;
    m_axi_gmem_w1_WREADY : IN STD_LOGIC;
    m_axi_gmem_w1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_WLAST : OUT STD_LOGIC;
    m_axi_gmem_w1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_w1_ARREADY : IN STD_LOGIC;
    m_axi_gmem_w1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_w1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_RVALID : IN STD_LOGIC;
    m_axi_gmem_w1_RREADY : OUT STD_LOGIC;
    m_axi_gmem_w1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w1_RLAST : IN STD_LOGIC;
    m_axi_gmem_w1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_w1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w1_BVALID : IN STD_LOGIC;
    m_axi_gmem_w1_BREADY : OUT STD_LOGIC;
    m_axi_gmem_w1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    add_ln350_3 : IN STD_LOGIC_VECTOR (10 downto 0);
    sext_ln344 : IN STD_LOGIC_VECTOR (61 downto 0);
    zext_ln344_3 : IN STD_LOGIC_VECTOR (12 downto 0);
    w1_loc_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    w1_loc_ce0 : OUT STD_LOGIC;
    w1_loc_we0 : OUT STD_LOGIC;
    w1_loc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_srcnn_Pipeline_VITIS_LOOP_346_2_VITIS_LOOP_348_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln346_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_w1_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_w1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln346_fu_213_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_reg_394_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_fu_225_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln346_1_reg_399_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_w1_addr_reg_404 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_w1_addr_read_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln350_4_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln350_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kx_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln348_1_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_kx_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ky_fu_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_ky_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln346_1_fu_192_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_172_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln346_fu_168_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln348_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln346_fu_201_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln348_mid1_fu_233_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln346_1_fu_221_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln348_2_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln348_fu_180_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln346_2_fu_247_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln344_cast_fu_143_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln344_3_cast_fu_139_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln346_2_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kx_cast3_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln350_2_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln350_fu_275_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln350_fu_263_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln350_1_fu_279_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln350_1_fu_316_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln350_4_fu_319_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln350_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_332_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln350_2_fu_324_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln350_5_fu_340_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln350_3_fu_346_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln350_6_fu_349_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln346_fu_186_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_92 <= add_ln346_1_fu_192_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    kx_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln346_fu_186_p2 = ap_const_lv1_0))) then 
                    kx_fu_84 <= add_ln348_1_fu_295_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    kx_fu_84 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ky_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln346_fu_186_p2 = ap_const_lv1_0))) then 
                    ky_fu_88 <= select_ln346_1_fu_225_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ky_fu_88 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln346_1_reg_399_pp0_iter1_reg <= select_ln346_1_reg_399;
                select_ln346_reg_394_pp0_iter1_reg <= select_ln346_reg_394;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_w1_addr_read_reg_410 <= m_axi_gmem_w1_RDATA;
                select_ln346_1_reg_399_pp0_iter2_reg <= select_ln346_1_reg_399_pp0_iter1_reg;
                select_ln346_1_reg_399_pp0_iter3_reg <= select_ln346_1_reg_399_pp0_iter2_reg;
                select_ln346_1_reg_399_pp0_iter4_reg <= select_ln346_1_reg_399_pp0_iter3_reg;
                select_ln346_1_reg_399_pp0_iter5_reg <= select_ln346_1_reg_399_pp0_iter4_reg;
                select_ln346_1_reg_399_pp0_iter6_reg <= select_ln346_1_reg_399_pp0_iter5_reg;
                select_ln346_1_reg_399_pp0_iter7_reg <= select_ln346_1_reg_399_pp0_iter6_reg;
                select_ln346_1_reg_399_pp0_iter8_reg <= select_ln346_1_reg_399_pp0_iter7_reg;
                select_ln346_1_reg_399_pp0_iter9_reg <= select_ln346_1_reg_399_pp0_iter8_reg;
                select_ln346_reg_394_pp0_iter2_reg <= select_ln346_reg_394_pp0_iter1_reg;
                select_ln346_reg_394_pp0_iter3_reg <= select_ln346_reg_394_pp0_iter2_reg;
                select_ln346_reg_394_pp0_iter4_reg <= select_ln346_reg_394_pp0_iter3_reg;
                select_ln346_reg_394_pp0_iter5_reg <= select_ln346_reg_394_pp0_iter4_reg;
                select_ln346_reg_394_pp0_iter6_reg <= select_ln346_reg_394_pp0_iter5_reg;
                select_ln346_reg_394_pp0_iter7_reg <= select_ln346_reg_394_pp0_iter6_reg;
                select_ln346_reg_394_pp0_iter8_reg <= select_ln346_reg_394_pp0_iter7_reg;
                select_ln346_reg_394_pp0_iter9_reg <= select_ln346_reg_394_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln346_fu_186_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_w1_addr_reg_404 <= sext_ln350_fu_285_p1;
                select_ln346_1_reg_399 <= select_ln346_1_fu_225_p3;
                select_ln346_reg_394 <= select_ln346_fu_213_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln346_1_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln346_fu_201_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ky_1) + unsigned(ap_const_lv4_1));
    add_ln348_1_fu_295_p2 <= std_logic_vector(unsigned(select_ln346_fu_213_p3) + unsigned(ap_const_lv4_1));
    add_ln348_2_fu_241_p2 <= std_logic_vector(unsigned(shl_ln348_mid1_fu_233_p3) + unsigned(zext_ln346_1_fu_221_p1));
    add_ln348_fu_180_p2 <= std_logic_vector(unsigned(shl_ln1_fu_172_p3) + unsigned(zext_ln346_fu_168_p1));
    add_ln350_1_fu_279_p2 <= std_logic_vector(unsigned(zext_ln350_fu_275_p1) + unsigned(add_ln350_fu_263_p2));
    add_ln350_2_fu_269_p2 <= std_logic_vector(unsigned(zext_ln346_2_fu_255_p1) + unsigned(kx_cast3_fu_259_p1));
    add_ln350_4_fu_319_p2 <= std_logic_vector(unsigned(add_ln350_3) + unsigned(zext_ln350_1_fu_316_p1));
    add_ln350_5_fu_340_p2 <= std_logic_vector(unsigned(p_shl1_fu_332_p3) + unsigned(zext_ln350_2_fu_324_p1));
    add_ln350_6_fu_349_p2 <= std_logic_vector(unsigned(add_ln350_5_fu_340_p2) + unsigned(zext_ln350_3_fu_346_p1));
    add_ln350_fu_263_p2 <= std_logic_vector(signed(sext_ln344_cast_fu_143_p1) + signed(zext_ln344_3_cast_fu_139_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, m_axi_gmem_w1_ARREADY, m_axi_gmem_w1_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_w1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((m_axi_gmem_w1_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, m_axi_gmem_w1_ARREADY, m_axi_gmem_w1_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_w1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((m_axi_gmem_w1_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_gmem_w1_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (m_axi_gmem_w1_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln346_fu_186_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln346_fu_186_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_92)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_kx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, kx_fu_84, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_kx_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_kx_load <= kx_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_ky_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ky_fu_88)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_ky_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_ky_1 <= ky_fu_88;
        end if; 
    end process;


    gmem_w1_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_w1_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_w1_blk_n_AR <= m_axi_gmem_w1_ARREADY;
        else 
            gmem_w1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_w1_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem_w1_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_w1_blk_n_R <= m_axi_gmem_w1_RVALID;
        else 
            gmem_w1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln346_fu_186_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_51) else "0";
    icmp_ln348_fu_207_p2 <= "1" when (ap_sig_allocacmp_kx_load = ap_const_lv4_9) else "0";
    kx_cast3_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln346_fu_213_p3),8));
    m_axi_gmem_w1_ARADDR <= gmem_w1_addr_reg_404;
    m_axi_gmem_w1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_w1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_w1_ARID <= ap_const_lv1_0;
    m_axi_gmem_w1_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_w1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_w1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_w1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_w1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_w1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_w1_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_w1_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_w1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_w1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_w1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_w1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_w1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_w1_AWID <= ap_const_lv1_0;
    m_axi_gmem_w1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_w1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_w1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_w1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_w1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_w1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_w1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_w1_AWVALID <= ap_const_logic_0;
    m_axi_gmem_w1_BREADY <= ap_const_logic_0;

    m_axi_gmem_w1_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_w1_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_w1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_w1_WDATA <= ap_const_lv32_0;
    m_axi_gmem_w1_WID <= ap_const_lv1_0;
    m_axi_gmem_w1_WLAST <= ap_const_logic_0;
    m_axi_gmem_w1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_w1_WUSER <= ap_const_lv1_0;
    m_axi_gmem_w1_WVALID <= ap_const_logic_0;
    p_shl1_fu_332_p3 <= (trunc_ln350_fu_328_p1 & ap_const_lv3_0);
    select_ln346_1_fu_225_p3 <= 
        add_ln346_fu_201_p2 when (icmp_ln348_fu_207_p2(0) = '1') else 
        ap_sig_allocacmp_ky_1;
    select_ln346_2_fu_247_p3 <= 
        add_ln348_2_fu_241_p2 when (icmp_ln348_fu_207_p2(0) = '1') else 
        add_ln348_fu_180_p2;
    select_ln346_fu_213_p3 <= 
        ap_const_lv4_0 when (icmp_ln348_fu_207_p2(0) = '1') else 
        ap_sig_allocacmp_kx_load;
        sext_ln344_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln344),63));

        sext_ln350_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln350_1_fu_279_p2),64));

    shl_ln1_fu_172_p3 <= (ap_sig_allocacmp_ky_1 & ap_const_lv3_0);
    shl_ln348_mid1_fu_233_p3 <= (add_ln346_fu_201_p2 & ap_const_lv3_0);
    trunc_ln350_fu_328_p1 <= add_ln350_4_fu_319_p2(10 - 1 downto 0);
    w1_loc_address0 <= zext_ln350_4_fu_355_p1(13 - 1 downto 0);

    w1_loc_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w1_loc_ce0 <= ap_const_logic_1;
        else 
            w1_loc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w1_loc_d0 <= gmem_w1_addr_read_reg_410;

    w1_loc_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w1_loc_we0 <= ap_const_logic_1;
        else 
            w1_loc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln344_3_cast_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln344_3),63));
    zext_ln346_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln346_fu_201_p2),7));
    zext_ln346_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln346_2_fu_247_p3),8));
    zext_ln346_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ky_1),7));
    zext_ln350_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln346_1_reg_399_pp0_iter9_reg),11));
    zext_ln350_2_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln350_4_fu_319_p2),13));
    zext_ln350_3_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln346_reg_394_pp0_iter9_reg),13));
    zext_ln350_4_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln350_6_fu_349_p2),64));
    zext_ln350_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln350_2_fu_269_p2),63));
end behav;
