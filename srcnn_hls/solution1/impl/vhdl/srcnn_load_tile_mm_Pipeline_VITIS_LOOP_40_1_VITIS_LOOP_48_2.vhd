-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_tile_mm_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_48_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_in_AWREADY : IN STD_LOGIC;
    m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WVALID : OUT STD_LOGIC;
    m_axi_gmem_in_WREADY : IN STD_LOGIC;
    m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_WLAST : OUT STD_LOGIC;
    m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_in_ARREADY : IN STD_LOGIC;
    m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RVALID : IN STD_LOGIC;
    m_axi_gmem_in_RREADY : OUT STD_LOGIC;
    m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_RLAST : IN STD_LOGIC;
    m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BVALID : IN STD_LOGIC;
    m_axi_gmem_in_BREADY : OUT STD_LOGIC;
    m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln44 : IN STD_LOGIC_VECTOR (9 downto 0);
    add_ln44 : IN STD_LOGIC_VECTOR (9 downto 0);
    bound : IN STD_LOGIC_VECTOR (16 downto 0);
    add_ln40 : IN STD_LOGIC_VECTOR (8 downto 0);
    select_ln53 : IN STD_LOGIC_VECTOR (2 downto 0);
    sext_ln50 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln50_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    inbuf_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inbuf_ce0 : OUT STD_LOGIC;
    inbuf_we0 : OUT STD_LOGIC;
    inbuf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_load_tile_mm_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_48_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln40_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_in_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_in_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln50_1_cast_fu_199_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln50_1_cast_reg_668 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln50_cast_fu_203_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln50_cast_reg_673 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln44_cast_fu_207_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln44_cast_reg_678 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln53_cast_cast_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln53_cast_cast_reg_684 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln53_3_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_693_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem_in_addr_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_in_addr_read_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_7_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln53_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal px_fu_114 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_fu_597_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal py_fu_118 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln40_1_fu_355_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln40_1_fu_327_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln53_cast_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln44_fu_244_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln44_1_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_253_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal iy_fu_266_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln46_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_fu_274_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal iy_1_fu_284_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_292_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln53_1_fu_304_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_fu_300_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln53_1_fu_312_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln48_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_2_fu_336_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln53_5_fu_363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln53_2_fu_367_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln53_fu_372_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln53_1_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_376_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_388_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_fu_402_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln44_1_fu_406_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln44_2_fu_410_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_1_fu_415_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln45_fu_428_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln46_1_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_1_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln46_fu_446_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln53_mid1_fu_454_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln53_1_mid1_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_2_fu_462_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln53_3_fu_474_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln53_2_fu_478_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln53_fu_316_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln40_fu_347_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln53_1_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln53_6_fu_492_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln50_fu_502_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln50_fu_506_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_fu_511_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_fu_524_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln52_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln53_2_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln52_fu_542_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln53_2_fu_550_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln40_2_fu_484_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln53_4_fu_558_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln53_fu_562_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln53_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_1_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_577_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_122 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_122 <= add_ln40_1_fu_327_p2;
                end if;
            end if; 
        end if;
    end process;

    px_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    px_fu_114 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    px_fu_114 <= add_ln48_fu_597_p2;
                end if;
            end if; 
        end if;
    end process;

    py_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    py_fu_118 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    py_fu_118 <= select_ln40_1_fu_355_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln53_3_reg_693 <= add_ln53_3_fu_496_p2;
                gmem_in_addr_reg_698 <= sext_ln53_1_fu_587_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln53_3_reg_693_pp0_iter10_reg <= add_ln53_3_reg_693_pp0_iter9_reg;
                add_ln53_3_reg_693_pp0_iter2_reg <= add_ln53_3_reg_693;
                add_ln53_3_reg_693_pp0_iter3_reg <= add_ln53_3_reg_693_pp0_iter2_reg;
                add_ln53_3_reg_693_pp0_iter4_reg <= add_ln53_3_reg_693_pp0_iter3_reg;
                add_ln53_3_reg_693_pp0_iter5_reg <= add_ln53_3_reg_693_pp0_iter4_reg;
                add_ln53_3_reg_693_pp0_iter6_reg <= add_ln53_3_reg_693_pp0_iter5_reg;
                add_ln53_3_reg_693_pp0_iter7_reg <= add_ln53_3_reg_693_pp0_iter6_reg;
                add_ln53_3_reg_693_pp0_iter8_reg <= add_ln53_3_reg_693_pp0_iter7_reg;
                add_ln53_3_reg_693_pp0_iter9_reg <= add_ln53_3_reg_693_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_in_addr_read_reg_704 <= m_axi_gmem_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    select_ln53_cast_cast_reg_684(4 downto 0) <= select_ln53_cast_cast_fu_215_p1(4 downto 0);
                sext_ln44_cast_reg_678 <= sext_ln44_cast_fu_207_p1;
                sext_ln50_1_cast_reg_668 <= sext_ln50_1_cast_fu_199_p1;
                sext_ln50_cast_reg_673 <= sext_ln50_cast_fu_203_p1;
            end if;
        end if;
    end process;
    select_ln53_cast_cast_reg_684(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_1_fu_327_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_122) + unsigned(ap_const_lv17_1));
    add_ln40_2_fu_336_p2 <= std_logic_vector(unsigned(py_fu_118) + unsigned(ap_const_lv9_1));
    add_ln44_1_fu_248_p2 <= std_logic_vector(signed(sext_ln44_cast_reg_678) + signed(zext_ln40_fu_240_p1));
    add_ln44_2_fu_410_p2 <= std_logic_vector(signed(sext_ln44_cast_reg_678) + signed(zext_ln40_1_fu_402_p1));
    add_ln45_1_fu_415_p2 <= std_logic_vector(unsigned(add_ln44) + unsigned(zext_ln44_1_fu_406_p1));
    add_ln45_fu_253_p2 <= std_logic_vector(unsigned(add_ln44) + unsigned(zext_ln44_fu_244_p1));
    add_ln48_fu_597_p2 <= std_logic_vector(unsigned(select_ln40_fu_347_p3) + unsigned(ap_const_lv9_1));
    add_ln50_fu_506_p2 <= std_logic_vector(signed(sext_ln50_cast_reg_673) + signed(zext_ln53_6_fu_492_p1));
    add_ln51_fu_511_p2 <= std_logic_vector(signed(sext_ln50_1_cast_reg_668) + signed(zext_ln50_fu_502_p1));
    add_ln53_1_fu_572_p2 <= std_logic_vector(signed(sext_ln53_fu_568_p1) + signed(input_ftmap));
    add_ln53_2_fu_367_p2 <= std_logic_vector(unsigned(select_ln53_cast_cast_reg_684) + unsigned(zext_ln53_5_fu_363_p1));
    add_ln53_3_fu_496_p2 <= std_logic_vector(unsigned(sub_ln53_1_fu_396_p2) + unsigned(zext_ln53_6_fu_492_p1));
    add_ln53_fu_562_p2 <= std_logic_vector(unsigned(select_ln40_2_fu_484_p3) + unsigned(zext_ln53_4_fu_558_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, m_axi_gmem_in_ARREADY, m_axi_gmem_in_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((m_axi_gmem_in_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, m_axi_gmem_in_ARREADY, m_axi_gmem_in_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((m_axi_gmem_in_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_gmem_in_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter10 <= (m_axi_gmem_in_RVALID = ap_const_logic_0);
    end process;

        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln40_fu_322_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_fu_322_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    gmem_in_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_in_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_in_blk_n_AR <= m_axi_gmem_in_ARREADY;
        else 
            gmem_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_in_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_gmem_in_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_in_blk_n_R <= m_axi_gmem_in_RVALID;
        else 
            gmem_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln40_fu_322_p2 <= "1" when (indvar_flatten_fu_122 = bound) else "0";
    icmp_ln46_1_fu_440_p2 <= "1" when (unsigned(select_ln45_fu_428_p3) > unsigned(ap_const_lv10_FE)) else "0";
    icmp_ln46_fu_278_p2 <= "1" when (unsigned(iy_fu_266_p3) > unsigned(ap_const_lv10_FE)) else "0";
    icmp_ln48_fu_342_p2 <= "1" when (px_fu_114 = add_ln40) else "0";
    icmp_ln52_fu_532_p2 <= "1" when (unsigned(ix_fu_524_p3) > unsigned(ap_const_lv10_FE)) else "0";
    inbuf_address0 <= zext_ln53_7_fu_618_p1(11 - 1 downto 0);

    inbuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inbuf_ce0 <= ap_const_logic_1;
        else 
            inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inbuf_d0 <= gmem_in_addr_read_reg_704;

    inbuf_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inbuf_we0 <= ap_const_logic_1;
        else 
            inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ix_fu_524_p3 <= 
        ap_const_lv10_0 when (tmp_5_fu_516_p3(0) = '1') else 
        add_ln51_fu_511_p2;
    iy_1_fu_284_p3 <= 
        ap_const_lv8_FE when (icmp_ln46_fu_278_p2(0) = '1') else 
        trunc_ln44_fu_274_p1;
    iy_fu_266_p3 <= 
        ap_const_lv10_0 when (tmp_fu_258_p3(0) = '1') else 
        add_ln45_fu_253_p2;
    m_axi_gmem_in_ARADDR <= gmem_in_addr_reg_698;
    m_axi_gmem_in_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_in_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_ARID <= ap_const_lv1_0;
    m_axi_gmem_in_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_in_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_in_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_in_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_in_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_in_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_in_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_in_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_AWID <= ap_const_lv1_0;
    m_axi_gmem_in_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_in_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_in_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_in_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_in_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_in_AWVALID <= ap_const_logic_0;
    m_axi_gmem_in_BREADY <= ap_const_logic_0;

    m_axi_gmem_in_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_WDATA <= ap_const_lv32_0;
    m_axi_gmem_in_WID <= ap_const_lv1_0;
    m_axi_gmem_in_WLAST <= ap_const_logic_0;
    m_axi_gmem_in_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_in_WUSER <= ap_const_lv1_0;
    m_axi_gmem_in_WVALID <= ap_const_logic_0;
    p_shl2_fu_388_p3 <= (trunc_ln53_1_fu_384_p1 & ap_const_lv2_0);
    p_shl_fu_376_p3 <= (trunc_ln53_fu_372_p1 & ap_const_lv5_0);
    select_ln40_1_fu_355_p3 <= 
        add_ln40_2_fu_336_p2 when (icmp_ln48_fu_342_p2(0) = '1') else 
        py_fu_118;
    select_ln40_2_fu_484_p3 <= 
        sub_ln53_2_fu_478_p2 when (icmp_ln48_fu_342_p2(0) = '1') else 
        sub_ln53_fu_316_p2;
    select_ln40_fu_347_p3 <= 
        ap_const_lv9_0 when (icmp_ln48_fu_342_p2(0) = '1') else 
        px_fu_114;
    select_ln45_fu_428_p3 <= 
        ap_const_lv10_0 when (tmp_4_fu_420_p3(0) = '1') else 
        add_ln45_1_fu_415_p2;
    select_ln46_fu_446_p3 <= 
        ap_const_lv8_FE when (icmp_ln46_1_fu_440_p2(0) = '1') else 
        trunc_ln44_1_fu_436_p1;
    select_ln52_fu_542_p3 <= 
        ap_const_lv8_FE when (icmp_ln52_fu_532_p2(0) = '1') else 
        trunc_ln53_2_fu_538_p1;
    select_ln53_cast_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln53_cast_fu_211_p1),10));
        select_ln53_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln53),5));

        sext_ln44_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln44),11));

        sext_ln50_1_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_1),10));

        sext_ln50_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50),11));

        sext_ln53_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_577_p4),64));

        sext_ln53_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_fu_562_p2),64));

    shl_ln53_1_fu_304_p3 <= (iy_1_fu_284_p3 & ap_const_lv2_0);
    shl_ln53_1_mid1_fu_466_p3 <= (select_ln46_fu_446_p3 & ap_const_lv2_0);
    shl_ln53_2_fu_550_p3 <= (select_ln52_fu_542_p3 & ap_const_lv2_0);
    shl_ln53_mid1_fu_454_p3 <= (select_ln46_fu_446_p3 & ap_const_lv10_0);
    shl_ln_fu_292_p3 <= (iy_1_fu_284_p3 & ap_const_lv10_0);
    sub_ln53_1_fu_396_p2 <= std_logic_vector(unsigned(p_shl_fu_376_p3) - unsigned(p_shl2_fu_388_p3));
    sub_ln53_2_fu_478_p2 <= std_logic_vector(unsigned(zext_ln53_2_fu_462_p1) - unsigned(zext_ln53_3_fu_474_p1));
    sub_ln53_fu_316_p2 <= std_logic_vector(unsigned(zext_ln53_fu_300_p1) - unsigned(zext_ln53_1_fu_312_p1));
    tmp_4_fu_420_p3 <= add_ln44_2_fu_410_p2(10 downto 10);
    tmp_5_fu_516_p3 <= add_ln50_fu_506_p2(10 downto 10);
    tmp_fu_258_p3 <= add_ln44_1_fu_248_p2(10 downto 10);
    trunc_ln44_1_fu_436_p1 <= select_ln45_fu_428_p3(8 - 1 downto 0);
    trunc_ln44_fu_274_p1 <= iy_fu_266_p3(8 - 1 downto 0);
    trunc_ln53_1_fu_384_p1 <= add_ln53_2_fu_367_p2(9 - 1 downto 0);
    trunc_ln53_2_fu_538_p1 <= ix_fu_524_p3(8 - 1 downto 0);
    trunc_ln53_fu_372_p1 <= add_ln53_2_fu_367_p2(6 - 1 downto 0);
    trunc_ln7_fu_577_p4 <= add_ln53_1_fu_572_p2(63 downto 2);
    zext_ln40_1_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_336_p2),11));
    zext_ln40_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(py_fu_118),11));
    zext_ln44_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_336_p2),10));
    zext_ln44_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(py_fu_118),10));
    zext_ln50_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_fu_347_p3),10));
    zext_ln53_1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_1_fu_304_p3),19));
    zext_ln53_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_mid1_fu_454_p3),19));
    zext_ln53_3_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_1_mid1_fu_466_p3),19));
    zext_ln53_4_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln53_2_fu_550_p3),19));
    zext_ln53_5_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_fu_355_p3),10));
    zext_ln53_6_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_fu_347_p3),11));
    zext_ln53_7_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_3_reg_693_pp0_iter10_reg),64));
    zext_ln53_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_292_p3),19));
end behav;
