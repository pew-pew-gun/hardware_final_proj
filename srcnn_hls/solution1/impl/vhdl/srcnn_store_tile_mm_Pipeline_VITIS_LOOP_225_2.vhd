-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_store_tile_mm_Pipeline_VITIS_LOOP_225_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln223 : IN STD_LOGIC_VECTOR (8 downto 0);
    bound : IN STD_LOGIC_VECTOR (15 downto 0);
    tw_eff : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln225 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln226 : IN STD_LOGIC_VECTOR (4 downto 0);
    p_cast3 : IN STD_LOGIC_VECTOR (10 downto 0);
    out_r : IN STD_LOGIC_VECTOR (63 downto 0);
    outbuf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    outbuf_ce0 : OUT STD_LOGIC;
    outbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_store_tile_mm_Pipeline_VITIS_LOOP_225_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal or_ln223_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal icmp_ln225_1_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_1_reg_535_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln223_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_out_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_out_blk_n_W : STD_LOGIC;
    signal gmem_out_blk_n_AW : STD_LOGIC;
    signal zext_ln225_cast_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln225_cast_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln223_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln225_mid2_v_reg_525 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln225_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_1_reg_535_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_1_reg_535_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_1_reg_535_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_1_reg_535_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_1_reg_535_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal outbuf_load_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln226_3_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln223_2_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal x_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln225_fu_442_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_x_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln223_fu_311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_y_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln223_3_fu_287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln223_cast_fu_209_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln223_1_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_245_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_i_fu_251_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl2_i_i_fu_263_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast14_i_i_fu_259_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl2_cast15_i_i_fu_271_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln225_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln223_fu_293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln226_cast_fu_213_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln226_1_fu_319_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln226_fu_323_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln223_2_fu_335_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid1_fu_339_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_i_mid1_fu_345_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl2_i_i_mid1_fu_357_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast14_i_i_mid1_fu_353_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl2_cast15_i_i_mid1_fu_365_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_mid17_fu_369_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_61_fu_275_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln223_1_fu_375_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln223_fu_383_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_cast3_cast_fu_201_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln223_1_fu_387_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln223_1_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln223_2_fu_397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln223_2_fu_413_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln226_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln226_2_fu_421_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln226_1_fu_425_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln225_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_459 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln223_fu_281_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_112 <= add_ln223_3_fu_287_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln223_fu_281_p2 = ap_const_lv1_0))) then 
                    x_fu_104 <= select_ln225_fu_442_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_104 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln223_fu_281_p2 = ap_const_lv1_0))) then 
                    y_fu_108 <= select_ln223_fu_311_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_108 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln223_reg_517 <= icmp_ln223_fu_281_p2;
                icmp_ln225_1_reg_535_pp0_iter1_reg <= icmp_ln225_1_reg_535;
                outbuf_load_reg_539 <= outbuf_q0;
                    zext_ln225_cast_reg_512(7 downto 0) <= zext_ln225_cast_fu_205_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln225_1_reg_535_pp0_iter2_reg <= icmp_ln225_1_reg_535_pp0_iter1_reg;
                icmp_ln225_1_reg_535_pp0_iter3_reg <= icmp_ln225_1_reg_535_pp0_iter2_reg;
                icmp_ln225_1_reg_535_pp0_iter4_reg <= icmp_ln225_1_reg_535_pp0_iter3_reg;
                icmp_ln225_1_reg_535_pp0_iter5_reg <= icmp_ln225_1_reg_535_pp0_iter4_reg;
                icmp_ln225_1_reg_535_pp0_iter6_reg <= icmp_ln225_1_reg_535_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln223_fu_281_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln225_1_reg_535 <= icmp_ln225_1_fu_450_p2;
                or_ln223_reg_521 <= or_ln223_fu_305_p2;
                sext_ln225_mid2_v_reg_525 <= add_ln223_2_fu_397_p2(63 downto 2);
            end if;
        end if;
    end process;
    zext_ln225_cast_reg_512(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln223_1_fu_387_p2 <= std_logic_vector(signed(sext_ln223_fu_383_p1) + signed(p_cast3_cast_fu_201_p1));
    add_ln223_2_fu_397_p2 <= std_logic_vector(signed(sext_ln223_1_fu_393_p1) + signed(out_r));
    add_ln223_3_fu_287_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv16_1));
    add_ln223_fu_293_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_1) + unsigned(ap_const_lv8_1));
    add_ln225_fu_436_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_1) + unsigned(ap_const_lv8_1));
    add_ln226_1_fu_425_p2 <= std_logic_vector(unsigned(shl_ln226_fu_329_p2) + unsigned(zext_ln226_2_fu_421_p1));
    add_ln226_fu_323_p2 <= std_logic_vector(unsigned(zext_ln226_cast_fu_213_p1) + unsigned(zext_ln226_1_fu_319_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_gmem_out_BVALID, icmp_ln225_1_reg_535_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln225_1_reg_535_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_gmem_out_WREADY, m_axi_gmem_out_BVALID, ap_block_state2_io, icmp_ln225_1_reg_535_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln225_1_reg_535_pp0_iter6_reg = ap_const_lv1_1)) or ((m_axi_gmem_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, m_axi_gmem_out_WREADY, m_axi_gmem_out_BVALID, ap_block_state2_io, icmp_ln225_1_reg_535_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln225_1_reg_535_pp0_iter6_reg = ap_const_lv1_1)) or ((m_axi_gmem_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem_out_AWREADY, or_ln223_reg_521)
    begin
                ap_block_state2_io <= ((m_axi_gmem_out_AWREADY = ap_const_logic_0) and (or_ln223_reg_521 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(m_axi_gmem_out_BVALID, icmp_ln225_1_reg_535_pp0_iter6_reg)
    begin
                ap_block_state8_pp0_stage0_iter7 <= ((m_axi_gmem_out_BVALID = ap_const_logic_0) and (icmp_ln225_1_reg_535_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_condition_459_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln223_reg_517)
    begin
                ap_condition_459 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln223_reg_517 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln223_fu_281_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln223_fu_281_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_first_iter_0_phi_fu_193_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_condition_459)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_459)) then 
                ap_phi_mux_first_iter_0_phi_fu_193_p4 <= ap_const_lv1_0;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_first_iter_0_phi_fu_193_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_first_iter_0_phi_fu_193_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_first_iter_0_phi_fu_193_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_112)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_x_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_104)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_x_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_x_1 <= x_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_y_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, y_fu_108)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_y_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_y_1 <= y_fu_108;
        end if; 
    end process;

    empty_61_fu_275_p2 <= std_logic_vector(unsigned(p_shl_cast14_i_i_fu_259_p1) - unsigned(p_shl2_cast15_i_i_fu_271_p1));
    empty_fu_245_p2 <= std_logic_vector(unsigned(zext_ln223_cast_fu_209_p1) + unsigned(zext_ln223_1_fu_241_p1));

    gmem_out_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_out_AWREADY, or_ln223_reg_521, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln223_reg_521 = ap_const_lv1_1))) then 
            gmem_out_blk_n_AW <= m_axi_gmem_out_AWREADY;
        else 
            gmem_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter7, m_axi_gmem_out_BVALID, icmp_ln225_1_reg_535_pp0_iter6_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln225_1_reg_535_pp0_iter6_reg = ap_const_lv1_1))) then 
            gmem_out_blk_n_B <= m_axi_gmem_out_BVALID;
        else 
            gmem_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_out_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_out_blk_n_W <= m_axi_gmem_out_WREADY;
        else 
            gmem_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln223_fu_281_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound) else "0";
    icmp_ln225_1_fu_450_p2 <= "1" when (select_ln225_fu_442_p3 = tw_eff) else "0";
    icmp_ln225_fu_299_p2 <= "1" when (ap_sig_allocacmp_x_1 = tw_eff) else "0";
    m_axi_gmem_out_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_out_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_out_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_out_ARID <= ap_const_lv1_0;
    m_axi_gmem_out_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_out_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_out_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_out_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_out_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_out_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_out_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_out_ARVALID <= ap_const_logic_0;
    m_axi_gmem_out_AWADDR <= sext_ln223_2_fu_471_p1;
    m_axi_gmem_out_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_out_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_out_AWID <= ap_const_lv1_0;
    m_axi_gmem_out_AWLEN <= zext_ln225_cast_reg_512;
    m_axi_gmem_out_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_out_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_out_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_out_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_out_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_out_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_out_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln223_reg_521, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln223_reg_521 = ap_const_lv1_1))) then 
            m_axi_gmem_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_out_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln225_1_reg_535_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln225_1_reg_535_pp0_iter6_reg = ap_const_lv1_1))) then 
            m_axi_gmem_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_out_RREADY <= ap_const_logic_0;
    m_axi_gmem_out_WDATA <= outbuf_load_reg_539;
    m_axi_gmem_out_WID <= ap_const_lv1_0;
    m_axi_gmem_out_WLAST <= ap_const_logic_0;
    m_axi_gmem_out_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_out_WUSER <= ap_const_lv1_0;

    m_axi_gmem_out_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln223_fu_305_p2 <= (icmp_ln225_fu_299_p2 or ap_phi_mux_first_iter_0_phi_fu_193_p4);
    outbuf_address0 <= zext_ln226_3_fu_431_p1(9 - 1 downto 0);

    outbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outbuf_ce0 <= ap_const_logic_1;
        else 
            outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast3_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast3),22));
    p_mid17_fu_369_p2 <= std_logic_vector(unsigned(p_shl_cast14_i_i_mid1_fu_353_p1) - unsigned(p_shl2_cast15_i_i_mid1_fu_365_p1));
    p_mid1_fu_339_p2 <= std_logic_vector(unsigned(zext_ln223_cast_fu_209_p1) + unsigned(zext_ln223_2_fu_335_p1));
    p_shl2_cast15_i_i_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_i_i_fu_263_p3),21));
    p_shl2_cast15_i_i_mid1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_i_i_mid1_fu_357_p3),21));
    p_shl2_i_i_fu_263_p3 <= (empty_fu_245_p2 & ap_const_lv2_0);
    p_shl2_i_i_mid1_fu_357_p3 <= (p_mid1_fu_339_p2 & ap_const_lv2_0);
    p_shl_cast14_i_i_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_251_p3),21));
    p_shl_cast14_i_i_mid1_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_mid1_fu_345_p3),21));
    p_shl_i_i_fu_251_p3 <= (empty_fu_245_p2 & ap_const_lv10_0);
    p_shl_i_i_mid1_fu_345_p3 <= (p_mid1_fu_339_p2 & ap_const_lv10_0);
    select_ln223_1_fu_375_p3 <= 
        p_mid17_fu_369_p2 when (icmp_ln225_fu_299_p2(0) = '1') else 
        empty_61_fu_275_p2;
    select_ln223_2_fu_413_p3 <= 
        ap_const_lv8_0 when (icmp_ln225_fu_299_p2(0) = '1') else 
        ap_sig_allocacmp_x_1;
    select_ln223_fu_311_p3 <= 
        add_ln223_fu_293_p2 when (icmp_ln225_fu_299_p2(0) = '1') else 
        ap_sig_allocacmp_y_1;
    select_ln225_fu_442_p3 <= 
        ap_const_lv8_1 when (icmp_ln225_fu_299_p2(0) = '1') else 
        add_ln225_fu_436_p2;
        sext_ln223_1_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln223_1_fu_387_p2),64));

        sext_ln223_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln225_mid2_v_reg_525),64));

        sext_ln223_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln223_1_fu_375_p3),22));

    shl_ln226_fu_329_p2 <= std_logic_vector(shift_left(unsigned(add_ln226_fu_323_p2),to_integer(unsigned('0' & ap_const_lv9_4(9-1 downto 0)))));
    zext_ln223_1_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_y_1),10));
    zext_ln223_2_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_fu_293_p2),10));
    zext_ln223_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln223),10));
    zext_ln225_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln225),32));
    zext_ln226_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln223_fu_311_p3),9));
    zext_ln226_2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln223_2_fu_413_p3),9));
    zext_ln226_3_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_1_fu_425_p2),64));
    zext_ln226_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln226),9));
end behav;
