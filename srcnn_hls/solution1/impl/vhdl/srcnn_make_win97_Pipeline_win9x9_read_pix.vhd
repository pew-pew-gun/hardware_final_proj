-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_make_win97_Pipeline_win9x9_read_pix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_pix_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_pix_i_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    s_pix_i_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    s_pix_i_empty_n : IN STD_LOGIC;
    s_pix_i_read : OUT STD_LOGIC;
    s_win_i_din : OUT STD_LOGIC_VECTOR (2592 downto 0);
    s_win_i_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    s_win_i_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    s_win_i_full_n : IN STD_LOGIC;
    s_win_i_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (16 downto 0);
    zext_ln125 : IN STD_LOGIC_VECTOR (8 downto 0);
    lb1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_7_ce0 : OUT STD_LOGIC;
    lb1_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_7_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_7_ce1 : OUT STD_LOGIC;
    lb1_7_we1 : OUT STD_LOGIC;
    lb1_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_6_ce0 : OUT STD_LOGIC;
    lb1_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_6_ce1 : OUT STD_LOGIC;
    lb1_6_we1 : OUT STD_LOGIC;
    lb1_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_5_ce0 : OUT STD_LOGIC;
    lb1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_5_ce1 : OUT STD_LOGIC;
    lb1_5_we1 : OUT STD_LOGIC;
    lb1_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_4_ce0 : OUT STD_LOGIC;
    lb1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_4_ce1 : OUT STD_LOGIC;
    lb1_4_we1 : OUT STD_LOGIC;
    lb1_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_3_ce0 : OUT STD_LOGIC;
    lb1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_3_ce1 : OUT STD_LOGIC;
    lb1_3_we1 : OUT STD_LOGIC;
    lb1_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_2_ce0 : OUT STD_LOGIC;
    lb1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_2_ce1 : OUT STD_LOGIC;
    lb1_2_we1 : OUT STD_LOGIC;
    lb1_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_1_ce0 : OUT STD_LOGIC;
    lb1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_1_ce1 : OUT STD_LOGIC;
    lb1_1_we1 : OUT STD_LOGIC;
    lb1_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lb1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_ce0 : OUT STD_LOGIC;
    lb1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    lb1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    lb1_ce1 : OUT STD_LOGIC;
    lb1_we1 : OUT STD_LOGIC;
    lb1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln124 : IN STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of srcnn_make_win97_Pipeline_win9x9_read_pix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln144_reg_2709 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_reg_2801 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op385_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln144_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal s_pix_i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_win_i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln124_cast_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln124_cast_reg_2698 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln125_cast_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln125_cast_reg_2703 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_7_addr_reg_2713 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp120_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp120_reg_2719 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_6_addr_reg_2724 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp114_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp114_reg_2730 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_5_addr_reg_2735 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp108_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp108_reg_2741 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_4_addr_reg_2746 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp102_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp102_reg_2752 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_3_addr_reg_2757 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp96_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp96_reg_2763 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_2_addr_reg_2768 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp90_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp90_reg_2774 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_1_addr_reg_2779 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp84_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp84_reg_2785 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_addr_reg_2790 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_2796 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_valid_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_valid_reg_2805 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxprom29_i_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg117_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg116_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select115_fu_1171_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg111_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg110_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select109_fu_1182_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg105_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg104_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select103_fu_1193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg99_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg98_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select97_fu_1204_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg93_fu_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg92_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select91_fu_1215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg87_fu_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg86_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select85_fu_1226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg81_fu_132 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg80_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_fu_1237_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_140 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_fu_1153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_156 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln144_fu_732_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_72_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_73_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_74_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_75_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_76_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_78_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_79_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_80_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_81_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_82_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_83_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_84_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_85_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_86_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_87_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select121_fu_1161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_88_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_89_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_90_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_91_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_92_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_93_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_94_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_95_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_96_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_97_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_98_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_99_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_100_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_101_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_102_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_103_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_104_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_105_fu_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_106_fu_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_107_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_108_fu_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_109_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_110_fu_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_111_fu_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_112_fu_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_113_fu_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_114_fu_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_115_fu_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_116_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_117_fu_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_118_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_119_fu_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_120_fu_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_121_fu_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_122_fu_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_123_fu_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_124_fu_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_125_fu_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_126_fu_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_127_fu_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_128_fu_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_129_fu_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_130_fu_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_131_fu_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_132_fu_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_133_fu_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_134_fu_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_135_fu_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_136_fu_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_137_fu_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_138_fu_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_139_fu_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_140_fu_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_141_fu_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_142_fu_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_143_fu_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_862_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_878_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln179_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_1_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_4_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln199_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln201_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_71_fu_1596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_70_fu_1592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_69_fu_1588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_68_fu_1584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_67_fu_1580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_66_fu_1576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_65_fu_1572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_64_fu_1568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_63_fu_1564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_62_fu_1560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_61_fu_1556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_60_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_59_fu_1548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_58_fu_1544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_57_fu_1540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_56_fu_1536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_55_fu_1532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_54_fu_1528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_53_fu_1524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_52_fu_1520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_51_fu_1516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_50_fu_1512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_49_fu_1508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_48_fu_1504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_47_fu_1500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_46_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_45_fu_1492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_44_fu_1488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_43_fu_1484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_42_fu_1480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_41_fu_1476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_40_fu_1472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_39_fu_1468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_38_fu_1464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_37_fu_1460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_36_fu_1456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_35_fu_1452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_34_fu_1448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_33_fu_1444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_32_fu_1440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_31_fu_1436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_30_fu_1432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_29_fu_1428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_28_fu_1424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_27_fu_1420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_26_fu_1416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_25_fu_1412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_24_fu_1408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_23_fu_1404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_22_fu_1400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_21_fu_1396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_20_fu_1392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_19_fu_1388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_18_fu_1384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_17_fu_1380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_16_fu_1376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_15_fu_1372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_14_fu_1368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_13_fu_1364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_12_fu_1360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_11_fu_1356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_10_fu_1352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_9_fu_1348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_8_fu_1344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_7_fu_1340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_6_fu_1336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_5_fu_1332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_4_fu_1328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_3_fu_1324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_2_fu_1320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_1_fu_1316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln195_fu_1312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    reuse_addr_reg105_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg105_fu_100 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg105_fu_100 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg111_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg111_fu_92 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg111_fu_92 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg117_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg117_fu_84 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg117_fu_84 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg81_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg81_fu_132 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg81_fu_132 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg87_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg87_fu_124 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg87_fu_124 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg93_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg93_fu_116 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg93_fu_116 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg99_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg99_fu_108 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg99_fu_108 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_140 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg_fu_140 <= idxprom29_i_fu_738_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg104_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg104_fu_104 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg104_fu_104 <= reuse_select103_fu_1193_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg110_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg110_fu_96 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg110_fu_96 <= reuse_select109_fu_1182_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg116_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg116_fu_88 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg116_fu_88 <= reuse_select115_fu_1171_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg80_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg80_fu_136 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg80_fu_136 <= reuse_select_fu_1237_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg86_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg86_fu_128 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg86_fu_128 <= reuse_select85_fu_1226_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg92_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg92_fu_120 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg92_fu_120 <= reuse_select91_fu_1215_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg98_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg98_fu_112 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg98_fu_112 <= reuse_select97_fu_1204_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg_fu_144 <= ap_const_lv32_0;
                elsif (((icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg_fu_144 <= pix_fu_1153_p1;
                end if;
            end if; 
        end if;
    end process;

    t_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_156 <= ap_const_lv17_0;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t_fu_156 <= add_ln144_fu_732_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_148 <= ap_const_lv32_0;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_148 <= x_5_fu_933_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_152 <= ap_const_lv32_0;
                elsif (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_152 <= y_3_fu_941_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                addr_cmp102_reg_2752 <= addr_cmp102_fu_780_p2;
                addr_cmp108_reg_2741 <= addr_cmp108_fu_771_p2;
                addr_cmp114_reg_2730 <= addr_cmp114_fu_762_p2;
                addr_cmp120_reg_2719 <= addr_cmp120_fu_753_p2;
                addr_cmp84_reg_2785 <= addr_cmp84_fu_807_p2;
                addr_cmp90_reg_2774 <= addr_cmp90_fu_798_p2;
                addr_cmp96_reg_2763 <= addr_cmp96_fu_789_p2;
                addr_cmp_reg_2796 <= addr_cmp_fu_816_p2;
                and_ln179_reg_2801 <= and_ln179_fu_894_p2;
                lb1_1_addr_reg_2779 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_2_addr_reg_2768 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_3_addr_reg_2757 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_4_addr_reg_2746 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_5_addr_reg_2735 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_6_addr_reg_2724 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_7_addr_reg_2713 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
                lb1_addr_reg_2790 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                empty_100_fu_272 <= empty_101_fu_276;
                empty_101_fu_276 <= reuse_select109_fu_1182_p3;
                empty_102_fu_280 <= empty_103_fu_284;
                empty_103_fu_284 <= empty_104_fu_288;
                empty_104_fu_288 <= empty_105_fu_292;
                empty_105_fu_292 <= empty_106_fu_296;
                empty_106_fu_296 <= empty_107_fu_300;
                empty_107_fu_300 <= empty_108_fu_304;
                empty_108_fu_304 <= reuse_select103_fu_1193_p3;
                empty_109_fu_308 <= empty_110_fu_312;
                empty_110_fu_312 <= empty_111_fu_316;
                empty_111_fu_316 <= empty_112_fu_320;
                empty_112_fu_320 <= empty_113_fu_324;
                empty_113_fu_324 <= empty_114_fu_328;
                empty_114_fu_328 <= empty_115_fu_332;
                empty_115_fu_332 <= reuse_select97_fu_1204_p3;
                empty_116_fu_336 <= empty_117_fu_340;
                empty_117_fu_340 <= empty_118_fu_344;
                empty_118_fu_344 <= empty_119_fu_348;
                empty_119_fu_348 <= empty_120_fu_352;
                empty_120_fu_352 <= empty_121_fu_356;
                empty_121_fu_356 <= empty_122_fu_360;
                empty_122_fu_360 <= reuse_select91_fu_1215_p3;
                empty_123_fu_364 <= empty_124_fu_368;
                empty_124_fu_368 <= empty_125_fu_372;
                empty_125_fu_372 <= empty_126_fu_376;
                empty_126_fu_376 <= empty_127_fu_380;
                empty_127_fu_380 <= empty_128_fu_384;
                empty_128_fu_384 <= empty_129_fu_388;
                empty_129_fu_388 <= reuse_select85_fu_1226_p3;
                empty_130_fu_392 <= empty_131_fu_396;
                empty_131_fu_396 <= empty_132_fu_400;
                empty_132_fu_400 <= empty_133_fu_404;
                empty_133_fu_404 <= empty_134_fu_408;
                empty_134_fu_408 <= empty_135_fu_412;
                empty_135_fu_412 <= empty_136_fu_416;
                empty_136_fu_416 <= reuse_select_fu_1237_p3;
                empty_137_fu_420 <= empty_138_fu_424;
                empty_138_fu_424 <= empty_139_fu_428;
                empty_139_fu_428 <= empty_140_fu_432;
                empty_140_fu_432 <= empty_141_fu_436;
                empty_141_fu_436 <= empty_142_fu_440;
                empty_142_fu_440 <= empty_143_fu_444;
                empty_143_fu_444 <= s_pix_i_dout;
                empty_72_fu_160 <= empty_81_fu_196;
                empty_73_fu_164 <= empty_88_fu_224;
                empty_74_fu_168 <= empty_95_fu_252;
                empty_75_fu_172 <= empty_102_fu_280;
                empty_76_fu_176 <= empty_109_fu_308;
                empty_77_fu_180 <= empty_116_fu_336;
                empty_78_fu_184 <= empty_123_fu_364;
                empty_79_fu_188 <= empty_130_fu_392;
                empty_80_fu_192 <= empty_137_fu_420;
                empty_81_fu_196 <= empty_82_fu_200;
                empty_82_fu_200 <= empty_83_fu_204;
                empty_83_fu_204 <= empty_84_fu_208;
                empty_84_fu_208 <= empty_85_fu_212;
                empty_85_fu_212 <= empty_86_fu_216;
                empty_86_fu_216 <= empty_87_fu_220;
                empty_87_fu_220 <= reuse_select121_fu_1161_p3;
                empty_88_fu_224 <= empty_89_fu_228;
                empty_89_fu_228 <= empty_90_fu_232;
                empty_90_fu_232 <= empty_91_fu_236;
                empty_91_fu_236 <= empty_92_fu_240;
                empty_92_fu_240 <= empty_93_fu_244;
                empty_93_fu_244 <= empty_94_fu_248;
                empty_94_fu_248 <= reuse_select115_fu_1171_p3;
                empty_95_fu_252 <= empty_96_fu_256;
                empty_96_fu_256 <= empty_97_fu_260;
                empty_97_fu_260 <= empty_98_fu_264;
                empty_98_fu_264 <= empty_99_fu_268;
                empty_99_fu_268 <= empty_100_fu_272;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln144_reg_2709 <= icmp_ln144_fu_727_p2;
                    zext_ln124_cast_reg_2698(8 downto 0) <= zext_ln124_cast_fu_615_p1(8 downto 0);
                    zext_ln125_cast_reg_2703(8 downto 0) <= zext_ln125_cast_fu_619_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_727_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln179_fu_894_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_valid_reg_2805 <= w_valid_fu_910_p2;
            end if;
        end if;
    end process;
    zext_ln124_cast_reg_2698(31 downto 9) <= "00000000000000000000000";
    zext_ln125_cast_reg_2703(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln144_fu_732_p2 <= std_logic_vector(unsigned(t_fu_156) + unsigned(ap_const_lv17_1));
    add_ln201_fu_927_p2 <= std_logic_vector(unsigned(y_fu_152) + unsigned(ap_const_lv32_1));
    addr_cmp102_fu_780_p2 <= "1" when (reuse_addr_reg99_fu_108 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp108_fu_771_p2 <= "1" when (reuse_addr_reg105_fu_100 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp114_fu_762_p2 <= "1" when (reuse_addr_reg111_fu_92 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp120_fu_753_p2 <= "1" when (reuse_addr_reg117_fu_84 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp84_fu_807_p2 <= "1" when (reuse_addr_reg81_fu_132 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp90_fu_798_p2 <= "1" when (reuse_addr_reg87_fu_124 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp96_fu_789_p2 <= "1" when (reuse_addr_reg93_fu_116 = idxprom29_i_fu_738_p1) else "0";
    addr_cmp_fu_816_p2 <= "1" when (reuse_addr_reg_fu_140 = idxprom29_i_fu_738_p1) else "0";
    and_ln179_fu_894_p2 <= (icmp_ln179_fu_872_p2 and icmp_ln179_1_fu_888_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln144_reg_2709, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln144_reg_2709 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln144_reg_2709, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln144_reg_2709 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln144_reg_2709, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln144_reg_2709 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(s_pix_i_empty_n, icmp_ln144_reg_2709, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln144_reg_2709 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln144_fu_727_p2)
    begin
        if (((icmp_ln144_fu_727_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op385_write_state3_assign_proc : process(icmp_ln144_reg_2709, and_ln179_reg_2801)
    begin
                ap_predicate_op385_write_state3 <= ((ap_const_lv1_1 = and_ln179_reg_2801) and (icmp_ln144_reg_2709 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln195_10_fu_1352_p1 <= empty_88_fu_224;
    bitcast_ln195_11_fu_1356_p1 <= empty_89_fu_228;
    bitcast_ln195_12_fu_1360_p1 <= empty_90_fu_232;
    bitcast_ln195_13_fu_1364_p1 <= empty_91_fu_236;
    bitcast_ln195_14_fu_1368_p1 <= empty_92_fu_240;
    bitcast_ln195_15_fu_1372_p1 <= empty_93_fu_244;
    bitcast_ln195_16_fu_1376_p1 <= empty_94_fu_248;
    bitcast_ln195_17_fu_1380_p1 <= reuse_select115_fu_1171_p3;
    bitcast_ln195_18_fu_1384_p1 <= empty_74_fu_168;
    bitcast_ln195_19_fu_1388_p1 <= empty_95_fu_252;
    bitcast_ln195_1_fu_1316_p1 <= empty_81_fu_196;
    bitcast_ln195_20_fu_1392_p1 <= empty_96_fu_256;
    bitcast_ln195_21_fu_1396_p1 <= empty_97_fu_260;
    bitcast_ln195_22_fu_1400_p1 <= empty_98_fu_264;
    bitcast_ln195_23_fu_1404_p1 <= empty_99_fu_268;
    bitcast_ln195_24_fu_1408_p1 <= empty_100_fu_272;
    bitcast_ln195_25_fu_1412_p1 <= empty_101_fu_276;
    bitcast_ln195_26_fu_1416_p1 <= reuse_select109_fu_1182_p3;
    bitcast_ln195_27_fu_1420_p1 <= empty_75_fu_172;
    bitcast_ln195_28_fu_1424_p1 <= empty_102_fu_280;
    bitcast_ln195_29_fu_1428_p1 <= empty_103_fu_284;
    bitcast_ln195_2_fu_1320_p1 <= empty_82_fu_200;
    bitcast_ln195_30_fu_1432_p1 <= empty_104_fu_288;
    bitcast_ln195_31_fu_1436_p1 <= empty_105_fu_292;
    bitcast_ln195_32_fu_1440_p1 <= empty_106_fu_296;
    bitcast_ln195_33_fu_1444_p1 <= empty_107_fu_300;
    bitcast_ln195_34_fu_1448_p1 <= empty_108_fu_304;
    bitcast_ln195_35_fu_1452_p1 <= reuse_select103_fu_1193_p3;
    bitcast_ln195_36_fu_1456_p1 <= empty_76_fu_176;
    bitcast_ln195_37_fu_1460_p1 <= empty_109_fu_308;
    bitcast_ln195_38_fu_1464_p1 <= empty_110_fu_312;
    bitcast_ln195_39_fu_1468_p1 <= empty_111_fu_316;
    bitcast_ln195_3_fu_1324_p1 <= empty_83_fu_204;
    bitcast_ln195_40_fu_1472_p1 <= empty_112_fu_320;
    bitcast_ln195_41_fu_1476_p1 <= empty_113_fu_324;
    bitcast_ln195_42_fu_1480_p1 <= empty_114_fu_328;
    bitcast_ln195_43_fu_1484_p1 <= empty_115_fu_332;
    bitcast_ln195_44_fu_1488_p1 <= reuse_select97_fu_1204_p3;
    bitcast_ln195_45_fu_1492_p1 <= empty_77_fu_180;
    bitcast_ln195_46_fu_1496_p1 <= empty_116_fu_336;
    bitcast_ln195_47_fu_1500_p1 <= empty_117_fu_340;
    bitcast_ln195_48_fu_1504_p1 <= empty_118_fu_344;
    bitcast_ln195_49_fu_1508_p1 <= empty_119_fu_348;
    bitcast_ln195_4_fu_1328_p1 <= empty_84_fu_208;
    bitcast_ln195_50_fu_1512_p1 <= empty_120_fu_352;
    bitcast_ln195_51_fu_1516_p1 <= empty_121_fu_356;
    bitcast_ln195_52_fu_1520_p1 <= empty_122_fu_360;
    bitcast_ln195_53_fu_1524_p1 <= reuse_select91_fu_1215_p3;
    bitcast_ln195_54_fu_1528_p1 <= empty_78_fu_184;
    bitcast_ln195_55_fu_1532_p1 <= empty_123_fu_364;
    bitcast_ln195_56_fu_1536_p1 <= empty_124_fu_368;
    bitcast_ln195_57_fu_1540_p1 <= empty_125_fu_372;
    bitcast_ln195_58_fu_1544_p1 <= empty_126_fu_376;
    bitcast_ln195_59_fu_1548_p1 <= empty_127_fu_380;
    bitcast_ln195_5_fu_1332_p1 <= empty_85_fu_212;
    bitcast_ln195_60_fu_1552_p1 <= empty_128_fu_384;
    bitcast_ln195_61_fu_1556_p1 <= empty_129_fu_388;
    bitcast_ln195_62_fu_1560_p1 <= reuse_select85_fu_1226_p3;
    bitcast_ln195_63_fu_1564_p1 <= empty_79_fu_188;
    bitcast_ln195_64_fu_1568_p1 <= empty_130_fu_392;
    bitcast_ln195_65_fu_1572_p1 <= empty_131_fu_396;
    bitcast_ln195_66_fu_1576_p1 <= empty_132_fu_400;
    bitcast_ln195_67_fu_1580_p1 <= empty_133_fu_404;
    bitcast_ln195_68_fu_1584_p1 <= empty_134_fu_408;
    bitcast_ln195_69_fu_1588_p1 <= empty_135_fu_412;
    bitcast_ln195_6_fu_1336_p1 <= empty_86_fu_216;
    bitcast_ln195_70_fu_1592_p1 <= empty_136_fu_416;
    bitcast_ln195_71_fu_1596_p1 <= reuse_select_fu_1237_p3;
    bitcast_ln195_7_fu_1340_p1 <= empty_87_fu_220;
    bitcast_ln195_8_fu_1344_p1 <= reuse_select121_fu_1161_p3;
    bitcast_ln195_9_fu_1348_p1 <= empty_73_fu_164;
    bitcast_ln195_fu_1312_p1 <= empty_72_fu_160;
    icmp_ln144_fu_727_p2 <= "1" when (t_fu_156 = empty) else "0";
    icmp_ln179_1_fu_888_p2 <= "1" when (signed(tmp_4_fu_878_p4) > signed(ap_const_lv29_0)) else "0";
    icmp_ln179_fu_872_p2 <= "1" when (signed(tmp_3_fu_862_p4) > signed(ap_const_lv29_0)) else "0";
    icmp_ln191_1_fu_905_p2 <= "1" when (signed(x_fu_148) < signed(zext_ln125_cast_reg_2703)) else "0";
    icmp_ln191_fu_900_p2 <= "1" when (signed(y_fu_152) < signed(zext_ln124_cast_reg_2698)) else "0";
    icmp_ln199_fu_922_p2 <= "1" when (x_4_fu_916_p2 = zext_ln125_cast_reg_2703) else "0";
    idxprom29_i_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_148),64));
    lb1_1_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_1_address1 <= lb1_1_addr_reg_2779;

    lb1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_1_ce0 <= ap_const_logic_1;
        else 
            lb1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_1_ce1 <= ap_const_logic_1;
        else 
            lb1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_1_d1 <= reuse_select_fu_1237_p3;

    lb1_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_1_we1 <= ap_const_logic_1;
        else 
            lb1_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_2_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_2_address1 <= lb1_2_addr_reg_2768;

    lb1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_2_ce0 <= ap_const_logic_1;
        else 
            lb1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_2_ce1 <= ap_const_logic_1;
        else 
            lb1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_2_d1 <= reuse_select85_fu_1226_p3;

    lb1_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_2_we1 <= ap_const_logic_1;
        else 
            lb1_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_3_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_3_address1 <= lb1_3_addr_reg_2757;

    lb1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_3_ce0 <= ap_const_logic_1;
        else 
            lb1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_3_ce1 <= ap_const_logic_1;
        else 
            lb1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_3_d1 <= reuse_select91_fu_1215_p3;

    lb1_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_3_we1 <= ap_const_logic_1;
        else 
            lb1_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_4_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_4_address1 <= lb1_4_addr_reg_2746;

    lb1_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_4_ce0 <= ap_const_logic_1;
        else 
            lb1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_4_ce1 <= ap_const_logic_1;
        else 
            lb1_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_4_d1 <= reuse_select97_fu_1204_p3;

    lb1_4_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_4_we1 <= ap_const_logic_1;
        else 
            lb1_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_5_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_5_address1 <= lb1_5_addr_reg_2735;

    lb1_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_5_ce0 <= ap_const_logic_1;
        else 
            lb1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_5_ce1 <= ap_const_logic_1;
        else 
            lb1_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_5_d1 <= reuse_select103_fu_1193_p3;

    lb1_5_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_5_we1 <= ap_const_logic_1;
        else 
            lb1_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_6_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_6_address1 <= lb1_6_addr_reg_2724;

    lb1_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_6_ce0 <= ap_const_logic_1;
        else 
            lb1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_6_ce1 <= ap_const_logic_1;
        else 
            lb1_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_6_d1 <= reuse_select109_fu_1182_p3;

    lb1_6_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_6_we1 <= ap_const_logic_1;
        else 
            lb1_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_7_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_7_address1 <= lb1_7_addr_reg_2713;

    lb1_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_7_ce0 <= ap_const_logic_1;
        else 
            lb1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_7_ce1 <= ap_const_logic_1;
        else 
            lb1_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_7_d1 <= reuse_select115_fu_1171_p3;

    lb1_7_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_7_we1 <= ap_const_logic_1;
        else 
            lb1_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_address0 <= idxprom29_i_fu_738_p1(5 - 1 downto 0);
    lb1_address1 <= lb1_addr_reg_2790;

    lb1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_ce0 <= ap_const_logic_1;
        else 
            lb1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_ce1 <= ap_const_logic_1;
        else 
            lb1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_d1 <= s_pix_i_dout;

    lb1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_we1 <= ap_const_logic_1;
        else 
            lb1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    pix_fu_1153_p1 <= s_pix_i_dout;
    reuse_select103_fu_1193_p3 <= 
        reuse_reg98_fu_112 when (addr_cmp102_reg_2752(0) = '1') else 
        lb1_4_q0;
    reuse_select109_fu_1182_p3 <= 
        reuse_reg104_fu_104 when (addr_cmp108_reg_2741(0) = '1') else 
        lb1_5_q0;
    reuse_select115_fu_1171_p3 <= 
        reuse_reg110_fu_96 when (addr_cmp114_reg_2730(0) = '1') else 
        lb1_6_q0;
    reuse_select121_fu_1161_p3 <= 
        reuse_reg116_fu_88 when (addr_cmp120_reg_2719(0) = '1') else 
        lb1_7_q0;
    reuse_select85_fu_1226_p3 <= 
        reuse_reg80_fu_136 when (addr_cmp84_reg_2785(0) = '1') else 
        lb1_1_q0;
    reuse_select91_fu_1215_p3 <= 
        reuse_reg86_fu_128 when (addr_cmp90_reg_2774(0) = '1') else 
        lb1_2_q0;
    reuse_select97_fu_1204_p3 <= 
        reuse_reg92_fu_120 when (addr_cmp96_reg_2763(0) = '1') else 
        lb1_3_q0;
    reuse_select_fu_1237_p3 <= 
        reuse_reg_fu_144 when (addr_cmp_reg_2796(0) = '1') else 
        lb1_q0;

    s_pix_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln144_reg_2709, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_pix_i_blk_n <= s_pix_i_empty_n;
        else 
            s_pix_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_pix_i_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln144_reg_2709, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln144_reg_2709 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_pix_i_read <= ap_const_logic_1;
        else 
            s_pix_i_read <= ap_const_logic_0;
        end if; 
    end process;


    s_win_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, s_win_i_full_n, ap_predicate_op385_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op385_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_win_i_blk_n <= s_win_i_full_n;
        else 
            s_win_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_win_i_din <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((w_valid_reg_2805 & s_pix_i_dout) & empty_143_fu_444) & empty_142_fu_440) & empty_141_fu_436) & empty_140_fu_432) & empty_139_fu_428) & empty_138_fu_424) & empty_137_fu_420) & empty_80_fu_192) & bitcast_ln195_71_fu_1596_p1) & bitcast_ln195_70_fu_1592_p1) & bitcast_ln195_69_fu_1588_p1) & bitcast_ln195_68_fu_1584_p1) & bitcast_ln195_67_fu_1580_p1) & bitcast_ln195_66_fu_1576_p1) & bitcast_ln195_65_fu_1572_p1) & bitcast_ln195_64_fu_1568_p1) & bitcast_ln195_63_fu_1564_p1) & bitcast_ln195_62_fu_1560_p1) & bitcast_ln195_61_fu_1556_p1) & bitcast_ln195_60_fu_1552_p1) & bitcast_ln195_59_fu_1548_p1) & bitcast_ln195_58_fu_1544_p1) & bitcast_ln195_57_fu_1540_p1) & bitcast_ln195_56_fu_1536_p1) & bitcast_ln195_55_fu_1532_p1) & bitcast_ln195_54_fu_1528_p1) & bitcast_ln195_53_fu_1524_p1) & bitcast_ln195_52_fu_1520_p1) & bitcast_ln195_51_fu_1516_p1) & bitcast_ln195_50_fu_1512_p1) & bitcast_ln195_49_fu_1508_p1) & bitcast_ln195_48_fu_1504_p1) & bitcast_ln195_47_fu_1500_p1) 
    & bitcast_ln195_46_fu_1496_p1) & bitcast_ln195_45_fu_1492_p1) & bitcast_ln195_44_fu_1488_p1) & bitcast_ln195_43_fu_1484_p1) & bitcast_ln195_42_fu_1480_p1) & bitcast_ln195_41_fu_1476_p1) & bitcast_ln195_40_fu_1472_p1) & bitcast_ln195_39_fu_1468_p1) & bitcast_ln195_38_fu_1464_p1) & bitcast_ln195_37_fu_1460_p1) & bitcast_ln195_36_fu_1456_p1) & bitcast_ln195_35_fu_1452_p1) & bitcast_ln195_34_fu_1448_p1) & bitcast_ln195_33_fu_1444_p1) & bitcast_ln195_32_fu_1440_p1) & bitcast_ln195_31_fu_1436_p1) & bitcast_ln195_30_fu_1432_p1) & bitcast_ln195_29_fu_1428_p1) & bitcast_ln195_28_fu_1424_p1) & bitcast_ln195_27_fu_1420_p1) & bitcast_ln195_26_fu_1416_p1) & bitcast_ln195_25_fu_1412_p1) & bitcast_ln195_24_fu_1408_p1) & bitcast_ln195_23_fu_1404_p1) & bitcast_ln195_22_fu_1400_p1) & bitcast_ln195_21_fu_1396_p1) & bitcast_ln195_20_fu_1392_p1) & bitcast_ln195_19_fu_1388_p1) & bitcast_ln195_18_fu_1384_p1) & bitcast_ln195_17_fu_1380_p1) & bitcast_ln195_16_fu_1376_p1) & bitcast_ln195_15_fu_1372_p1) & bitcast_ln195_14_fu_1368_p1) & 
    bitcast_ln195_13_fu_1364_p1) & bitcast_ln195_12_fu_1360_p1) & bitcast_ln195_11_fu_1356_p1) & bitcast_ln195_10_fu_1352_p1) & bitcast_ln195_9_fu_1348_p1) & bitcast_ln195_8_fu_1344_p1) & bitcast_ln195_7_fu_1340_p1) & bitcast_ln195_6_fu_1336_p1) & bitcast_ln195_5_fu_1332_p1) & bitcast_ln195_4_fu_1328_p1) & bitcast_ln195_3_fu_1324_p1) & bitcast_ln195_2_fu_1320_p1) & bitcast_ln195_1_fu_1316_p1) & bitcast_ln195_fu_1312_p1);

    s_win_i_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op385_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op385_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_win_i_write <= ap_const_logic_1;
        else 
            s_win_i_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_862_p4 <= y_fu_152(31 downto 3);
    tmp_4_fu_878_p4 <= x_fu_148(31 downto 3);
    w_valid_fu_910_p2 <= (icmp_ln191_fu_900_p2 and icmp_ln191_1_fu_905_p2);
    x_4_fu_916_p2 <= std_logic_vector(unsigned(x_fu_148) + unsigned(ap_const_lv32_1));
    x_5_fu_933_p3 <= 
        ap_const_lv32_0 when (icmp_ln199_fu_922_p2(0) = '1') else 
        x_4_fu_916_p2;
    y_3_fu_941_p3 <= 
        add_ln201_fu_927_p2 when (icmp_ln199_fu_922_p2(0) = '1') else 
        y_fu_152;
    zext_ln124_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln124),32));
    zext_ln125_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln125),32));
end behav;
