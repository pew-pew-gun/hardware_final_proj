-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_make_win97_Pipeline_win9x9_read_pix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_pix_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_pix_i_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    s_pix_i_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    s_pix_i_empty_n : IN STD_LOGIC;
    s_pix_i_read : OUT STD_LOGIC;
    s_win_i_din : OUT STD_LOGIC_VECTOR (2592 downto 0);
    s_win_i_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    s_win_i_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    s_win_i_full_n : IN STD_LOGIC;
    s_win_i_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (16 downto 0);
    zext_ln125 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln124 : IN STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of srcnn_make_win97_Pipeline_win9x9_read_pix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln145_reg_2713 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln180_reg_2805 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op385_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln145_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal s_pix_i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_win_i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln124_cast_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln124_cast_reg_2702 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln125_cast_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln125_cast_reg_2707 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_7_addr_reg_2717 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp120_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp120_reg_2723 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_6_addr_reg_2728 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp114_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp114_reg_2734 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_5_addr_reg_2739 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp108_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp108_reg_2745 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_4_addr_reg_2750 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp102_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp102_reg_2756 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_3_addr_reg_2761 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp96_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp96_reg_2767 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_2_addr_reg_2772 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp90_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp90_reg_2778 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_1_addr_reg_2783 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp84_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp84_reg_2789 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_addr_reg_2794 : STD_LOGIC_VECTOR (4 downto 0);
    signal addr_cmp_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_2800 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln180_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_valid_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_valid_reg_2809 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb1_ce0 : STD_LOGIC;
    signal lb1_we0 : STD_LOGIC;
    signal lb1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_ce1 : STD_LOGIC;
    signal lb1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_1_ce0 : STD_LOGIC;
    signal lb1_1_we0 : STD_LOGIC;
    signal lb1_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_1_ce1 : STD_LOGIC;
    signal lb1_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_2_ce0 : STD_LOGIC;
    signal lb1_2_we0 : STD_LOGIC;
    signal lb1_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_2_ce1 : STD_LOGIC;
    signal lb1_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_3_ce0 : STD_LOGIC;
    signal lb1_3_we0 : STD_LOGIC;
    signal lb1_3_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_3_ce1 : STD_LOGIC;
    signal lb1_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_4_ce0 : STD_LOGIC;
    signal lb1_4_we0 : STD_LOGIC;
    signal lb1_4_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_4_ce1 : STD_LOGIC;
    signal lb1_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_5_ce0 : STD_LOGIC;
    signal lb1_5_we0 : STD_LOGIC;
    signal lb1_5_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_5_ce1 : STD_LOGIC;
    signal lb1_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_6_ce0 : STD_LOGIC;
    signal lb1_6_we0 : STD_LOGIC;
    signal lb1_6_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_6_ce1 : STD_LOGIC;
    signal lb1_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb1_7_ce0 : STD_LOGIC;
    signal lb1_7_we0 : STD_LOGIC;
    signal lb1_7_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lb1_7_ce1 : STD_LOGIC;
    signal lb1_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxprom29_i_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg117_fu_64 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg116_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select115_fu_1175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg111_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg110_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select109_fu_1186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg105_fu_80 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg104_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select103_fu_1197_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg99_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg98_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select97_fu_1208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg93_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg92_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select91_fu_1219_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg87_fu_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg86_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select85_fu_1230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg81_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg80_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_fu_1241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal pix_fu_1157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_937_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_fu_945_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_136 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln145_fu_736_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_116_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_117_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_118_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_119_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_120_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_121_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_122_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_123_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_124_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_125_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_126_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_127_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_128_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_129_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_130_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_131_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select121_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_132_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_133_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_134_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_135_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_136_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_137_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_138_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_139_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_140_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_141_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_142_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_143_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_144_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_145_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_146_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_147_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_148_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_149_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_150_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_151_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_152_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_153_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_154_fu_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_155_fu_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_156_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_157_fu_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_158_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_159_fu_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_160_fu_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_161_fu_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_162_fu_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_163_fu_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_164_fu_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_165_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_166_fu_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_167_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_168_fu_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_169_fu_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_170_fu_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_171_fu_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_172_fu_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_173_fu_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_174_fu_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_175_fu_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_176_fu_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_177_fu_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_178_fu_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_179_fu_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_180_fu_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_181_fu_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_182_fu_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_183_fu_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_184_fu_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_185_fu_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_186_fu_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_187_fu_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_866_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_882_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln180_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_1_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln192_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln192_1_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_4_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln200_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln202_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_71_fu_1600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_70_fu_1596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_69_fu_1592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_68_fu_1588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_67_fu_1584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_66_fu_1580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_65_fu_1576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_64_fu_1572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_63_fu_1568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_62_fu_1564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_61_fu_1560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_60_fu_1556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_59_fu_1552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_58_fu_1548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_57_fu_1544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_56_fu_1540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_55_fu_1536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_54_fu_1532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_53_fu_1528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_52_fu_1524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_51_fu_1520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_50_fu_1516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_49_fu_1512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_48_fu_1508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_47_fu_1504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_46_fu_1500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_45_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_44_fu_1492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_43_fu_1488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_42_fu_1484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_41_fu_1480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_40_fu_1476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_39_fu_1472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_38_fu_1468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_37_fu_1464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_36_fu_1460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_35_fu_1456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_34_fu_1452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_33_fu_1448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_32_fu_1444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_31_fu_1440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_30_fu_1436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_29_fu_1432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_28_fu_1428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_27_fu_1424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_26_fu_1420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_25_fu_1416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_24_fu_1412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_23_fu_1408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_22_fu_1404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_21_fu_1400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_20_fu_1396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_19_fu_1392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_18_fu_1388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_17_fu_1384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_16_fu_1380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_15_fu_1376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_14_fu_1372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_13_fu_1368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_12_fu_1364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_11_fu_1360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_10_fu_1356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_9_fu_1352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_8_fu_1348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_7_fu_1344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_6_fu_1340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_5_fu_1336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_4_fu_1332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_3_fu_1328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_2_fu_1324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_1_fu_1320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln196_fu_1316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    lb1_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_addr_reg_2794,
        ce0 => lb1_ce0,
        we0 => lb1_we0,
        d0 => lb1_d0,
        address1 => lb1_address1,
        ce1 => lb1_ce1,
        q1 => lb1_q1);

    lb1_1_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_1_addr_reg_2783,
        ce0 => lb1_1_ce0,
        we0 => lb1_1_we0,
        d0 => reuse_select_fu_1241_p3,
        address1 => lb1_1_address1,
        ce1 => lb1_1_ce1,
        q1 => lb1_1_q1);

    lb1_2_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_2_addr_reg_2772,
        ce0 => lb1_2_ce0,
        we0 => lb1_2_we0,
        d0 => reuse_select85_fu_1230_p3,
        address1 => lb1_2_address1,
        ce1 => lb1_2_ce1,
        q1 => lb1_2_q1);

    lb1_3_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_3_addr_reg_2761,
        ce0 => lb1_3_ce0,
        we0 => lb1_3_we0,
        d0 => reuse_select91_fu_1219_p3,
        address1 => lb1_3_address1,
        ce1 => lb1_3_ce1,
        q1 => lb1_3_q1);

    lb1_4_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_4_addr_reg_2750,
        ce0 => lb1_4_ce0,
        we0 => lb1_4_we0,
        d0 => reuse_select97_fu_1208_p3,
        address1 => lb1_4_address1,
        ce1 => lb1_4_ce1,
        q1 => lb1_4_q1);

    lb1_5_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_5_addr_reg_2739,
        ce0 => lb1_5_ce0,
        we0 => lb1_5_we0,
        d0 => reuse_select103_fu_1197_p3,
        address1 => lb1_5_address1,
        ce1 => lb1_5_ce1,
        q1 => lb1_5_q1);

    lb1_6_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_6_addr_reg_2728,
        ce0 => lb1_6_ce0,
        we0 => lb1_6_we0,
        d0 => reuse_select109_fu_1186_p3,
        address1 => lb1_6_address1,
        ce1 => lb1_6_ce1,
        q1 => lb1_6_q1);

    lb1_7_U : component srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lb1_7_addr_reg_2717,
        ce0 => lb1_7_ce0,
        we0 => lb1_7_we0,
        d0 => reuse_select115_fu_1175_p3,
        address1 => lb1_7_address1,
        ce1 => lb1_7_ce1,
        q1 => lb1_7_q1);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    reuse_addr_reg105_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg105_fu_80 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg105_fu_80 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg111_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg111_fu_72 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg111_fu_72 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg117_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg117_fu_64 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg117_fu_64 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg81_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg81_fu_112 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg81_fu_112 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg87_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg87_fu_104 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg87_fu_104 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg93_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg93_fu_96 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg93_fu_96 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg99_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg99_fu_88 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg99_fu_88 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_120 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reuse_addr_reg_fu_120 <= idxprom29_i_fu_742_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg104_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg104_fu_84 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg104_fu_84 <= reuse_select103_fu_1197_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg110_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg110_fu_76 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg110_fu_76 <= reuse_select109_fu_1186_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg116_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg116_fu_68 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg116_fu_68 <= reuse_select115_fu_1175_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg80_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg80_fu_116 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg80_fu_116 <= reuse_select_fu_1241_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg86_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg86_fu_108 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg86_fu_108 <= reuse_select85_fu_1230_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg92_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg92_fu_100 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg92_fu_100 <= reuse_select91_fu_1219_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg98_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg98_fu_92 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg98_fu_92 <= reuse_select97_fu_1208_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg_fu_124 <= ap_const_lv32_0;
                elsif (((icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg_fu_124 <= pix_fu_1157_p1;
                end if;
            end if; 
        end if;
    end process;

    t_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_136 <= ap_const_lv17_0;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t_fu_136 <= add_ln145_fu_736_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_128 <= ap_const_lv32_0;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_128 <= x_5_fu_937_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_132 <= ap_const_lv32_0;
                elsif (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_132 <= y_3_fu_945_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                addr_cmp102_reg_2756 <= addr_cmp102_fu_784_p2;
                addr_cmp108_reg_2745 <= addr_cmp108_fu_775_p2;
                addr_cmp114_reg_2734 <= addr_cmp114_fu_766_p2;
                addr_cmp120_reg_2723 <= addr_cmp120_fu_757_p2;
                addr_cmp84_reg_2789 <= addr_cmp84_fu_811_p2;
                addr_cmp90_reg_2778 <= addr_cmp90_fu_802_p2;
                addr_cmp96_reg_2767 <= addr_cmp96_fu_793_p2;
                addr_cmp_reg_2800 <= addr_cmp_fu_820_p2;
                and_ln180_reg_2805 <= and_ln180_fu_898_p2;
                lb1_1_addr_reg_2783 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_2_addr_reg_2772 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_3_addr_reg_2761 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_4_addr_reg_2750 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_5_addr_reg_2739 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_6_addr_reg_2728 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_7_addr_reg_2717 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
                lb1_addr_reg_2794 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                empty_116_fu_140 <= empty_125_fu_176;
                empty_117_fu_144 <= empty_132_fu_204;
                empty_118_fu_148 <= empty_139_fu_232;
                empty_119_fu_152 <= empty_146_fu_260;
                empty_120_fu_156 <= empty_153_fu_288;
                empty_121_fu_160 <= empty_160_fu_316;
                empty_122_fu_164 <= empty_167_fu_344;
                empty_123_fu_168 <= empty_174_fu_372;
                empty_124_fu_172 <= empty_181_fu_400;
                empty_125_fu_176 <= empty_126_fu_180;
                empty_126_fu_180 <= empty_127_fu_184;
                empty_127_fu_184 <= empty_128_fu_188;
                empty_128_fu_188 <= empty_129_fu_192;
                empty_129_fu_192 <= empty_130_fu_196;
                empty_130_fu_196 <= empty_131_fu_200;
                empty_131_fu_200 <= reuse_select121_fu_1165_p3;
                empty_132_fu_204 <= empty_133_fu_208;
                empty_133_fu_208 <= empty_134_fu_212;
                empty_134_fu_212 <= empty_135_fu_216;
                empty_135_fu_216 <= empty_136_fu_220;
                empty_136_fu_220 <= empty_137_fu_224;
                empty_137_fu_224 <= empty_138_fu_228;
                empty_138_fu_228 <= reuse_select115_fu_1175_p3;
                empty_139_fu_232 <= empty_140_fu_236;
                empty_140_fu_236 <= empty_141_fu_240;
                empty_141_fu_240 <= empty_142_fu_244;
                empty_142_fu_244 <= empty_143_fu_248;
                empty_143_fu_248 <= empty_144_fu_252;
                empty_144_fu_252 <= empty_145_fu_256;
                empty_145_fu_256 <= reuse_select109_fu_1186_p3;
                empty_146_fu_260 <= empty_147_fu_264;
                empty_147_fu_264 <= empty_148_fu_268;
                empty_148_fu_268 <= empty_149_fu_272;
                empty_149_fu_272 <= empty_150_fu_276;
                empty_150_fu_276 <= empty_151_fu_280;
                empty_151_fu_280 <= empty_152_fu_284;
                empty_152_fu_284 <= reuse_select103_fu_1197_p3;
                empty_153_fu_288 <= empty_154_fu_292;
                empty_154_fu_292 <= empty_155_fu_296;
                empty_155_fu_296 <= empty_156_fu_300;
                empty_156_fu_300 <= empty_157_fu_304;
                empty_157_fu_304 <= empty_158_fu_308;
                empty_158_fu_308 <= empty_159_fu_312;
                empty_159_fu_312 <= reuse_select97_fu_1208_p3;
                empty_160_fu_316 <= empty_161_fu_320;
                empty_161_fu_320 <= empty_162_fu_324;
                empty_162_fu_324 <= empty_163_fu_328;
                empty_163_fu_328 <= empty_164_fu_332;
                empty_164_fu_332 <= empty_165_fu_336;
                empty_165_fu_336 <= empty_166_fu_340;
                empty_166_fu_340 <= reuse_select91_fu_1219_p3;
                empty_167_fu_344 <= empty_168_fu_348;
                empty_168_fu_348 <= empty_169_fu_352;
                empty_169_fu_352 <= empty_170_fu_356;
                empty_170_fu_356 <= empty_171_fu_360;
                empty_171_fu_360 <= empty_172_fu_364;
                empty_172_fu_364 <= empty_173_fu_368;
                empty_173_fu_368 <= reuse_select85_fu_1230_p3;
                empty_174_fu_372 <= empty_175_fu_376;
                empty_175_fu_376 <= empty_176_fu_380;
                empty_176_fu_380 <= empty_177_fu_384;
                empty_177_fu_384 <= empty_178_fu_388;
                empty_178_fu_388 <= empty_179_fu_392;
                empty_179_fu_392 <= empty_180_fu_396;
                empty_180_fu_396 <= reuse_select_fu_1241_p3;
                empty_181_fu_400 <= empty_182_fu_404;
                empty_182_fu_404 <= empty_183_fu_408;
                empty_183_fu_408 <= empty_184_fu_412;
                empty_184_fu_412 <= empty_185_fu_416;
                empty_185_fu_416 <= empty_186_fu_420;
                empty_186_fu_420 <= empty_187_fu_424;
                empty_187_fu_424 <= s_pix_i_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln145_reg_2713 <= icmp_ln145_fu_731_p2;
                    zext_ln124_cast_reg_2702(8 downto 0) <= zext_ln124_cast_fu_619_p1(8 downto 0);
                    zext_ln125_cast_reg_2707(8 downto 0) <= zext_ln125_cast_fu_623_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_731_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln180_fu_898_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_valid_reg_2809 <= w_valid_fu_914_p2;
            end if;
        end if;
    end process;
    zext_ln124_cast_reg_2702(31 downto 9) <= "00000000000000000000000";
    zext_ln125_cast_reg_2707(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln145_fu_736_p2 <= std_logic_vector(unsigned(t_fu_136) + unsigned(ap_const_lv17_1));
    add_ln202_fu_931_p2 <= std_logic_vector(unsigned(y_fu_132) + unsigned(ap_const_lv32_1));
    addr_cmp102_fu_784_p2 <= "1" when (reuse_addr_reg99_fu_88 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp108_fu_775_p2 <= "1" when (reuse_addr_reg105_fu_80 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp114_fu_766_p2 <= "1" when (reuse_addr_reg111_fu_72 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp120_fu_757_p2 <= "1" when (reuse_addr_reg117_fu_64 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp84_fu_811_p2 <= "1" when (reuse_addr_reg81_fu_112 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp90_fu_802_p2 <= "1" when (reuse_addr_reg87_fu_104 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp96_fu_793_p2 <= "1" when (reuse_addr_reg93_fu_96 = idxprom29_i_fu_742_p1) else "0";
    addr_cmp_fu_820_p2 <= "1" when (reuse_addr_reg_fu_120 = idxprom29_i_fu_742_p1) else "0";
    and_ln180_fu_898_p2 <= (icmp_ln180_fu_876_p2 and icmp_ln180_1_fu_892_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln145_reg_2713, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln145_reg_2713 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln145_reg_2713, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln145_reg_2713 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln145_reg_2713, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln145_reg_2713 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(s_pix_i_empty_n, icmp_ln145_reg_2713, s_win_i_full_n, ap_predicate_op385_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op385_write_state3 = ap_const_boolean_1) and (s_win_i_full_n = ap_const_logic_0)) or ((icmp_ln145_reg_2713 = ap_const_lv1_0) and (s_pix_i_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln145_fu_731_p2)
    begin
        if (((icmp_ln145_fu_731_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op385_write_state3_assign_proc : process(icmp_ln145_reg_2713, and_ln180_reg_2805)
    begin
                ap_predicate_op385_write_state3 <= ((ap_const_lv1_1 = and_ln180_reg_2805) and (icmp_ln145_reg_2713 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln196_10_fu_1356_p1 <= empty_132_fu_204;
    bitcast_ln196_11_fu_1360_p1 <= empty_133_fu_208;
    bitcast_ln196_12_fu_1364_p1 <= empty_134_fu_212;
    bitcast_ln196_13_fu_1368_p1 <= empty_135_fu_216;
    bitcast_ln196_14_fu_1372_p1 <= empty_136_fu_220;
    bitcast_ln196_15_fu_1376_p1 <= empty_137_fu_224;
    bitcast_ln196_16_fu_1380_p1 <= empty_138_fu_228;
    bitcast_ln196_17_fu_1384_p1 <= reuse_select115_fu_1175_p3;
    bitcast_ln196_18_fu_1388_p1 <= empty_118_fu_148;
    bitcast_ln196_19_fu_1392_p1 <= empty_139_fu_232;
    bitcast_ln196_1_fu_1320_p1 <= empty_125_fu_176;
    bitcast_ln196_20_fu_1396_p1 <= empty_140_fu_236;
    bitcast_ln196_21_fu_1400_p1 <= empty_141_fu_240;
    bitcast_ln196_22_fu_1404_p1 <= empty_142_fu_244;
    bitcast_ln196_23_fu_1408_p1 <= empty_143_fu_248;
    bitcast_ln196_24_fu_1412_p1 <= empty_144_fu_252;
    bitcast_ln196_25_fu_1416_p1 <= empty_145_fu_256;
    bitcast_ln196_26_fu_1420_p1 <= reuse_select109_fu_1186_p3;
    bitcast_ln196_27_fu_1424_p1 <= empty_119_fu_152;
    bitcast_ln196_28_fu_1428_p1 <= empty_146_fu_260;
    bitcast_ln196_29_fu_1432_p1 <= empty_147_fu_264;
    bitcast_ln196_2_fu_1324_p1 <= empty_126_fu_180;
    bitcast_ln196_30_fu_1436_p1 <= empty_148_fu_268;
    bitcast_ln196_31_fu_1440_p1 <= empty_149_fu_272;
    bitcast_ln196_32_fu_1444_p1 <= empty_150_fu_276;
    bitcast_ln196_33_fu_1448_p1 <= empty_151_fu_280;
    bitcast_ln196_34_fu_1452_p1 <= empty_152_fu_284;
    bitcast_ln196_35_fu_1456_p1 <= reuse_select103_fu_1197_p3;
    bitcast_ln196_36_fu_1460_p1 <= empty_120_fu_156;
    bitcast_ln196_37_fu_1464_p1 <= empty_153_fu_288;
    bitcast_ln196_38_fu_1468_p1 <= empty_154_fu_292;
    bitcast_ln196_39_fu_1472_p1 <= empty_155_fu_296;
    bitcast_ln196_3_fu_1328_p1 <= empty_127_fu_184;
    bitcast_ln196_40_fu_1476_p1 <= empty_156_fu_300;
    bitcast_ln196_41_fu_1480_p1 <= empty_157_fu_304;
    bitcast_ln196_42_fu_1484_p1 <= empty_158_fu_308;
    bitcast_ln196_43_fu_1488_p1 <= empty_159_fu_312;
    bitcast_ln196_44_fu_1492_p1 <= reuse_select97_fu_1208_p3;
    bitcast_ln196_45_fu_1496_p1 <= empty_121_fu_160;
    bitcast_ln196_46_fu_1500_p1 <= empty_160_fu_316;
    bitcast_ln196_47_fu_1504_p1 <= empty_161_fu_320;
    bitcast_ln196_48_fu_1508_p1 <= empty_162_fu_324;
    bitcast_ln196_49_fu_1512_p1 <= empty_163_fu_328;
    bitcast_ln196_4_fu_1332_p1 <= empty_128_fu_188;
    bitcast_ln196_50_fu_1516_p1 <= empty_164_fu_332;
    bitcast_ln196_51_fu_1520_p1 <= empty_165_fu_336;
    bitcast_ln196_52_fu_1524_p1 <= empty_166_fu_340;
    bitcast_ln196_53_fu_1528_p1 <= reuse_select91_fu_1219_p3;
    bitcast_ln196_54_fu_1532_p1 <= empty_122_fu_164;
    bitcast_ln196_55_fu_1536_p1 <= empty_167_fu_344;
    bitcast_ln196_56_fu_1540_p1 <= empty_168_fu_348;
    bitcast_ln196_57_fu_1544_p1 <= empty_169_fu_352;
    bitcast_ln196_58_fu_1548_p1 <= empty_170_fu_356;
    bitcast_ln196_59_fu_1552_p1 <= empty_171_fu_360;
    bitcast_ln196_5_fu_1336_p1 <= empty_129_fu_192;
    bitcast_ln196_60_fu_1556_p1 <= empty_172_fu_364;
    bitcast_ln196_61_fu_1560_p1 <= empty_173_fu_368;
    bitcast_ln196_62_fu_1564_p1 <= reuse_select85_fu_1230_p3;
    bitcast_ln196_63_fu_1568_p1 <= empty_123_fu_168;
    bitcast_ln196_64_fu_1572_p1 <= empty_174_fu_372;
    bitcast_ln196_65_fu_1576_p1 <= empty_175_fu_376;
    bitcast_ln196_66_fu_1580_p1 <= empty_176_fu_380;
    bitcast_ln196_67_fu_1584_p1 <= empty_177_fu_384;
    bitcast_ln196_68_fu_1588_p1 <= empty_178_fu_388;
    bitcast_ln196_69_fu_1592_p1 <= empty_179_fu_392;
    bitcast_ln196_6_fu_1340_p1 <= empty_130_fu_196;
    bitcast_ln196_70_fu_1596_p1 <= empty_180_fu_396;
    bitcast_ln196_71_fu_1600_p1 <= reuse_select_fu_1241_p3;
    bitcast_ln196_7_fu_1344_p1 <= empty_131_fu_200;
    bitcast_ln196_8_fu_1348_p1 <= reuse_select121_fu_1165_p3;
    bitcast_ln196_9_fu_1352_p1 <= empty_117_fu_144;
    bitcast_ln196_fu_1316_p1 <= empty_116_fu_140;
    icmp_ln145_fu_731_p2 <= "1" when (t_fu_136 = empty) else "0";
    icmp_ln180_1_fu_892_p2 <= "1" when (signed(tmp_4_fu_882_p4) > signed(ap_const_lv29_0)) else "0";
    icmp_ln180_fu_876_p2 <= "1" when (signed(tmp_3_fu_866_p4) > signed(ap_const_lv29_0)) else "0";
    icmp_ln192_1_fu_909_p2 <= "1" when (signed(x_fu_128) < signed(zext_ln125_cast_reg_2707)) else "0";
    icmp_ln192_fu_904_p2 <= "1" when (signed(y_fu_132) < signed(zext_ln124_cast_reg_2702)) else "0";
    icmp_ln200_fu_926_p2 <= "1" when (x_4_fu_920_p2 = zext_ln125_cast_reg_2707) else "0";
    idxprom29_i_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_128),64));
    lb1_1_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_1_ce0 <= ap_const_logic_1;
        else 
            lb1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_1_ce1 <= ap_const_logic_1;
        else 
            lb1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_1_we0 <= ap_const_logic_1;
        else 
            lb1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_2_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_2_ce0 <= ap_const_logic_1;
        else 
            lb1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_2_ce1 <= ap_const_logic_1;
        else 
            lb1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_2_we0 <= ap_const_logic_1;
        else 
            lb1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_3_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_3_ce0 <= ap_const_logic_1;
        else 
            lb1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_3_ce1 <= ap_const_logic_1;
        else 
            lb1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_3_we0 <= ap_const_logic_1;
        else 
            lb1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_4_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_4_ce0 <= ap_const_logic_1;
        else 
            lb1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_4_ce1 <= ap_const_logic_1;
        else 
            lb1_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_4_we0 <= ap_const_logic_1;
        else 
            lb1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_5_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_5_ce0 <= ap_const_logic_1;
        else 
            lb1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_5_ce1 <= ap_const_logic_1;
        else 
            lb1_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_5_we0 <= ap_const_logic_1;
        else 
            lb1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_6_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_6_ce0 <= ap_const_logic_1;
        else 
            lb1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_6_ce1 <= ap_const_logic_1;
        else 
            lb1_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_6_we0 <= ap_const_logic_1;
        else 
            lb1_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_7_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_7_ce0 <= ap_const_logic_1;
        else 
            lb1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_7_ce1 <= ap_const_logic_1;
        else 
            lb1_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_7_we0 <= ap_const_logic_1;
        else 
            lb1_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_address1 <= idxprom29_i_fu_742_p1(5 - 1 downto 0);

    lb1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_ce0 <= ap_const_logic_1;
        else 
            lb1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lb1_ce1 <= ap_const_logic_1;
        else 
            lb1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lb1_d0 <= s_pix_i_dout;

    lb1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lb1_we0 <= ap_const_logic_1;
        else 
            lb1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pix_fu_1157_p1 <= s_pix_i_dout;
    reuse_select103_fu_1197_p3 <= 
        reuse_reg98_fu_92 when (addr_cmp102_reg_2756(0) = '1') else 
        lb1_4_q1;
    reuse_select109_fu_1186_p3 <= 
        reuse_reg104_fu_84 when (addr_cmp108_reg_2745(0) = '1') else 
        lb1_5_q1;
    reuse_select115_fu_1175_p3 <= 
        reuse_reg110_fu_76 when (addr_cmp114_reg_2734(0) = '1') else 
        lb1_6_q1;
    reuse_select121_fu_1165_p3 <= 
        reuse_reg116_fu_68 when (addr_cmp120_reg_2723(0) = '1') else 
        lb1_7_q1;
    reuse_select85_fu_1230_p3 <= 
        reuse_reg80_fu_116 when (addr_cmp84_reg_2789(0) = '1') else 
        lb1_1_q1;
    reuse_select91_fu_1219_p3 <= 
        reuse_reg86_fu_108 when (addr_cmp90_reg_2778(0) = '1') else 
        lb1_2_q1;
    reuse_select97_fu_1208_p3 <= 
        reuse_reg92_fu_100 when (addr_cmp96_reg_2767(0) = '1') else 
        lb1_3_q1;
    reuse_select_fu_1241_p3 <= 
        reuse_reg_fu_124 when (addr_cmp_reg_2800(0) = '1') else 
        lb1_q1;

    s_pix_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, s_pix_i_empty_n, icmp_ln145_reg_2713, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_pix_i_blk_n <= s_pix_i_empty_n;
        else 
            s_pix_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_pix_i_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_2713, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_2713 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_pix_i_read <= ap_const_logic_1;
        else 
            s_pix_i_read <= ap_const_logic_0;
        end if; 
    end process;


    s_win_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, s_win_i_full_n, ap_predicate_op385_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op385_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_win_i_blk_n <= s_win_i_full_n;
        else 
            s_win_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_win_i_din <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((w_valid_reg_2809 & s_pix_i_dout) & empty_187_fu_424) & empty_186_fu_420) & empty_185_fu_416) & empty_184_fu_412) & empty_183_fu_408) & empty_182_fu_404) & empty_181_fu_400) & empty_124_fu_172) & bitcast_ln196_71_fu_1600_p1) & bitcast_ln196_70_fu_1596_p1) & bitcast_ln196_69_fu_1592_p1) & bitcast_ln196_68_fu_1588_p1) & bitcast_ln196_67_fu_1584_p1) & bitcast_ln196_66_fu_1580_p1) & bitcast_ln196_65_fu_1576_p1) & bitcast_ln196_64_fu_1572_p1) & bitcast_ln196_63_fu_1568_p1) & bitcast_ln196_62_fu_1564_p1) & bitcast_ln196_61_fu_1560_p1) & bitcast_ln196_60_fu_1556_p1) & bitcast_ln196_59_fu_1552_p1) & bitcast_ln196_58_fu_1548_p1) & bitcast_ln196_57_fu_1544_p1) & bitcast_ln196_56_fu_1540_p1) & bitcast_ln196_55_fu_1536_p1) & bitcast_ln196_54_fu_1532_p1) & bitcast_ln196_53_fu_1528_p1) & bitcast_ln196_52_fu_1524_p1) & bitcast_ln196_51_fu_1520_p1) & bitcast_ln196_50_fu_1516_p1) & bitcast_ln196_49_fu_1512_p1) & bitcast_ln196_48_fu_1508_p1) & bitcast_ln196_47_fu_1504_p1) 
    & bitcast_ln196_46_fu_1500_p1) & bitcast_ln196_45_fu_1496_p1) & bitcast_ln196_44_fu_1492_p1) & bitcast_ln196_43_fu_1488_p1) & bitcast_ln196_42_fu_1484_p1) & bitcast_ln196_41_fu_1480_p1) & bitcast_ln196_40_fu_1476_p1) & bitcast_ln196_39_fu_1472_p1) & bitcast_ln196_38_fu_1468_p1) & bitcast_ln196_37_fu_1464_p1) & bitcast_ln196_36_fu_1460_p1) & bitcast_ln196_35_fu_1456_p1) & bitcast_ln196_34_fu_1452_p1) & bitcast_ln196_33_fu_1448_p1) & bitcast_ln196_32_fu_1444_p1) & bitcast_ln196_31_fu_1440_p1) & bitcast_ln196_30_fu_1436_p1) & bitcast_ln196_29_fu_1432_p1) & bitcast_ln196_28_fu_1428_p1) & bitcast_ln196_27_fu_1424_p1) & bitcast_ln196_26_fu_1420_p1) & bitcast_ln196_25_fu_1416_p1) & bitcast_ln196_24_fu_1412_p1) & bitcast_ln196_23_fu_1408_p1) & bitcast_ln196_22_fu_1404_p1) & bitcast_ln196_21_fu_1400_p1) & bitcast_ln196_20_fu_1396_p1) & bitcast_ln196_19_fu_1392_p1) & bitcast_ln196_18_fu_1388_p1) & bitcast_ln196_17_fu_1384_p1) & bitcast_ln196_16_fu_1380_p1) & bitcast_ln196_15_fu_1376_p1) & bitcast_ln196_14_fu_1372_p1) & 
    bitcast_ln196_13_fu_1368_p1) & bitcast_ln196_12_fu_1364_p1) & bitcast_ln196_11_fu_1360_p1) & bitcast_ln196_10_fu_1356_p1) & bitcast_ln196_9_fu_1352_p1) & bitcast_ln196_8_fu_1348_p1) & bitcast_ln196_7_fu_1344_p1) & bitcast_ln196_6_fu_1340_p1) & bitcast_ln196_5_fu_1336_p1) & bitcast_ln196_4_fu_1332_p1) & bitcast_ln196_3_fu_1328_p1) & bitcast_ln196_2_fu_1324_p1) & bitcast_ln196_1_fu_1320_p1) & bitcast_ln196_fu_1316_p1);

    s_win_i_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op385_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op385_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_win_i_write <= ap_const_logic_1;
        else 
            s_win_i_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_866_p4 <= y_fu_132(31 downto 3);
    tmp_4_fu_882_p4 <= x_fu_128(31 downto 3);
    w_valid_fu_914_p2 <= (icmp_ln192_fu_904_p2 and icmp_ln192_1_fu_909_p2);
    x_4_fu_920_p2 <= std_logic_vector(unsigned(x_fu_128) + unsigned(ap_const_lv32_1));
    x_5_fu_937_p3 <= 
        ap_const_lv32_0 when (icmp_ln200_fu_926_p2(0) = '1') else 
        x_4_fu_920_p2;
    y_3_fu_945_p3 <= 
        add_ln202_fu_931_p2 when (icmp_ln200_fu_926_p2(0) = '1') else 
        y_fu_132;
    zext_ln124_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln124),32));
    zext_ln125_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln125),32));
end behav;
