-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_srcnn_Pipeline_CopyW3_inft_CopyW3_ky_CopyW3_kx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_w3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_w3_AWREADY : IN STD_LOGIC;
    m_axi_gmem_w3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_w3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_WVALID : OUT STD_LOGIC;
    m_axi_gmem_w3_WREADY : IN STD_LOGIC;
    m_axi_gmem_w3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_WLAST : OUT STD_LOGIC;
    m_axi_gmem_w3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_w3_ARREADY : IN STD_LOGIC;
    m_axi_gmem_w3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_w3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_RVALID : IN STD_LOGIC;
    m_axi_gmem_w3_RREADY : OUT STD_LOGIC;
    m_axi_gmem_w3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w3_RLAST : IN STD_LOGIC;
    m_axi_gmem_w3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_w3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w3_BVALID : IN STD_LOGIC;
    m_axi_gmem_w3_BREADY : OUT STD_LOGIC;
    m_axi_gmem_w3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln399 : IN STD_LOGIC_VECTOR (61 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_srcnn_Pipeline_CopyW3_inft_CopyW3_ky_CopyW3_kx is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln399_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln399_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_w3_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln402_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln402_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_w3_addr_read_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln407_3_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kx_fu_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln405_fu_490_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ky_fu_116 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln402_1_fu_421_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_fu_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln402_2_fu_317_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i3_fu_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln399_1_fu_352_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten19_fu_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln399_1_fu_285_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten19_load : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln399_fu_359_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln407_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln402_1_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln399_fu_339_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln399_mid2_v_fu_363_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_fu_373_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln405_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln399_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln399_fu_345_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln399_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln402_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln402_fu_402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln402_fu_381_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln407_fu_429_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln407_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_443_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln407_1_fu_439_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln402_fu_413_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln407_1_fu_451_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln407_2_fu_457_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln407_2_fu_461_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i3_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i3_fu_124 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i3_fu_124 <= select_ln399_1_fu_352_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln399_fu_279_p2 = ap_const_lv1_0))) then 
                    indvar_flatten19_fu_128 <= add_ln399_1_fu_285_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_128 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_120 <= ap_const_lv6_0;
                elsif (((icmp_ln399_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten6_fu_120 <= select_ln402_2_fu_317_p3;
                end if;
            end if; 
        end if;
    end process;

    kx_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    kx_fu_112 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    kx_fu_112 <= add_ln405_fu_490_p2;
                end if;
            end if; 
        end if;
    end process;

    ky_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ky_fu_116 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    ky_fu_116 <= select_ln402_1_fu_421_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln399_reg_551 <= icmp_ln399_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln399_reg_551 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_w3_addr_read_reg_563 <= m_axi_gmem_w3_RDATA;
                icmp_ln402_reg_555 <= icmp_ln402_fu_305_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln399_1_fu_285_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten19_load) + unsigned(ap_const_lv10_1));
    add_ln399_fu_339_p2 <= std_logic_vector(unsigned(i3_fu_124) + unsigned(ap_const_lv6_1));
    add_ln402_1_fu_311_p2 <= std_logic_vector(unsigned(indvar_flatten6_fu_120) + unsigned(ap_const_lv6_1));
    add_ln402_fu_402_p2 <= std_logic_vector(unsigned(select_ln399_fu_345_p3) + unsigned(ap_const_lv3_1));
    add_ln405_fu_490_p2 <= std_logic_vector(unsigned(select_ln402_fu_413_p3) + unsigned(ap_const_lv3_1));
    add_ln407_1_fu_451_p2 <= std_logic_vector(unsigned(p_shl_fu_443_p3) + unsigned(zext_ln407_1_fu_439_p1));
    add_ln407_2_fu_461_p2 <= std_logic_vector(unsigned(add_ln407_1_fu_451_p2) + unsigned(zext_ln407_2_fu_457_p1));
    add_ln407_fu_433_p2 <= std_logic_vector(unsigned(zext_ln402_fu_381_p1) + unsigned(zext_ln407_fu_429_p1));
    and_ln399_fu_396_p2 <= (xor_ln399_fu_385_p2 and icmp_ln405_fu_390_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_w3_RVALID, icmp_ln399_reg_551)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln399_reg_551 = ap_const_lv1_0) and (m_axi_gmem_w3_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_w3_RVALID, icmp_ln399_reg_551)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln399_reg_551 = ap_const_lv1_0) and (m_axi_gmem_w3_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem_w3_RVALID, icmp_ln399_reg_551)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln399_reg_551 = ap_const_lv1_0) and (m_axi_gmem_w3_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln399_fu_279_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln399_fu_279_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln399_reg_551, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln399_reg_551 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten19_fu_128)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten19_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten19_load <= indvar_flatten19_fu_128;
        end if; 
    end process;

    bitcast_ln407_fu_479_p1 <= gmem_w3_addr_read_reg_563;

    gmem_w3_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_w3_RVALID, icmp_ln399_reg_551, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln399_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_w3_blk_n_R <= m_axi_gmem_w3_RVALID;
        else 
            gmem_w3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln399_fu_279_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten19_load = ap_const_lv10_320) else "0";
    icmp_ln402_fu_305_p2 <= "1" when (indvar_flatten6_fu_120 = ap_const_lv6_19) else "0";
    icmp_ln405_fu_390_p2 <= "1" when (kx_fu_112 = ap_const_lv3_5) else "0";
    m_axi_gmem_w3_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_w3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_w3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_w3_ARID <= ap_const_lv1_0;
    m_axi_gmem_w3_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_w3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_w3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_w3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_w3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_w3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_w3_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_w3_ARVALID <= ap_const_logic_0;
    m_axi_gmem_w3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_w3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_w3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_w3_AWID <= ap_const_lv1_0;
    m_axi_gmem_w3_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_w3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_w3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_w3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_w3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_w3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_w3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_w3_AWVALID <= ap_const_logic_0;
    m_axi_gmem_w3_BREADY <= ap_const_logic_0;

    m_axi_gmem_w3_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln399_reg_551, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln399_reg_551 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem_w3_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_w3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_w3_WDATA <= ap_const_lv32_0;
    m_axi_gmem_w3_WID <= ap_const_lv1_0;
    m_axi_gmem_w3_WLAST <= ap_const_logic_0;
    m_axi_gmem_w3_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_w3_WUSER <= ap_const_lv1_0;
    m_axi_gmem_w3_WVALID <= ap_const_logic_0;
    or_ln402_fu_408_p2 <= (icmp_ln402_reg_555 or and_ln399_fu_396_p2);
    or_ln_fu_373_p3 <= (zext_ln399_mid2_v_fu_363_p4 & zext_ln399_mid2_v_fu_363_p4);
    p_shl_fu_443_p3 <= (add_ln407_fu_433_p2 & ap_const_lv2_0);
    select_ln399_1_fu_352_p3 <= 
        add_ln399_fu_339_p2 when (icmp_ln402_reg_555(0) = '1') else 
        i3_fu_124;
    select_ln399_fu_345_p3 <= 
        ap_const_lv3_0 when (icmp_ln402_reg_555(0) = '1') else 
        ky_fu_116;
    select_ln402_1_fu_421_p3 <= 
        add_ln402_fu_402_p2 when (and_ln399_fu_396_p2(0) = '1') else 
        select_ln399_fu_345_p3;
    select_ln402_2_fu_317_p3 <= 
        ap_const_lv6_1 when (icmp_ln402_fu_305_p2(0) = '1') else 
        add_ln402_1_fu_311_p2;
    select_ln402_fu_413_p3 <= 
        ap_const_lv3_0 when (or_ln402_fu_408_p2(0) = '1') else 
        kx_fu_112;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_7))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_6))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_5))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_4))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_3))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_0))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 <= zext_ln407_3_fu_467_p1(7 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0 <= bitcast_ln407_fu_479_p1;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln399_fu_359_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln399_fu_359_p1 = ap_const_lv3_2))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln399_fu_359_p1 <= select_ln399_1_fu_352_p3(3 - 1 downto 0);
    xor_ln399_fu_385_p2 <= (icmp_ln402_reg_555 xor ap_const_lv1_1);
    zext_ln399_mid2_v_fu_363_p4 <= select_ln399_1_fu_352_p3(4 downto 3);
    zext_ln402_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_373_p3),5));
    zext_ln407_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln407_fu_433_p2),7));
    zext_ln407_2_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln402_fu_413_p3),7));
    zext_ln407_3_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln407_2_fu_461_p2),64));
    zext_ln407_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln402_1_fu_421_p3),5));
end behav;
