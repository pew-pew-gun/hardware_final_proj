-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1conv2_from_windows8_Pipeline_Init_Conv2Out_biases is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_37 : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_38 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_16_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_24_s : IN STD_LOGIC_VECTOR (15 downto 0);
    acc2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_ce0 : OUT STD_LOGIC;
    acc2_we0 : OUT STD_LOGIC;
    acc2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    acc2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_1_ce0 : OUT STD_LOGIC;
    acc2_1_we0 : OUT STD_LOGIC;
    acc2_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    acc2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_2_ce0 : OUT STD_LOGIC;
    acc2_2_we0 : OUT STD_LOGIC;
    acc2_2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    acc2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_3_ce0 : OUT STD_LOGIC;
    acc2_3_we0 : OUT STD_LOGIC;
    acc2_3_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    acc2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_4_ce0 : OUT STD_LOGIC;
    acc2_4_we0 : OUT STD_LOGIC;
    acc2_4_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    acc2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_5_ce0 : OUT STD_LOGIC;
    acc2_5_we0 : OUT STD_LOGIC;
    acc2_5_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    acc2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_6_ce0 : OUT STD_LOGIC;
    acc2_6_we0 : OUT STD_LOGIC;
    acc2_6_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_39 : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_17_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_25_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_10_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_18_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_26_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42 : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_float_float_32_5_5_float_float_255_255_bool_b2_loc_69 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_19_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_27_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_12_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_20_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_28_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_13_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_float_float_32_5_5_float_float_255_255_bool_b2_loc_70 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_29_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_14_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_22_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_30_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_46 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_15_s : IN STD_LOGIC_VECTOR (15 downto 0);
    p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_23_s : IN STD_LOGIC_VECTOR (15 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_float_float_32_5_5_float_float_255_255_bool_b2_loc : IN STD_LOGIC_VECTOR (15 downto 0);
    acc2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_7_ce0 : OUT STD_LOGIC;
    acc2_7_we0 : OUT STD_LOGIC;
    acc2_7_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of srcnn_conv1conv2_from_windows8_Pipeline_Init_Conv2Out_biases is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_fu_432_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln212_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln212_fu_1018_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n2_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_444_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_440_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_fu_466_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_522_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_104_fu_535_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_1_fu_591_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_337_i_fu_604_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_2_fu_660_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_338_i_fu_673_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_3_fu_729_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_339_i_fu_742_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_4_fu_798_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_340_i_fu_811_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_5_fu_867_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_341_i_fu_880_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_6_fu_936_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_342_i_fu_949_p27 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln214_7_fu_1005_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_mux_25_5_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_25_5_16_1_1_U184 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_37,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_38,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_16_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_24_s,
        din25 => empty_fu_440_p1,
        dout => tmp_i_fu_466_p27);

    mux_25_5_16_1_1_U185 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_39,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_17_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_25_s,
        din25 => empty_fu_440_p1,
        dout => tmp_i_104_fu_535_p27);

    mux_25_5_16_1_1_U186 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_10_s,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_18_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_26_s,
        din25 => empty_fu_440_p1,
        dout => tmp_337_i_fu_604_p27);

    mux_25_5_16_1_1_U187 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_float_float_32_5_5_float_float_255_255_bool_b2_loc_69,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_19_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_27_s,
        din25 => empty_fu_440_p1,
        dout => tmp_338_i_fu_673_p27);

    mux_25_5_16_1_1_U188 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_43,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_12_s,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_20_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_28_s,
        din25 => empty_fu_440_p1,
        dout => tmp_339_i_fu_742_p27);

    mux_25_5_16_1_1_U189 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_44,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_13_s,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_float_float_32_5_5_float_float_255_255_bool_b2_loc_70,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_29_s,
        din25 => empty_fu_440_p1,
        dout => tmp_340_i_fu_811_p27);

    mux_25_5_16_1_1_U190 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_45,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_14_s,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_22_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_30_s,
        din25 => empty_fu_440_p1,
        dout => tmp_341_i_fu_880_p27);

    mux_25_5_16_1_1_U191 : component srcnn_mux_25_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_46,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_15_s,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => p_ZZ5srcnnPA255_A255_fPA1_A9_A9_fPfPA64_A1_A1_fS6_PA32_A5_A5_fS6_S1_bE6b2_loc_23_s,
        din17 => ap_const_lv16_0,
        din18 => ap_const_lv16_0,
        din19 => ap_const_lv16_0,
        din20 => ap_const_lv16_0,
        din21 => ap_const_lv16_0,
        din22 => ap_const_lv16_0,
        din23 => ap_const_lv16_0,
        din24 => srcnn_float_255_255_float_1_9_9_float_float_64_1_1_float_float_32_5_5_float_float_255_255_bool_b2_loc,
        din25 => empty_fu_440_p1,
        dout => tmp_342_i_fu_949_p27);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    n2_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((tmp_fu_432_p3 = ap_const_lv1_0)) then 
                    n2_fu_124 <= add_ln212_fu_1018_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_124 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc2_1_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_1_ce0 <= ap_const_logic_1;
        else 
            acc2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_1_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_1_fu_591_p3),24));


    acc2_1_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_1_we0 <= ap_const_logic_1;
        else 
            acc2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_2_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_2_ce0 <= ap_const_logic_1;
        else 
            acc2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_2_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_2_fu_660_p3),24));


    acc2_2_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_2_we0 <= ap_const_logic_1;
        else 
            acc2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_3_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_3_ce0 <= ap_const_logic_1;
        else 
            acc2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_3_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_3_fu_729_p3),24));


    acc2_3_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_3_we0 <= ap_const_logic_1;
        else 
            acc2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_4_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_4_ce0 <= ap_const_logic_1;
        else 
            acc2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_4_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_4_fu_798_p3),24));


    acc2_4_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_4_we0 <= ap_const_logic_1;
        else 
            acc2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_5_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_5_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_5_ce0 <= ap_const_logic_1;
        else 
            acc2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_5_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_5_fu_867_p3),24));


    acc2_5_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_5_we0 <= ap_const_logic_1;
        else 
            acc2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_6_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_6_ce0 <= ap_const_logic_1;
        else 
            acc2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_6_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_6_fu_936_p3),24));


    acc2_6_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_6_we0 <= ap_const_logic_1;
        else 
            acc2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_7_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_7_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_7_ce0 <= ap_const_logic_1;
        else 
            acc2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_7_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln214_7_fu_1005_p3),24));


    acc2_7_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_7_we0 <= ap_const_logic_1;
        else 
            acc2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_address0 <= zext_ln212_fu_454_p1(2 - 1 downto 0);

    acc2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_ce0 <= ap_const_logic_1;
        else 
            acc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        acc2_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_522_p3),24));


    acc2_we0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc2_we0 <= ap_const_logic_1;
        else 
            acc2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln212_fu_1018_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2_2) + unsigned(ap_const_lv6_8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_432_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (tmp_fu_432_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_2_assign_proc : process(ap_CS_fsm_state1, n2_fu_124, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n2_2 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_n2_2 <= n2_fu_124;
        end if; 
    end process;

    empty_fu_440_p1 <= ap_sig_allocacmp_n2_2(5 - 1 downto 0);
    lshr_ln_fu_444_p4 <= ap_sig_allocacmp_n2_2(4 downto 3);
    shl_ln214_1_fu_591_p3 <= (tmp_i_104_fu_535_p27 & ap_const_lv1_0);
    shl_ln214_2_fu_660_p3 <= (tmp_337_i_fu_604_p27 & ap_const_lv1_0);
    shl_ln214_3_fu_729_p3 <= (tmp_338_i_fu_673_p27 & ap_const_lv1_0);
    shl_ln214_4_fu_798_p3 <= (tmp_339_i_fu_742_p27 & ap_const_lv1_0);
    shl_ln214_5_fu_867_p3 <= (tmp_340_i_fu_811_p27 & ap_const_lv1_0);
    shl_ln214_6_fu_936_p3 <= (tmp_341_i_fu_880_p27 & ap_const_lv1_0);
    shl_ln214_7_fu_1005_p3 <= (tmp_342_i_fu_949_p27 & ap_const_lv1_0);
    shl_ln_fu_522_p3 <= (tmp_i_fu_466_p27 & ap_const_lv1_0);
    tmp_fu_432_p3 <= ap_sig_allocacmp_n2_2(5 downto 5);
    zext_ln212_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_444_p4),64));
end behav;
