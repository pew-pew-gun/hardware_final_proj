-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_conv1conv2_from_windows8_Pipeline_Push_conv2pix_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_ce0 : OUT STD_LOGIC;
    acc2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    outpix_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    outpix_ce0 : OUT STD_LOGIC;
    outpix_we0 : OUT STD_LOGIC;
    outpix_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    outpix_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    outpix_ce1 : OUT STD_LOGIC;
    outpix_we1 : OUT STD_LOGIC;
    outpix_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    acc2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_1_ce0 : OUT STD_LOGIC;
    acc2_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_2_ce0 : OUT STD_LOGIC;
    acc2_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_3_ce0 : OUT STD_LOGIC;
    acc2_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_4_ce0 : OUT STD_LOGIC;
    acc2_4_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_5_ce0 : OUT STD_LOGIC;
    acc2_5_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_6_ce0 : OUT STD_LOGIC;
    acc2_6_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_7_ce0 : OUT STD_LOGIC;
    acc2_7_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of srcnn_conv1conv2_from_windows8_Pipeline_Push_conv2pix_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal n2_1_reg_1267 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_1273 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln249_fu_320_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln249_reg_1317 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln253_10_fu_652_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_10_reg_1327 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_11_fu_760_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_11_reg_1332 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_12_fu_868_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_12_reg_1337 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_13_fu_976_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_13_reg_1342 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_14_fu_1084_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_14_reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_15_fu_1192_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_15_reg_1352 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln249_1_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln249_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln252_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln252_1_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln252_2_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln252_3_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln252_4_fu_1235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln252_5_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln252_6_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n2_fu_86 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln249_fu_305_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n2_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln253_8_fu_423_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln253_9_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal lshr_ln1_fu_283_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln253_fu_355_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_930_fu_339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_931_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_329_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_fu_377_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_fu_381_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_933_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_932_fu_387_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_1_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_fu_415_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln249_fu_432_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_1_fu_475_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_934_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_3_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_935_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_2_fu_449_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_1_fu_497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_1_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_937_fu_515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_936_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_1_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_3_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_2_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_1_fu_535_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln253_3_fu_584_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_938_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_5_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_4_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_939_fu_576_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_2_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_4_fu_558_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_2_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_2_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_941_fu_624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_940_fu_616_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_2_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_5_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_4_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_2_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln253_5_fu_692_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_942_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_7_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_6_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_943_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_3_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_6_fu_666_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_3_fu_714_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_3_fu_718_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_945_fu_732_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_944_fu_724_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_3_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_7_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_6_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_3_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln253_7_fu_800_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_946_fu_784_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_9_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_8_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_947_fu_792_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_4_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_8_fu_774_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_4_fu_822_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_4_fu_826_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_949_fu_840_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_948_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_4_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_9_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_8_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_4_fu_860_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln253_9_fu_908_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_950_fu_892_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_11_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_10_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_951_fu_900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_5_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_s_fu_882_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_5_fu_930_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_5_fu_934_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_953_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_952_fu_940_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_5_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_11_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_10_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_5_fu_968_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln253_11_fu_1016_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_954_fu_1000_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_13_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_12_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_955_fu_1008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_6_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_10_fu_990_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_6_fu_1038_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_6_fu_1042_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_957_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_956_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_6_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_13_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_12_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_6_fu_1076_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln253_13_fu_1124_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_958_fu_1108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_15_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_14_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_959_fu_1116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln253_7_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_12_fu_1098_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln253_7_fu_1146_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln253_7_fu_1150_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_961_fu_1164_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_960_fu_1156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_7_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln253_15_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_14_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_7_fu_1184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln249_1_fu_1200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln249_2_fu_1210_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln249_3_fu_1220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln249_4_fu_1230_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln249_5_fu_1240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln249_6_fu_1250_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    n2_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_275_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n2_fu_86 <= add_ln249_fu_305_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_fu_86 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                n2_1_reg_1267 <= ap_sig_allocacmp_n2_1;
                tmp_reg_1273 <= ap_sig_allocacmp_n2_1(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1273 = ap_const_lv1_0))) then
                select_ln253_10_reg_1327 <= select_ln253_10_fu_652_p3;
                select_ln253_11_reg_1332 <= select_ln253_11_fu_760_p3;
                select_ln253_12_reg_1337 <= select_ln253_12_fu_868_p3;
                select_ln253_13_reg_1342 <= select_ln253_13_fu_976_p3;
                select_ln253_14_reg_1347 <= select_ln253_14_fu_1084_p3;
                select_ln253_15_reg_1352 <= select_ln253_15_fu_1192_p3;
                trunc_ln249_reg_1317 <= trunc_ln249_fu_320_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc2_1_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_1_ce0 <= ap_const_logic_1;
        else 
            acc2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_2_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_2_ce0 <= ap_const_logic_1;
        else 
            acc2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_3_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_3_ce0 <= ap_const_logic_1;
        else 
            acc2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_4_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_4_ce0 <= ap_const_logic_1;
        else 
            acc2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_5_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_5_ce0 <= ap_const_logic_1;
        else 
            acc2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_6_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_6_ce0 <= ap_const_logic_1;
        else 
            acc2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_7_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_7_ce0 <= ap_const_logic_1;
        else 
            acc2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_address0 <= zext_ln249_1_fu_293_p1(2 - 1 downto 0);

    acc2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_ce0 <= ap_const_logic_1;
        else 
            acc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln249_fu_305_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2_1) + unsigned(ap_const_lv6_8));
    add_ln253_1_fu_501_p2 <= std_logic_vector(unsigned(trunc_ln253_2_fu_449_p4) + unsigned(zext_ln253_1_fu_497_p1));
    add_ln253_2_fu_610_p2 <= std_logic_vector(unsigned(trunc_ln253_4_fu_558_p4) + unsigned(zext_ln253_2_fu_606_p1));
    add_ln253_3_fu_718_p2 <= std_logic_vector(unsigned(trunc_ln253_6_fu_666_p4) + unsigned(zext_ln253_3_fu_714_p1));
    add_ln253_4_fu_826_p2 <= std_logic_vector(unsigned(trunc_ln253_8_fu_774_p4) + unsigned(zext_ln253_4_fu_822_p1));
    add_ln253_5_fu_934_p2 <= std_logic_vector(unsigned(trunc_ln253_s_fu_882_p4) + unsigned(zext_ln253_5_fu_930_p1));
    add_ln253_6_fu_1042_p2 <= std_logic_vector(unsigned(trunc_ln253_10_fu_990_p4) + unsigned(zext_ln253_6_fu_1038_p1));
    add_ln253_7_fu_1150_p2 <= std_logic_vector(unsigned(trunc_ln253_12_fu_1098_p4) + unsigned(zext_ln253_7_fu_1146_p1));
    add_ln253_fu_381_p2 <= std_logic_vector(unsigned(trunc_ln_fu_329_p4) + unsigned(zext_ln253_fu_377_p1));
    and_ln253_1_fu_491_p2 <= (tmp_935_fu_467_p3 and or_ln253_2_fu_485_p2);
    and_ln253_2_fu_600_p2 <= (tmp_939_fu_576_p3 and or_ln253_4_fu_594_p2);
    and_ln253_3_fu_708_p2 <= (tmp_943_fu_684_p3 and or_ln253_6_fu_702_p2);
    and_ln253_4_fu_816_p2 <= (tmp_947_fu_792_p3 and or_ln253_8_fu_810_p2);
    and_ln253_5_fu_924_p2 <= (tmp_951_fu_900_p3 and or_ln253_10_fu_918_p2);
    and_ln253_6_fu_1032_p2 <= (tmp_955_fu_1008_p3 and or_ln253_12_fu_1026_p2);
    and_ln253_7_fu_1140_p2 <= (tmp_959_fu_1116_p3 and or_ln253_14_fu_1134_p2);
    and_ln253_fu_371_p2 <= (tmp_931_fu_347_p3 and or_ln253_fu_365_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_275_p3)
    begin
        if (((tmp_fu_275_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n2_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n2_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_n2_1 <= n2_fu_86;
        end if; 
    end process;

    icmp_ln253_10_fu_876_p2 <= "1" when (signed(acc2_5_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_11_fu_912_p2 <= "0" when (trunc_ln253_9_fu_908_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_12_fu_984_p2 <= "1" when (signed(acc2_6_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_13_fu_1020_p2 <= "0" when (trunc_ln253_11_fu_1016_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_14_fu_1092_p2 <= "1" when (signed(acc2_7_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_15_fu_1128_p2 <= "0" when (trunc_ln253_13_fu_1124_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_1_fu_359_p2 <= "0" when (trunc_ln253_fu_355_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_2_fu_443_p2 <= "1" when (signed(acc2_1_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_3_fu_479_p2 <= "0" when (trunc_ln253_1_fu_475_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_4_fu_552_p2 <= "1" when (signed(acc2_2_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_5_fu_588_p2 <= "0" when (trunc_ln253_3_fu_584_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_6_fu_660_p2 <= "1" when (signed(acc2_3_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_7_fu_696_p2 <= "0" when (trunc_ln253_5_fu_692_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_8_fu_768_p2 <= "1" when (signed(acc2_4_q0) > signed(ap_const_lv24_0)) else "0";
    icmp_ln253_9_fu_804_p2 <= "0" when (trunc_ln253_7_fu_800_p1 = ap_const_lv6_0) else "1";
    icmp_ln253_fu_323_p2 <= "1" when (signed(acc2_q0) > signed(ap_const_lv24_0)) else "0";
    lshr_ln1_fu_283_p4 <= ap_sig_allocacmp_n2_1(4 downto 3);
    or_ln249_1_fu_1200_p2 <= (trunc_ln249_reg_1317 or ap_const_lv5_2);
    or_ln249_2_fu_1210_p2 <= (trunc_ln249_reg_1317 or ap_const_lv5_3);
    or_ln249_3_fu_1220_p2 <= (trunc_ln249_reg_1317 or ap_const_lv5_4);
    or_ln249_4_fu_1230_p2 <= (trunc_ln249_reg_1317 or ap_const_lv5_5);
    or_ln249_5_fu_1240_p2 <= (trunc_ln249_reg_1317 or ap_const_lv5_6);
    or_ln249_6_fu_1250_p2 <= (trunc_ln249_reg_1317 or ap_const_lv5_7);
    or_ln249_fu_432_p2 <= (trunc_ln249_fu_320_p1 or ap_const_lv5_1);
    or_ln253_10_fu_918_p2 <= (tmp_950_fu_892_p3 or icmp_ln253_11_fu_912_p2);
    or_ln253_11_fu_962_p2 <= (xor_ln253_5_fu_956_p2 or tmp_952_fu_940_p3);
    or_ln253_12_fu_1026_p2 <= (tmp_954_fu_1000_p3 or icmp_ln253_13_fu_1020_p2);
    or_ln253_13_fu_1070_p2 <= (xor_ln253_6_fu_1064_p2 or tmp_956_fu_1048_p3);
    or_ln253_14_fu_1134_p2 <= (tmp_958_fu_1108_p3 or icmp_ln253_15_fu_1128_p2);
    or_ln253_15_fu_1178_p2 <= (xor_ln253_7_fu_1172_p2 or tmp_960_fu_1156_p3);
    or_ln253_1_fu_409_p2 <= (xor_ln253_fu_403_p2 or tmp_932_fu_387_p3);
    or_ln253_2_fu_485_p2 <= (tmp_934_fu_459_p3 or icmp_ln253_3_fu_479_p2);
    or_ln253_3_fu_529_p2 <= (xor_ln253_1_fu_523_p2 or tmp_936_fu_507_p3);
    or_ln253_4_fu_594_p2 <= (tmp_938_fu_568_p3 or icmp_ln253_5_fu_588_p2);
    or_ln253_5_fu_638_p2 <= (xor_ln253_2_fu_632_p2 or tmp_940_fu_616_p3);
    or_ln253_6_fu_702_p2 <= (tmp_942_fu_676_p3 or icmp_ln253_7_fu_696_p2);
    or_ln253_7_fu_746_p2 <= (xor_ln253_3_fu_740_p2 or tmp_944_fu_724_p3);
    or_ln253_8_fu_810_p2 <= (tmp_946_fu_784_p3 or icmp_ln253_9_fu_804_p2);
    or_ln253_9_fu_854_p2 <= (xor_ln253_4_fu_848_p2 or tmp_948_fu_832_p3);
    or_ln253_fu_365_p2 <= (tmp_930_fu_339_p3 or icmp_ln253_1_fu_359_p2);

    outpix_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln252_fu_438_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, zext_ln252_2_fu_1215_p1, ap_block_pp0_stage3, zext_ln252_4_fu_1235_p1, zext_ln252_6_fu_1255_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_address0 <= zext_ln252_6_fu_1255_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_address0 <= zext_ln252_4_fu_1235_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_address0 <= zext_ln252_2_fu_1215_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_address0 <= zext_ln252_fu_438_p1(5 - 1 downto 0);
        else 
            outpix_address0 <= "XXXXX";
        end if; 
    end process;


    outpix_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln249_fu_316_p1, ap_block_pp0_stage1, zext_ln252_1_fu_1205_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, zext_ln252_3_fu_1225_p1, ap_block_pp0_stage3, zext_ln252_5_fu_1245_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_address1 <= zext_ln252_5_fu_1245_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_address1 <= zext_ln252_3_fu_1225_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_address1 <= zext_ln252_1_fu_1205_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_address1 <= zext_ln249_fu_316_p1(5 - 1 downto 0);
        else 
            outpix_address1 <= "XXXXX";
        end if; 
    end process;


    outpix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_ce0 <= ap_const_logic_1;
        else 
            outpix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outpix_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_ce1 <= ap_const_logic_1;
        else 
            outpix_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outpix_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, select_ln253_11_reg_1332, select_ln253_13_reg_1342, select_ln253_15_reg_1352, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, select_ln253_9_fu_543_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_d0 <= select_ln253_15_reg_1352;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_d0 <= select_ln253_13_reg_1342;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_d0 <= select_ln253_11_reg_1332;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_d0 <= select_ln253_9_fu_543_p3;
        else 
            outpix_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outpix_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, select_ln253_10_reg_1327, select_ln253_12_reg_1337, select_ln253_14_reg_1347, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage3, select_ln253_8_fu_423_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outpix_d1 <= select_ln253_14_reg_1347;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            outpix_d1 <= select_ln253_12_reg_1337;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            outpix_d1 <= select_ln253_10_reg_1327;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            outpix_d1 <= select_ln253_8_fu_423_p3;
        else 
            outpix_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outpix_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, tmp_reg_1273, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1273 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_reg_1273 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1273 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_we0 <= ap_const_logic_1;
        else 
            outpix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outpix_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, tmp_reg_1273, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1273 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_reg_1273 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1273 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            outpix_we1 <= ap_const_logic_1;
        else 
            outpix_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln253_10_fu_652_p3 <= 
        select_ln253_2_fu_644_p3 when (icmp_ln253_4_fu_552_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_11_fu_760_p3 <= 
        select_ln253_3_fu_752_p3 when (icmp_ln253_6_fu_660_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_12_fu_868_p3 <= 
        select_ln253_4_fu_860_p3 when (icmp_ln253_8_fu_768_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_13_fu_976_p3 <= 
        select_ln253_5_fu_968_p3 when (icmp_ln253_10_fu_876_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_14_fu_1084_p3 <= 
        select_ln253_6_fu_1076_p3 when (icmp_ln253_12_fu_984_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_15_fu_1192_p3 <= 
        select_ln253_7_fu_1184_p3 when (icmp_ln253_14_fu_1092_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_1_fu_535_p3 <= 
        add_ln253_1_fu_501_p2 when (or_ln253_3_fu_529_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_2_fu_644_p3 <= 
        add_ln253_2_fu_610_p2 when (or_ln253_5_fu_638_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_3_fu_752_p3 <= 
        add_ln253_3_fu_718_p2 when (or_ln253_7_fu_746_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_4_fu_860_p3 <= 
        add_ln253_4_fu_826_p2 when (or_ln253_9_fu_854_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_5_fu_968_p3 <= 
        add_ln253_5_fu_934_p2 when (or_ln253_11_fu_962_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_6_fu_1076_p3 <= 
        add_ln253_6_fu_1042_p2 when (or_ln253_13_fu_1070_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_7_fu_1184_p3 <= 
        add_ln253_7_fu_1150_p2 when (or_ln253_15_fu_1178_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln253_8_fu_423_p3 <= 
        select_ln253_fu_415_p3 when (icmp_ln253_fu_323_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_9_fu_543_p3 <= 
        select_ln253_1_fu_535_p3 when (icmp_ln253_2_fu_443_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln253_fu_415_p3 <= 
        add_ln253_fu_381_p2 when (or_ln253_1_fu_409_p2(0) = '1') else 
        ap_const_lv16_FFFF;
    tmp_930_fu_339_p3 <= acc2_q0(7 downto 7);
    tmp_931_fu_347_p3 <= acc2_q0(6 downto 6);
    tmp_932_fu_387_p3 <= add_ln253_fu_381_p2(15 downto 15);
    tmp_933_fu_395_p3 <= acc2_q0(22 downto 22);
    tmp_934_fu_459_p3 <= acc2_1_q0(7 downto 7);
    tmp_935_fu_467_p3 <= acc2_1_q0(6 downto 6);
    tmp_936_fu_507_p3 <= add_ln253_1_fu_501_p2(15 downto 15);
    tmp_937_fu_515_p3 <= acc2_1_q0(22 downto 22);
    tmp_938_fu_568_p3 <= acc2_2_q0(7 downto 7);
    tmp_939_fu_576_p3 <= acc2_2_q0(6 downto 6);
    tmp_940_fu_616_p3 <= add_ln253_2_fu_610_p2(15 downto 15);
    tmp_941_fu_624_p3 <= acc2_2_q0(22 downto 22);
    tmp_942_fu_676_p3 <= acc2_3_q0(7 downto 7);
    tmp_943_fu_684_p3 <= acc2_3_q0(6 downto 6);
    tmp_944_fu_724_p3 <= add_ln253_3_fu_718_p2(15 downto 15);
    tmp_945_fu_732_p3 <= acc2_3_q0(22 downto 22);
    tmp_946_fu_784_p3 <= acc2_4_q0(7 downto 7);
    tmp_947_fu_792_p3 <= acc2_4_q0(6 downto 6);
    tmp_948_fu_832_p3 <= add_ln253_4_fu_826_p2(15 downto 15);
    tmp_949_fu_840_p3 <= acc2_4_q0(22 downto 22);
    tmp_950_fu_892_p3 <= acc2_5_q0(7 downto 7);
    tmp_951_fu_900_p3 <= acc2_5_q0(6 downto 6);
    tmp_952_fu_940_p3 <= add_ln253_5_fu_934_p2(15 downto 15);
    tmp_953_fu_948_p3 <= acc2_5_q0(22 downto 22);
    tmp_954_fu_1000_p3 <= acc2_6_q0(7 downto 7);
    tmp_955_fu_1008_p3 <= acc2_6_q0(6 downto 6);
    tmp_956_fu_1048_p3 <= add_ln253_6_fu_1042_p2(15 downto 15);
    tmp_957_fu_1056_p3 <= acc2_6_q0(22 downto 22);
    tmp_958_fu_1108_p3 <= acc2_7_q0(7 downto 7);
    tmp_959_fu_1116_p3 <= acc2_7_q0(6 downto 6);
    tmp_960_fu_1156_p3 <= add_ln253_7_fu_1150_p2(15 downto 15);
    tmp_961_fu_1164_p3 <= acc2_7_q0(22 downto 22);
    tmp_fu_275_p3 <= ap_sig_allocacmp_n2_1(5 downto 5);
    trunc_ln249_fu_320_p1 <= n2_1_reg_1267(5 - 1 downto 0);
    trunc_ln253_10_fu_990_p4 <= acc2_6_q0(22 downto 7);
    trunc_ln253_11_fu_1016_p1 <= acc2_6_q0(6 - 1 downto 0);
    trunc_ln253_12_fu_1098_p4 <= acc2_7_q0(22 downto 7);
    trunc_ln253_13_fu_1124_p1 <= acc2_7_q0(6 - 1 downto 0);
    trunc_ln253_1_fu_475_p1 <= acc2_1_q0(6 - 1 downto 0);
    trunc_ln253_2_fu_449_p4 <= acc2_1_q0(22 downto 7);
    trunc_ln253_3_fu_584_p1 <= acc2_2_q0(6 - 1 downto 0);
    trunc_ln253_4_fu_558_p4 <= acc2_2_q0(22 downto 7);
    trunc_ln253_5_fu_692_p1 <= acc2_3_q0(6 - 1 downto 0);
    trunc_ln253_6_fu_666_p4 <= acc2_3_q0(22 downto 7);
    trunc_ln253_7_fu_800_p1 <= acc2_4_q0(6 - 1 downto 0);
    trunc_ln253_8_fu_774_p4 <= acc2_4_q0(22 downto 7);
    trunc_ln253_9_fu_908_p1 <= acc2_5_q0(6 - 1 downto 0);
    trunc_ln253_fu_355_p1 <= acc2_q0(6 - 1 downto 0);
    trunc_ln253_s_fu_882_p4 <= acc2_5_q0(22 downto 7);
    trunc_ln_fu_329_p4 <= acc2_q0(22 downto 7);
    xor_ln253_1_fu_523_p2 <= (tmp_937_fu_515_p3 xor ap_const_lv1_1);
    xor_ln253_2_fu_632_p2 <= (tmp_941_fu_624_p3 xor ap_const_lv1_1);
    xor_ln253_3_fu_740_p2 <= (tmp_945_fu_732_p3 xor ap_const_lv1_1);
    xor_ln253_4_fu_848_p2 <= (tmp_949_fu_840_p3 xor ap_const_lv1_1);
    xor_ln253_5_fu_956_p2 <= (tmp_953_fu_948_p3 xor ap_const_lv1_1);
    xor_ln253_6_fu_1064_p2 <= (tmp_957_fu_1056_p3 xor ap_const_lv1_1);
    xor_ln253_7_fu_1172_p2 <= (tmp_961_fu_1164_p3 xor ap_const_lv1_1);
    xor_ln253_fu_403_p2 <= (tmp_933_fu_395_p3 xor ap_const_lv1_1);
    zext_ln249_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_283_p4),64));
    zext_ln249_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n2_1_reg_1267),64));
    zext_ln252_1_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_1_fu_1200_p2),64));
    zext_ln252_2_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_2_fu_1210_p2),64));
    zext_ln252_3_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_3_fu_1220_p2),64));
    zext_ln252_4_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_4_fu_1230_p2),64));
    zext_ln252_5_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_5_fu_1240_p2),64));
    zext_ln252_6_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_6_fu_1250_p2),64));
    zext_ln252_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln249_fu_432_p2),64));
    zext_ln253_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_1_fu_491_p2),16));
    zext_ln253_2_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_2_fu_600_p2),16));
    zext_ln253_3_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_3_fu_708_p2),16));
    zext_ln253_4_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_4_fu_816_p2),16));
    zext_ln253_5_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_5_fu_924_p2),16));
    zext_ln253_6_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_6_fu_1032_p2),16));
    zext_ln253_7_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_7_fu_1140_p2),16));
    zext_ln253_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln253_fu_371_p2),16));
end behav;
