// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_CopyW3_inft_CopyW3_ky_CopyW3_kx (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_w3_AWVALID,
        m_axi_gmem_w3_AWREADY,
        m_axi_gmem_w3_AWADDR,
        m_axi_gmem_w3_AWID,
        m_axi_gmem_w3_AWLEN,
        m_axi_gmem_w3_AWSIZE,
        m_axi_gmem_w3_AWBURST,
        m_axi_gmem_w3_AWLOCK,
        m_axi_gmem_w3_AWCACHE,
        m_axi_gmem_w3_AWPROT,
        m_axi_gmem_w3_AWQOS,
        m_axi_gmem_w3_AWREGION,
        m_axi_gmem_w3_AWUSER,
        m_axi_gmem_w3_WVALID,
        m_axi_gmem_w3_WREADY,
        m_axi_gmem_w3_WDATA,
        m_axi_gmem_w3_WSTRB,
        m_axi_gmem_w3_WLAST,
        m_axi_gmem_w3_WID,
        m_axi_gmem_w3_WUSER,
        m_axi_gmem_w3_ARVALID,
        m_axi_gmem_w3_ARREADY,
        m_axi_gmem_w3_ARADDR,
        m_axi_gmem_w3_ARID,
        m_axi_gmem_w3_ARLEN,
        m_axi_gmem_w3_ARSIZE,
        m_axi_gmem_w3_ARBURST,
        m_axi_gmem_w3_ARLOCK,
        m_axi_gmem_w3_ARCACHE,
        m_axi_gmem_w3_ARPROT,
        m_axi_gmem_w3_ARQOS,
        m_axi_gmem_w3_ARREGION,
        m_axi_gmem_w3_ARUSER,
        m_axi_gmem_w3_RVALID,
        m_axi_gmem_w3_RREADY,
        m_axi_gmem_w3_RDATA,
        m_axi_gmem_w3_RLAST,
        m_axi_gmem_w3_RID,
        m_axi_gmem_w3_RFIFONUM,
        m_axi_gmem_w3_RUSER,
        m_axi_gmem_w3_RRESP,
        m_axi_gmem_w3_BVALID,
        m_axi_gmem_w3_BREADY,
        m_axi_gmem_w3_BRESP,
        m_axi_gmem_w3_BID,
        m_axi_gmem_w3_BUSER,
        sext_ln399,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_w3_AWVALID;
input   m_axi_gmem_w3_AWREADY;
output  [63:0] m_axi_gmem_w3_AWADDR;
output  [0:0] m_axi_gmem_w3_AWID;
output  [31:0] m_axi_gmem_w3_AWLEN;
output  [2:0] m_axi_gmem_w3_AWSIZE;
output  [1:0] m_axi_gmem_w3_AWBURST;
output  [1:0] m_axi_gmem_w3_AWLOCK;
output  [3:0] m_axi_gmem_w3_AWCACHE;
output  [2:0] m_axi_gmem_w3_AWPROT;
output  [3:0] m_axi_gmem_w3_AWQOS;
output  [3:0] m_axi_gmem_w3_AWREGION;
output  [0:0] m_axi_gmem_w3_AWUSER;
output   m_axi_gmem_w3_WVALID;
input   m_axi_gmem_w3_WREADY;
output  [31:0] m_axi_gmem_w3_WDATA;
output  [3:0] m_axi_gmem_w3_WSTRB;
output   m_axi_gmem_w3_WLAST;
output  [0:0] m_axi_gmem_w3_WID;
output  [0:0] m_axi_gmem_w3_WUSER;
output   m_axi_gmem_w3_ARVALID;
input   m_axi_gmem_w3_ARREADY;
output  [63:0] m_axi_gmem_w3_ARADDR;
output  [0:0] m_axi_gmem_w3_ARID;
output  [31:0] m_axi_gmem_w3_ARLEN;
output  [2:0] m_axi_gmem_w3_ARSIZE;
output  [1:0] m_axi_gmem_w3_ARBURST;
output  [1:0] m_axi_gmem_w3_ARLOCK;
output  [3:0] m_axi_gmem_w3_ARCACHE;
output  [2:0] m_axi_gmem_w3_ARPROT;
output  [3:0] m_axi_gmem_w3_ARQOS;
output  [3:0] m_axi_gmem_w3_ARREGION;
output  [0:0] m_axi_gmem_w3_ARUSER;
input   m_axi_gmem_w3_RVALID;
output   m_axi_gmem_w3_RREADY;
input  [31:0] m_axi_gmem_w3_RDATA;
input   m_axi_gmem_w3_RLAST;
input  [0:0] m_axi_gmem_w3_RID;
input  [8:0] m_axi_gmem_w3_RFIFONUM;
input  [0:0] m_axi_gmem_w3_RUSER;
input  [1:0] m_axi_gmem_w3_RRESP;
input   m_axi_gmem_w3_BVALID;
output   m_axi_gmem_w3_BREADY;
input  [1:0] m_axi_gmem_w3_BRESP;
input  [0:0] m_axi_gmem_w3_BID;
input  [0:0] m_axi_gmem_w3_BUSER;
input  [61:0] sext_ln399;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0;
output  [6:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0;

reg ap_idle;
reg m_axi_gmem_w3_RREADY;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln399_reg_551;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln399_fu_279_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_w3_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln402_fu_305_p2;
reg   [0:0] icmp_ln402_reg_555;
reg   [31:0] gmem_w3_addr_read_reg_563;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln407_3_fu_467_p1;
reg   [2:0] kx_fu_112;
wire   [2:0] add_ln405_fu_490_p2;
wire    ap_loop_init;
reg   [2:0] ky_fu_116;
wire   [2:0] select_ln402_1_fu_421_p3;
reg   [5:0] indvar_flatten6_fu_120;
wire   [5:0] select_ln402_2_fu_317_p3;
reg   [5:0] i3_fu_124;
wire   [5:0] select_ln399_1_fu_352_p3;
reg   [9:0] indvar_flatten19_fu_128;
wire   [9:0] add_ln399_1_fu_285_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten19_load;
wire   [2:0] trunc_ln399_fu_359_p1;
wire   [31:0] bitcast_ln407_fu_479_p1;
wire   [5:0] add_ln402_1_fu_311_p2;
wire   [5:0] add_ln399_fu_339_p2;
wire   [1:0] zext_ln399_mid2_v_fu_363_p4;
wire   [3:0] or_ln_fu_373_p3;
wire   [0:0] icmp_ln405_fu_390_p2;
wire   [0:0] xor_ln399_fu_385_p2;
wire   [2:0] select_ln399_fu_345_p3;
wire   [0:0] and_ln399_fu_396_p2;
wire   [0:0] or_ln402_fu_408_p2;
wire   [2:0] add_ln402_fu_402_p2;
wire   [4:0] zext_ln402_fu_381_p1;
wire   [4:0] zext_ln407_fu_429_p1;
wire   [4:0] add_ln407_fu_433_p2;
wire   [6:0] p_shl_fu_443_p3;
wire   [6:0] zext_ln407_1_fu_439_p1;
wire   [2:0] select_ln402_fu_413_p3;
wire   [6:0] add_ln407_1_fu_451_p2;
wire   [6:0] zext_ln407_2_fu_457_p1;
wire   [6:0] add_ln407_2_fu_461_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i3_fu_124 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i3_fu_124 <= select_ln399_1_fu_352_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln399_fu_279_p2 == 1'd0))) begin
            indvar_flatten19_fu_128 <= add_ln399_1_fu_285_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_128 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_120 <= 6'd0;
        end else if (((icmp_ln399_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten6_fu_120 <= select_ln402_2_fu_317_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kx_fu_112 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            kx_fu_112 <= add_ln405_fu_490_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ky_fu_116 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ky_fu_116 <= select_ln402_1_fu_421_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln399_reg_551 <= icmp_ln399_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln399_reg_551 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_w3_addr_read_reg_563 <= m_axi_gmem_w3_RDATA;
        icmp_ln402_reg_555 <= icmp_ln402_fu_305_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln399_fu_279_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln399_reg_551 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln399_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_w3_blk_n_R = m_axi_gmem_w3_RVALID;
    end else begin
        gmem_w3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln399_reg_551 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_w3_RREADY = 1'b1;
    end else begin
        m_axi_gmem_w3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd7))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd6))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd5))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd4))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd3))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd0))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln399_fu_359_p1 == 3'd2))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln399_1_fu_285_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 10'd1);

assign add_ln399_fu_339_p2 = (i3_fu_124 + 6'd1);

assign add_ln402_1_fu_311_p2 = (indvar_flatten6_fu_120 + 6'd1);

assign add_ln402_fu_402_p2 = (select_ln399_fu_345_p3 + 3'd1);

assign add_ln405_fu_490_p2 = (select_ln402_fu_413_p3 + 3'd1);

assign add_ln407_1_fu_451_p2 = (p_shl_fu_443_p3 + zext_ln407_1_fu_439_p1);

assign add_ln407_2_fu_461_p2 = (add_ln407_1_fu_451_p2 + zext_ln407_2_fu_457_p1);

assign add_ln407_fu_433_p2 = (zext_ln402_fu_381_p1 + zext_ln407_fu_429_p1);

assign and_ln399_fu_396_p2 = (xor_ln399_fu_385_p2 & icmp_ln405_fu_390_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln399_reg_551 == 1'd0) & (m_axi_gmem_w3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln399_reg_551 == 1'd0) & (m_axi_gmem_w3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln399_reg_551 == 1'd0) & (m_axi_gmem_w3_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln407_fu_479_p1 = gmem_w3_addr_read_reg_563;

assign icmp_ln399_fu_279_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln402_fu_305_p2 = ((indvar_flatten6_fu_120 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln405_fu_390_p2 = ((kx_fu_112 == 3'd5) ? 1'b1 : 1'b0);

assign m_axi_gmem_w3_ARADDR = 64'd0;

assign m_axi_gmem_w3_ARBURST = 2'd0;

assign m_axi_gmem_w3_ARCACHE = 4'd0;

assign m_axi_gmem_w3_ARID = 1'd0;

assign m_axi_gmem_w3_ARLEN = 32'd0;

assign m_axi_gmem_w3_ARLOCK = 2'd0;

assign m_axi_gmem_w3_ARPROT = 3'd0;

assign m_axi_gmem_w3_ARQOS = 4'd0;

assign m_axi_gmem_w3_ARREGION = 4'd0;

assign m_axi_gmem_w3_ARSIZE = 3'd0;

assign m_axi_gmem_w3_ARUSER = 1'd0;

assign m_axi_gmem_w3_ARVALID = 1'b0;

assign m_axi_gmem_w3_AWADDR = 64'd0;

assign m_axi_gmem_w3_AWBURST = 2'd0;

assign m_axi_gmem_w3_AWCACHE = 4'd0;

assign m_axi_gmem_w3_AWID = 1'd0;

assign m_axi_gmem_w3_AWLEN = 32'd0;

assign m_axi_gmem_w3_AWLOCK = 2'd0;

assign m_axi_gmem_w3_AWPROT = 3'd0;

assign m_axi_gmem_w3_AWQOS = 4'd0;

assign m_axi_gmem_w3_AWREGION = 4'd0;

assign m_axi_gmem_w3_AWSIZE = 3'd0;

assign m_axi_gmem_w3_AWUSER = 1'd0;

assign m_axi_gmem_w3_AWVALID = 1'b0;

assign m_axi_gmem_w3_BREADY = 1'b0;

assign m_axi_gmem_w3_WDATA = 32'd0;

assign m_axi_gmem_w3_WID = 1'd0;

assign m_axi_gmem_w3_WLAST = 1'b0;

assign m_axi_gmem_w3_WSTRB = 4'd0;

assign m_axi_gmem_w3_WUSER = 1'd0;

assign m_axi_gmem_w3_WVALID = 1'b0;

assign or_ln402_fu_408_p2 = (icmp_ln402_reg_555 | and_ln399_fu_396_p2);

assign or_ln_fu_373_p3 = {{zext_ln399_mid2_v_fu_363_p4}, {zext_ln399_mid2_v_fu_363_p4}};

assign p_shl_fu_443_p3 = {{add_ln407_fu_433_p2}, {2'd0}};

assign select_ln399_1_fu_352_p3 = ((icmp_ln402_reg_555[0:0] == 1'b1) ? add_ln399_fu_339_p2 : i3_fu_124);

assign select_ln399_fu_345_p3 = ((icmp_ln402_reg_555[0:0] == 1'b1) ? 3'd0 : ky_fu_116);

assign select_ln402_1_fu_421_p3 = ((and_ln399_fu_396_p2[0:0] == 1'b1) ? add_ln402_fu_402_p2 : select_ln399_fu_345_p3);

assign select_ln402_2_fu_317_p3 = ((icmp_ln402_fu_305_p2[0:0] == 1'b1) ? 6'd1 : add_ln402_1_fu_311_p2);

assign select_ln402_fu_413_p3 = ((or_ln402_fu_408_p2[0:0] == 1'b1) ? 3'd0 : kx_fu_112);

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0 = bitcast_ln407_fu_479_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 = zext_ln407_3_fu_467_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0 = bitcast_ln407_fu_479_p1;

assign trunc_ln399_fu_359_p1 = select_ln399_1_fu_352_p3[2:0];

assign xor_ln399_fu_385_p2 = (icmp_ln402_reg_555 ^ 1'd1);

assign zext_ln399_mid2_v_fu_363_p4 = {{select_ln399_1_fu_352_p3[4:3]}};

assign zext_ln402_fu_381_p1 = or_ln_fu_373_p3;

assign zext_ln407_1_fu_439_p1 = add_ln407_fu_433_p2;

assign zext_ln407_2_fu_457_p1 = select_ln402_fu_413_p3;

assign zext_ln407_3_fu_467_p1 = add_ln407_2_fu_461_p2;

assign zext_ln407_fu_429_p1 = select_ln402_1_fu_421_p3;

endmodule //srcnn_srcnn_Pipeline_CopyW3_inft_CopyW3_ky_CopyW3_kx
