// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_fuse_9x9_1x1_Pipeline_Conv2_ReLU (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f2_7_address0,
        f2_7_ce0,
        f2_7_we0,
        f2_7_d0,
        f2_6_address0,
        f2_6_ce0,
        f2_6_we0,
        f2_6_d0,
        f2_5_address0,
        f2_5_ce0,
        f2_5_we0,
        f2_5_d0,
        f2_4_address0,
        f2_4_ce0,
        f2_4_we0,
        f2_4_d0,
        f2_3_address0,
        f2_3_ce0,
        f2_3_we0,
        f2_3_d0,
        f2_2_address0,
        f2_2_ce0,
        f2_2_we0,
        f2_2_d0,
        f2_1_address0,
        f2_1_ce0,
        f2_1_we0,
        f2_1_d0,
        f2_address0,
        f2_ce0,
        f2_we0,
        f2_d0,
        acc2_address0,
        acc2_ce0,
        acc2_q0,
        acc2_1_address0,
        acc2_1_ce0,
        acc2_1_q0,
        acc2_2_address0,
        acc2_2_ce0,
        acc2_2_q0,
        acc2_3_address0,
        acc2_3_ce0,
        acc2_3_q0,
        acc2_4_address0,
        acc2_4_ce0,
        acc2_4_q0,
        acc2_5_address0,
        acc2_5_ce0,
        acc2_5_q0,
        acc2_6_address0,
        acc2_6_ce0,
        acc2_6_q0,
        acc2_7_address0,
        acc2_7_ce0,
        acc2_7_q0,
        grp_fu_1015_p_din0,
        grp_fu_1015_p_din1,
        grp_fu_1015_p_opcode,
        grp_fu_1015_p_dout0,
        grp_fu_1015_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] f2_7_address0;
output   f2_7_ce0;
output   f2_7_we0;
output  [31:0] f2_7_d0;
output  [1:0] f2_6_address0;
output   f2_6_ce0;
output   f2_6_we0;
output  [31:0] f2_6_d0;
output  [1:0] f2_5_address0;
output   f2_5_ce0;
output   f2_5_we0;
output  [31:0] f2_5_d0;
output  [1:0] f2_4_address0;
output   f2_4_ce0;
output   f2_4_we0;
output  [31:0] f2_4_d0;
output  [1:0] f2_3_address0;
output   f2_3_ce0;
output   f2_3_we0;
output  [31:0] f2_3_d0;
output  [1:0] f2_2_address0;
output   f2_2_ce0;
output   f2_2_we0;
output  [31:0] f2_2_d0;
output  [1:0] f2_1_address0;
output   f2_1_ce0;
output   f2_1_we0;
output  [31:0] f2_1_d0;
output  [1:0] f2_address0;
output   f2_ce0;
output   f2_we0;
output  [31:0] f2_d0;
output  [1:0] acc2_address0;
output   acc2_ce0;
input  [31:0] acc2_q0;
output  [1:0] acc2_1_address0;
output   acc2_1_ce0;
input  [31:0] acc2_1_q0;
output  [1:0] acc2_2_address0;
output   acc2_2_ce0;
input  [31:0] acc2_2_q0;
output  [1:0] acc2_3_address0;
output   acc2_3_ce0;
input  [31:0] acc2_3_q0;
output  [1:0] acc2_4_address0;
output   acc2_4_ce0;
input  [31:0] acc2_4_q0;
output  [1:0] acc2_5_address0;
output   acc2_5_ce0;
input  [31:0] acc2_5_q0;
output  [1:0] acc2_6_address0;
output   acc2_6_ce0;
input  [31:0] acc2_6_q0;
output  [1:0] acc2_7_address0;
output   acc2_7_ce0;
input  [31:0] acc2_7_q0;
output  [31:0] grp_fu_1015_p_din0;
output  [31:0] grp_fu_1015_p_din1;
output  [4:0] grp_fu_1015_p_opcode;
input  [0:0] grp_fu_1015_p_dout0;
output   grp_fu_1015_p_ce;

reg ap_idle;
reg f2_7_ce0;
reg f2_7_we0;
reg f2_6_ce0;
reg f2_6_we0;
reg f2_5_ce0;
reg f2_5_we0;
reg f2_4_ce0;
reg f2_4_we0;
reg f2_3_ce0;
reg f2_3_we0;
reg f2_2_ce0;
reg f2_2_we0;
reg f2_1_ce0;
reg f2_1_we0;
reg f2_ce0;
reg f2_we0;
reg acc2_ce0;
reg acc2_1_ce0;
reg acc2_2_ce0;
reg acc2_3_ce0;
reg acc2_4_ce0;
reg acc2_5_ce0;
reg acc2_6_ce0;
reg acc2_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_346_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln139_fu_364_p1;
reg   [63:0] zext_ln139_reg_790;
reg   [63:0] zext_ln139_reg_790_pp0_iter1_reg;
reg   [31:0] t_reg_842;
reg   [31:0] acc2_1_load_reg_849;
reg   [31:0] acc2_2_load_reg_856;
reg   [31:0] acc2_3_load_reg_863;
reg   [31:0] acc2_4_load_reg_870;
reg   [31:0] acc2_5_load_reg_877;
reg   [31:0] acc2_6_load_reg_884;
reg   [31:0] t_1_reg_891;
wire    ap_block_pp0_stage0;
reg   [5:0] n2_1_fu_78;
wire   [5:0] add_ln139_fu_376_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_n2;
wire   [1:0] lshr_ln1_fu_354_p4;
wire   [31:0] bitcast_ln143_fu_387_p1;
wire   [7:0] tmp_1_fu_390_p4;
wire   [22:0] trunc_ln143_fu_400_p1;
wire   [0:0] icmp_ln143_1_fu_410_p2;
wire   [0:0] icmp_ln143_fu_404_p2;
wire   [0:0] or_ln143_fu_416_p2;
wire   [0:0] and_ln143_fu_422_p2;
wire   [31:0] bitcast_ln143_1_fu_436_p1;
wire   [7:0] tmp_3_fu_439_p4;
wire   [22:0] trunc_ln143_1_fu_449_p1;
wire   [0:0] icmp_ln143_3_fu_459_p2;
wire   [0:0] icmp_ln143_2_fu_453_p2;
wire   [0:0] or_ln143_1_fu_465_p2;
wire   [0:0] grp_fu_296_p2;
wire   [0:0] and_ln143_1_fu_471_p2;
wire   [31:0] bitcast_ln143_2_fu_485_p1;
wire   [7:0] tmp_5_fu_488_p4;
wire   [22:0] trunc_ln143_2_fu_498_p1;
wire   [0:0] icmp_ln143_5_fu_508_p2;
wire   [0:0] icmp_ln143_4_fu_502_p2;
wire   [0:0] or_ln143_2_fu_514_p2;
wire   [0:0] grp_fu_302_p2;
wire   [0:0] and_ln143_2_fu_520_p2;
wire   [31:0] bitcast_ln143_3_fu_534_p1;
wire   [7:0] tmp_7_fu_537_p4;
wire   [22:0] trunc_ln143_3_fu_547_p1;
wire   [0:0] icmp_ln143_7_fu_557_p2;
wire   [0:0] icmp_ln143_6_fu_551_p2;
wire   [0:0] or_ln143_3_fu_563_p2;
wire   [0:0] grp_fu_308_p2;
wire   [0:0] and_ln143_3_fu_569_p2;
wire   [31:0] bitcast_ln143_4_fu_583_p1;
wire   [7:0] tmp_9_fu_586_p4;
wire   [22:0] trunc_ln143_4_fu_596_p1;
wire   [0:0] icmp_ln143_9_fu_606_p2;
wire   [0:0] icmp_ln143_8_fu_600_p2;
wire   [0:0] or_ln143_4_fu_612_p2;
wire   [0:0] grp_fu_314_p2;
wire   [0:0] and_ln143_4_fu_618_p2;
wire   [31:0] bitcast_ln143_5_fu_632_p1;
wire   [7:0] tmp_10_fu_635_p4;
wire   [22:0] trunc_ln143_5_fu_645_p1;
wire   [0:0] icmp_ln143_11_fu_655_p2;
wire   [0:0] icmp_ln143_10_fu_649_p2;
wire   [0:0] or_ln143_5_fu_661_p2;
wire   [0:0] grp_fu_320_p2;
wire   [0:0] and_ln143_5_fu_667_p2;
wire   [31:0] bitcast_ln143_6_fu_681_p1;
wire   [7:0] tmp_12_fu_684_p4;
wire   [22:0] trunc_ln143_6_fu_694_p1;
wire   [0:0] icmp_ln143_13_fu_704_p2;
wire   [0:0] icmp_ln143_12_fu_698_p2;
wire   [0:0] or_ln143_6_fu_710_p2;
wire   [0:0] grp_fu_326_p2;
wire   [0:0] and_ln143_6_fu_716_p2;
wire   [31:0] bitcast_ln143_7_fu_730_p1;
wire   [7:0] tmp_14_fu_733_p4;
wire   [22:0] trunc_ln143_7_fu_743_p1;
wire   [0:0] icmp_ln143_15_fu_753_p2;
wire   [0:0] icmp_ln143_14_fu_747_p2;
wire   [0:0] or_ln143_7_fu_759_p2;
wire   [0:0] grp_fu_332_p2;
wire   [0:0] and_ln143_7_fu_765_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U397(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_1_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_296_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U398(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_2_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_302_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U399(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_3_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_308_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U400(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_4_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_314_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U401(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_5_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_320_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U402(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_6_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_326_p2)
);

srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U403(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc2_7_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_332_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_346_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n2_1_fu_78 <= add_ln139_fu_376_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n2_1_fu_78 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_1_load_reg_849 <= acc2_1_q0;
        acc2_2_load_reg_856 <= acc2_2_q0;
        acc2_3_load_reg_863 <= acc2_3_q0;
        acc2_4_load_reg_870 <= acc2_4_q0;
        acc2_5_load_reg_877 <= acc2_5_q0;
        acc2_6_load_reg_884 <= acc2_6_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        t_1_reg_891 <= acc2_7_q0;
        t_reg_842 <= acc2_q0;
        zext_ln139_reg_790_pp0_iter1_reg[1 : 0] <= zext_ln139_reg_790[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_346_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln139_reg_790[1 : 0] <= zext_ln139_fu_364_p1[1 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_1_ce0 = 1'b1;
    end else begin
        acc2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_2_ce0 = 1'b1;
    end else begin
        acc2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_3_ce0 = 1'b1;
    end else begin
        acc2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_4_ce0 = 1'b1;
    end else begin
        acc2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_5_ce0 = 1'b1;
    end else begin
        acc2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_6_ce0 = 1'b1;
    end else begin
        acc2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_7_ce0 = 1'b1;
    end else begin
        acc2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc2_ce0 = 1'b1;
    end else begin
        acc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_346_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n2 = 6'd0;
    end else begin
        ap_sig_allocacmp_n2 = n2_1_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_1_ce0 = 1'b1;
    end else begin
        f2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_1_we0 = 1'b1;
    end else begin
        f2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_2_ce0 = 1'b1;
    end else begin
        f2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_2_we0 = 1'b1;
    end else begin
        f2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_3_ce0 = 1'b1;
    end else begin
        f2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_3_we0 = 1'b1;
    end else begin
        f2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_4_ce0 = 1'b1;
    end else begin
        f2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_4_we0 = 1'b1;
    end else begin
        f2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_5_ce0 = 1'b1;
    end else begin
        f2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_5_we0 = 1'b1;
    end else begin
        f2_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_6_ce0 = 1'b1;
    end else begin
        f2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_6_we0 = 1'b1;
    end else begin
        f2_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_7_ce0 = 1'b1;
    end else begin
        f2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_7_we0 = 1'b1;
    end else begin
        f2_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_ce0 = 1'b1;
    end else begin
        f2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f2_we0 = 1'b1;
    end else begin
        f2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc2_1_address0 = zext_ln139_fu_364_p1;

assign acc2_2_address0 = zext_ln139_fu_364_p1;

assign acc2_3_address0 = zext_ln139_fu_364_p1;

assign acc2_4_address0 = zext_ln139_fu_364_p1;

assign acc2_5_address0 = zext_ln139_fu_364_p1;

assign acc2_6_address0 = zext_ln139_fu_364_p1;

assign acc2_7_address0 = zext_ln139_fu_364_p1;

assign acc2_address0 = zext_ln139_fu_364_p1;

assign add_ln139_fu_376_p2 = (ap_sig_allocacmp_n2 + 6'd8);

assign and_ln143_1_fu_471_p2 = (or_ln143_1_fu_465_p2 & grp_fu_296_p2);

assign and_ln143_2_fu_520_p2 = (or_ln143_2_fu_514_p2 & grp_fu_302_p2);

assign and_ln143_3_fu_569_p2 = (or_ln143_3_fu_563_p2 & grp_fu_308_p2);

assign and_ln143_4_fu_618_p2 = (or_ln143_4_fu_612_p2 & grp_fu_314_p2);

assign and_ln143_5_fu_667_p2 = (or_ln143_5_fu_661_p2 & grp_fu_320_p2);

assign and_ln143_6_fu_716_p2 = (or_ln143_6_fu_710_p2 & grp_fu_326_p2);

assign and_ln143_7_fu_765_p2 = (or_ln143_7_fu_759_p2 & grp_fu_332_p2);

assign and_ln143_fu_422_p2 = (or_ln143_fu_416_p2 & grp_fu_1015_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln143_1_fu_436_p1 = acc2_1_load_reg_849;

assign bitcast_ln143_2_fu_485_p1 = acc2_2_load_reg_856;

assign bitcast_ln143_3_fu_534_p1 = acc2_3_load_reg_863;

assign bitcast_ln143_4_fu_583_p1 = acc2_4_load_reg_870;

assign bitcast_ln143_5_fu_632_p1 = acc2_5_load_reg_877;

assign bitcast_ln143_6_fu_681_p1 = acc2_6_load_reg_884;

assign bitcast_ln143_7_fu_730_p1 = t_1_reg_891;

assign bitcast_ln143_fu_387_p1 = t_reg_842;

assign f2_1_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_1_d0 = ((and_ln143_1_fu_471_p2[0:0] == 1'b1) ? acc2_1_load_reg_849 : 32'd0);

assign f2_2_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_2_d0 = ((and_ln143_2_fu_520_p2[0:0] == 1'b1) ? acc2_2_load_reg_856 : 32'd0);

assign f2_3_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_3_d0 = ((and_ln143_3_fu_569_p2[0:0] == 1'b1) ? acc2_3_load_reg_863 : 32'd0);

assign f2_4_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_4_d0 = ((and_ln143_4_fu_618_p2[0:0] == 1'b1) ? acc2_4_load_reg_870 : 32'd0);

assign f2_5_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_5_d0 = ((and_ln143_5_fu_667_p2[0:0] == 1'b1) ? acc2_5_load_reg_877 : 32'd0);

assign f2_6_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_6_d0 = ((and_ln143_6_fu_716_p2[0:0] == 1'b1) ? acc2_6_load_reg_884 : 32'd0);

assign f2_7_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_7_d0 = ((and_ln143_7_fu_765_p2[0:0] == 1'b1) ? t_1_reg_891 : 32'd0);

assign f2_address0 = zext_ln139_reg_790_pp0_iter1_reg;

assign f2_d0 = ((and_ln143_fu_422_p2[0:0] == 1'b1) ? t_reg_842 : 32'd0);

assign grp_fu_1015_p_ce = 1'b1;

assign grp_fu_1015_p_din0 = acc2_q0;

assign grp_fu_1015_p_din1 = 32'd0;

assign grp_fu_1015_p_opcode = 5'd2;

assign icmp_ln143_10_fu_649_p2 = ((tmp_10_fu_635_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_11_fu_655_p2 = ((trunc_ln143_5_fu_645_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_12_fu_698_p2 = ((tmp_12_fu_684_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_13_fu_704_p2 = ((trunc_ln143_6_fu_694_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_14_fu_747_p2 = ((tmp_14_fu_733_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_15_fu_753_p2 = ((trunc_ln143_7_fu_743_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_1_fu_410_p2 = ((trunc_ln143_fu_400_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_2_fu_453_p2 = ((tmp_3_fu_439_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_3_fu_459_p2 = ((trunc_ln143_1_fu_449_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_4_fu_502_p2 = ((tmp_5_fu_488_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_5_fu_508_p2 = ((trunc_ln143_2_fu_498_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_6_fu_551_p2 = ((tmp_7_fu_537_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_7_fu_557_p2 = ((trunc_ln143_3_fu_547_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_8_fu_600_p2 = ((tmp_9_fu_586_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln143_9_fu_606_p2 = ((trunc_ln143_4_fu_596_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_404_p2 = ((tmp_1_fu_390_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_354_p4 = {{ap_sig_allocacmp_n2[4:3]}};

assign or_ln143_1_fu_465_p2 = (icmp_ln143_3_fu_459_p2 | icmp_ln143_2_fu_453_p2);

assign or_ln143_2_fu_514_p2 = (icmp_ln143_5_fu_508_p2 | icmp_ln143_4_fu_502_p2);

assign or_ln143_3_fu_563_p2 = (icmp_ln143_7_fu_557_p2 | icmp_ln143_6_fu_551_p2);

assign or_ln143_4_fu_612_p2 = (icmp_ln143_9_fu_606_p2 | icmp_ln143_8_fu_600_p2);

assign or_ln143_5_fu_661_p2 = (icmp_ln143_11_fu_655_p2 | icmp_ln143_10_fu_649_p2);

assign or_ln143_6_fu_710_p2 = (icmp_ln143_13_fu_704_p2 | icmp_ln143_12_fu_698_p2);

assign or_ln143_7_fu_759_p2 = (icmp_ln143_15_fu_753_p2 | icmp_ln143_14_fu_747_p2);

assign or_ln143_fu_416_p2 = (icmp_ln143_fu_404_p2 | icmp_ln143_1_fu_410_p2);

assign tmp_10_fu_635_p4 = {{bitcast_ln143_5_fu_632_p1[30:23]}};

assign tmp_12_fu_684_p4 = {{bitcast_ln143_6_fu_681_p1[30:23]}};

assign tmp_14_fu_733_p4 = {{bitcast_ln143_7_fu_730_p1[30:23]}};

assign tmp_1_fu_390_p4 = {{bitcast_ln143_fu_387_p1[30:23]}};

assign tmp_3_fu_439_p4 = {{bitcast_ln143_1_fu_436_p1[30:23]}};

assign tmp_5_fu_488_p4 = {{bitcast_ln143_2_fu_485_p1[30:23]}};

assign tmp_7_fu_537_p4 = {{bitcast_ln143_3_fu_534_p1[30:23]}};

assign tmp_9_fu_586_p4 = {{bitcast_ln143_4_fu_583_p1[30:23]}};

assign tmp_fu_346_p3 = ap_sig_allocacmp_n2[32'd5];

assign trunc_ln143_1_fu_449_p1 = bitcast_ln143_1_fu_436_p1[22:0];

assign trunc_ln143_2_fu_498_p1 = bitcast_ln143_2_fu_485_p1[22:0];

assign trunc_ln143_3_fu_547_p1 = bitcast_ln143_3_fu_534_p1[22:0];

assign trunc_ln143_4_fu_596_p1 = bitcast_ln143_4_fu_583_p1[22:0];

assign trunc_ln143_5_fu_645_p1 = bitcast_ln143_5_fu_632_p1[22:0];

assign trunc_ln143_6_fu_694_p1 = bitcast_ln143_6_fu_681_p1[22:0];

assign trunc_ln143_7_fu_743_p1 = bitcast_ln143_7_fu_730_p1[22:0];

assign trunc_ln143_fu_400_p1 = bitcast_ln143_fu_387_p1[22:0];

assign zext_ln139_fu_364_p1 = lshr_ln1_fu_354_p4;

always @ (posedge ap_clk) begin
    zext_ln139_reg_790[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln139_reg_790_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //srcnn_fuse_9x9_1x1_Pipeline_Conv2_ReLU
