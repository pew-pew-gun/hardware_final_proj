// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_store_tile_mm_Pipeline_Out_writex (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RFIFONUM,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        zext_ln558,
        bound,
        tw_eff,
        zext_ln558_2,
        zext_ln564,
        zext_ln558_1,
        out_r,
        outbuf_address0,
        outbuf_ce0,
        outbuf_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [63:0] m_axi_gmem_out_AWADDR;
output  [0:0] m_axi_gmem_out_AWID;
output  [31:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [0:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [31:0] m_axi_gmem_out_WDATA;
output  [3:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [0:0] m_axi_gmem_out_WID;
output  [0:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [63:0] m_axi_gmem_out_ARADDR;
output  [0:0] m_axi_gmem_out_ARID;
output  [31:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [0:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [31:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [0:0] m_axi_gmem_out_RID;
input  [8:0] m_axi_gmem_out_RFIFONUM;
input  [0:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [0:0] m_axi_gmem_out_BID;
input  [0:0] m_axi_gmem_out_BUSER;
input  [8:0] zext_ln558;
input  [15:0] bound;
input  [7:0] tw_eff;
input  [7:0] zext_ln558_2;
input  [4:0] zext_ln564;
input  [10:0] zext_ln558_1;
input  [63:0] out_r;
output  [8:0] outbuf_address0;
output   outbuf_ce0;
input  [31:0] outbuf_q0;

reg ap_idle;
reg m_axi_gmem_out_AWVALID;
reg m_axi_gmem_out_WVALID;
reg m_axi_gmem_out_BREADY;
reg outbuf_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] or_ln558_reg_513;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg   [0:0] icmp_ln561_1_reg_527;
reg   [0:0] icmp_ln561_1_reg_527_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln558_fu_278_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_out_blk_n_B;
wire    ap_block_pp0_stage0;
reg    gmem_out_blk_n_W;
reg    gmem_out_blk_n_AW;
wire   [31:0] zext_ln558_2_cast_fu_205_p1;
reg   [31:0] zext_ln558_2_cast_reg_504;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln558_reg_509;
wire   [0:0] or_ln558_fu_305_p2;
reg   [61:0] sext_ln561_mid2_v_reg_517;
wire   [0:0] icmp_ln561_1_fu_442_p2;
reg   [0:0] icmp_ln561_1_reg_527_pp0_iter1_reg;
reg   [0:0] icmp_ln561_1_reg_527_pp0_iter2_reg;
reg   [0:0] icmp_ln561_1_reg_527_pp0_iter3_reg;
reg   [0:0] icmp_ln561_1_reg_527_pp0_iter4_reg;
reg   [0:0] icmp_ln561_1_reg_527_pp0_iter5_reg;
reg   [31:0] outbuf_load_reg_531;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_193_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln564_3_fu_431_p1;
wire  signed [63:0] sext_ln558_2_fu_463_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] x_fu_104;
wire   [7:0] add_ln561_fu_436_p2;
reg   [7:0] ap_sig_allocacmp_x_load;
reg   [7:0] y_fu_108;
wire   [7:0] select_ln558_1_fu_319_p3;
reg   [7:0] ap_sig_allocacmp_y_1;
reg   [15:0] indvar_flatten_fu_112;
wire   [15:0] add_ln558_3_fu_284_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [9:0] zext_ln558_cast_fu_209_p1;
wire   [9:0] zext_ln558_3_fu_238_p1;
wire   [9:0] empty_fu_242_p2;
wire   [19:0] p_shl_i_i_fu_248_p3;
wire   [11:0] p_shl2_i_i_fu_260_p3;
wire   [20:0] p_shl_cast14_i_i_fu_256_p1;
wire   [20:0] p_shl2_cast15_i_i_fu_268_p1;
wire   [0:0] icmp_ln561_fu_299_p2;
wire   [7:0] add_ln558_fu_293_p2;
wire   [8:0] zext_ln564_cast_fu_213_p1;
wire   [8:0] zext_ln564_1_fu_327_p1;
wire   [8:0] add_ln564_fu_331_p2;
wire   [9:0] zext_ln558_4_fu_343_p1;
wire   [9:0] p_mid1_fu_347_p2;
wire   [19:0] p_shl_i_i_mid1_fu_353_p3;
wire   [11:0] p_shl2_i_i_mid1_fu_365_p3;
wire   [20:0] p_shl_cast14_i_i_mid1_fu_361_p1;
wire   [20:0] p_shl2_cast15_i_i_mid1_fu_373_p1;
wire   [20:0] p_mid17_fu_377_p2;
wire   [20:0] empty_68_fu_272_p2;
wire   [20:0] select_ln558_2_fu_383_p3;
wire  signed [21:0] sext_ln558_fu_391_p1;
wire   [21:0] zext_ln558_1_cast_fu_201_p1;
wire   [21:0] add_ln558_1_fu_395_p2;
wire  signed [63:0] sext_ln558_1_fu_401_p1;
wire   [63:0] add_ln558_2_fu_405_p2;
wire   [7:0] select_ln558_fu_311_p3;
wire   [8:0] shl_ln564_fu_337_p2;
wire   [8:0] zext_ln564_2_fu_421_p1;
wire   [8:0] add_ln564_1_fu_425_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_454;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln558_fu_278_p2 == 1'd0))) begin
            indvar_flatten_fu_112 <= add_ln558_3_fu_284_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_112 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln558_fu_278_p2 == 1'd0))) begin
            x_fu_104 <= add_ln561_fu_436_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_104 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln558_fu_278_p2 == 1'd0))) begin
            y_fu_108 <= select_ln558_1_fu_319_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_108 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln558_reg_509 <= icmp_ln558_fu_278_p2;
        icmp_ln561_1_reg_527_pp0_iter1_reg <= icmp_ln561_1_reg_527;
        outbuf_load_reg_531 <= outbuf_q0;
        zext_ln558_2_cast_reg_504[7 : 0] <= zext_ln558_2_cast_fu_205_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln561_1_reg_527_pp0_iter2_reg <= icmp_ln561_1_reg_527_pp0_iter1_reg;
        icmp_ln561_1_reg_527_pp0_iter3_reg <= icmp_ln561_1_reg_527_pp0_iter2_reg;
        icmp_ln561_1_reg_527_pp0_iter4_reg <= icmp_ln561_1_reg_527_pp0_iter3_reg;
        icmp_ln561_1_reg_527_pp0_iter5_reg <= icmp_ln561_1_reg_527_pp0_iter4_reg;
        icmp_ln561_1_reg_527_pp0_iter6_reg <= icmp_ln561_1_reg_527_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln561_1_reg_527 <= icmp_ln561_1_fu_442_p2;
        or_ln558_reg_513 <= or_ln558_fu_305_p2;
        sext_ln561_mid2_v_reg_517 <= {{add_ln558_2_fu_405_p2[63:2]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_454)) begin
            ap_phi_mux_first_iter_0_phi_fu_193_p4 = 1'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_0_phi_fu_193_p4 = 1'd1;
        end else begin
            ap_phi_mux_first_iter_0_phi_fu_193_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_193_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_112;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_x_load = 8'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_y_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_y_1 = y_fu_108;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (or_ln558_reg_513 == 1'd1))) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln561_1_reg_527_pp0_iter6_reg == 1'd1))) begin
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln558_reg_513 == 1'd1))) begin
        m_axi_gmem_out_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln561_1_reg_527_pp0_iter6_reg == 1'd1))) begin
        m_axi_gmem_out_BREADY = 1'b1;
    end else begin
        m_axi_gmem_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_out_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outbuf_ce0 = 1'b1;
    end else begin
        outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln558_1_fu_395_p2 = ($signed(sext_ln558_fu_391_p1) + $signed(zext_ln558_1_cast_fu_201_p1));

assign add_ln558_2_fu_405_p2 = ($signed(sext_ln558_1_fu_401_p1) + $signed(out_r));

assign add_ln558_3_fu_284_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln558_fu_293_p2 = (ap_sig_allocacmp_y_1 + 8'd1);

assign add_ln561_fu_436_p2 = (select_ln558_fu_311_p3 + 8'd1);

assign add_ln564_1_fu_425_p2 = (shl_ln564_fu_337_p2 + zext_ln564_2_fu_421_p1);

assign add_ln564_fu_331_p2 = (zext_ln564_cast_fu_213_p1 + zext_ln564_1_fu_327_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln561_1_reg_527_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln561_1_reg_527_pp0_iter6_reg == 1'd1)) | ((m_axi_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln561_1_reg_527_pp0_iter6_reg == 1'd1)) | ((m_axi_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem_out_AWREADY == 1'b0) & (or_ln558_reg_513 == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((m_axi_gmem_out_BVALID == 1'b0) & (icmp_ln561_1_reg_527_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_condition_454 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln558_reg_509 == 1'd0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_68_fu_272_p2 = (p_shl_cast14_i_i_fu_256_p1 - p_shl2_cast15_i_i_fu_268_p1);

assign empty_fu_242_p2 = (zext_ln558_cast_fu_209_p1 + zext_ln558_3_fu_238_p1);

assign icmp_ln558_fu_278_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound) ? 1'b1 : 1'b0);

assign icmp_ln561_1_fu_442_p2 = ((add_ln561_fu_436_p2 == tw_eff) ? 1'b1 : 1'b0);

assign icmp_ln561_fu_299_p2 = ((ap_sig_allocacmp_x_load == tw_eff) ? 1'b1 : 1'b0);

assign m_axi_gmem_out_ARADDR = 64'd0;

assign m_axi_gmem_out_ARBURST = 2'd0;

assign m_axi_gmem_out_ARCACHE = 4'd0;

assign m_axi_gmem_out_ARID = 1'd0;

assign m_axi_gmem_out_ARLEN = 32'd0;

assign m_axi_gmem_out_ARLOCK = 2'd0;

assign m_axi_gmem_out_ARPROT = 3'd0;

assign m_axi_gmem_out_ARQOS = 4'd0;

assign m_axi_gmem_out_ARREGION = 4'd0;

assign m_axi_gmem_out_ARSIZE = 3'd0;

assign m_axi_gmem_out_ARUSER = 1'd0;

assign m_axi_gmem_out_ARVALID = 1'b0;

assign m_axi_gmem_out_AWADDR = sext_ln558_2_fu_463_p1;

assign m_axi_gmem_out_AWBURST = 2'd0;

assign m_axi_gmem_out_AWCACHE = 4'd0;

assign m_axi_gmem_out_AWID = 1'd0;

assign m_axi_gmem_out_AWLEN = zext_ln558_2_cast_reg_504;

assign m_axi_gmem_out_AWLOCK = 2'd0;

assign m_axi_gmem_out_AWPROT = 3'd0;

assign m_axi_gmem_out_AWQOS = 4'd0;

assign m_axi_gmem_out_AWREGION = 4'd0;

assign m_axi_gmem_out_AWSIZE = 3'd0;

assign m_axi_gmem_out_AWUSER = 1'd0;

assign m_axi_gmem_out_RREADY = 1'b0;

assign m_axi_gmem_out_WDATA = outbuf_load_reg_531;

assign m_axi_gmem_out_WID = 1'd0;

assign m_axi_gmem_out_WLAST = 1'b0;

assign m_axi_gmem_out_WSTRB = 4'd15;

assign m_axi_gmem_out_WUSER = 1'd0;

assign or_ln558_fu_305_p2 = (icmp_ln561_fu_299_p2 | ap_phi_mux_first_iter_0_phi_fu_193_p4);

assign outbuf_address0 = zext_ln564_3_fu_431_p1;

assign p_mid17_fu_377_p2 = (p_shl_cast14_i_i_mid1_fu_361_p1 - p_shl2_cast15_i_i_mid1_fu_373_p1);

assign p_mid1_fu_347_p2 = (zext_ln558_cast_fu_209_p1 + zext_ln558_4_fu_343_p1);

assign p_shl2_cast15_i_i_fu_268_p1 = p_shl2_i_i_fu_260_p3;

assign p_shl2_cast15_i_i_mid1_fu_373_p1 = p_shl2_i_i_mid1_fu_365_p3;

assign p_shl2_i_i_fu_260_p3 = {{empty_fu_242_p2}, {2'd0}};

assign p_shl2_i_i_mid1_fu_365_p3 = {{p_mid1_fu_347_p2}, {2'd0}};

assign p_shl_cast14_i_i_fu_256_p1 = p_shl_i_i_fu_248_p3;

assign p_shl_cast14_i_i_mid1_fu_361_p1 = p_shl_i_i_mid1_fu_353_p3;

assign p_shl_i_i_fu_248_p3 = {{empty_fu_242_p2}, {10'd0}};

assign p_shl_i_i_mid1_fu_353_p3 = {{p_mid1_fu_347_p2}, {10'd0}};

assign select_ln558_1_fu_319_p3 = ((icmp_ln561_fu_299_p2[0:0] == 1'b1) ? add_ln558_fu_293_p2 : ap_sig_allocacmp_y_1);

assign select_ln558_2_fu_383_p3 = ((icmp_ln561_fu_299_p2[0:0] == 1'b1) ? p_mid17_fu_377_p2 : empty_68_fu_272_p2);

assign select_ln558_fu_311_p3 = ((icmp_ln561_fu_299_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_x_load);

assign sext_ln558_1_fu_401_p1 = $signed(add_ln558_1_fu_395_p2);

assign sext_ln558_2_fu_463_p1 = $signed(sext_ln561_mid2_v_reg_517);

assign sext_ln558_fu_391_p1 = $signed(select_ln558_2_fu_383_p3);

assign shl_ln564_fu_337_p2 = add_ln564_fu_331_p2 << 9'd4;

assign zext_ln558_1_cast_fu_201_p1 = zext_ln558_1;

assign zext_ln558_2_cast_fu_205_p1 = zext_ln558_2;

assign zext_ln558_3_fu_238_p1 = ap_sig_allocacmp_y_1;

assign zext_ln558_4_fu_343_p1 = add_ln558_fu_293_p2;

assign zext_ln558_cast_fu_209_p1 = zext_ln558;

assign zext_ln564_1_fu_327_p1 = select_ln558_1_fu_319_p3;

assign zext_ln564_2_fu_421_p1 = select_ln558_fu_311_p3;

assign zext_ln564_3_fu_431_p1 = add_ln564_1_fu_425_p2;

assign zext_ln564_cast_fu_213_p1 = zext_ln564;

always @ (posedge ap_clk) begin
    zext_ln558_2_cast_reg_504[31:8] <= 24'b000000000000000000000000;
end

endmodule //srcnn_store_tile_mm_Pipeline_Out_writex
