// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_make_win97_Pipeline_win9x9_read_pix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_pix_i_dout,
        s_pix_i_num_data_valid,
        s_pix_i_fifo_cap,
        s_pix_i_empty_n,
        s_pix_i_read,
        s_win_i_din,
        s_win_i_num_data_valid,
        s_win_i_fifo_cap,
        s_win_i_full_n,
        s_win_i_write,
        empty,
        zext_ln125,
        zext_ln124
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] s_pix_i_dout;
input  [9:0] s_pix_i_num_data_valid;
input  [9:0] s_pix_i_fifo_cap;
input   s_pix_i_empty_n;
output   s_pix_i_read;
output  [2592:0] s_win_i_din;
input  [6:0] s_win_i_num_data_valid;
input  [6:0] s_win_i_fifo_cap;
input   s_win_i_full_n;
output   s_win_i_write;
input  [16:0] empty;
input  [8:0] zext_ln125;
input  [8:0] zext_ln124;

reg ap_idle;
reg s_pix_i_read;
reg s_win_i_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln145_reg_2713;
reg   [0:0] and_ln180_reg_2805;
reg    ap_predicate_op385_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln145_fu_731_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_pix_i_blk_n;
wire    ap_block_pp0_stage0;
reg    s_win_i_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln124_cast_fu_619_p1;
reg   [31:0] zext_ln124_cast_reg_2702;
wire   [31:0] zext_ln125_cast_fu_623_p1;
reg   [31:0] zext_ln125_cast_reg_2707;
reg   [4:0] lb1_7_addr_reg_2717;
wire   [0:0] addr_cmp120_fu_757_p2;
reg   [0:0] addr_cmp120_reg_2723;
reg   [4:0] lb1_6_addr_reg_2728;
wire   [0:0] addr_cmp114_fu_766_p2;
reg   [0:0] addr_cmp114_reg_2734;
reg   [4:0] lb1_5_addr_reg_2739;
wire   [0:0] addr_cmp108_fu_775_p2;
reg   [0:0] addr_cmp108_reg_2745;
reg   [4:0] lb1_4_addr_reg_2750;
wire   [0:0] addr_cmp102_fu_784_p2;
reg   [0:0] addr_cmp102_reg_2756;
reg   [4:0] lb1_3_addr_reg_2761;
wire   [0:0] addr_cmp96_fu_793_p2;
reg   [0:0] addr_cmp96_reg_2767;
reg   [4:0] lb1_2_addr_reg_2772;
wire   [0:0] addr_cmp90_fu_802_p2;
reg   [0:0] addr_cmp90_reg_2778;
reg   [4:0] lb1_1_addr_reg_2783;
wire   [0:0] addr_cmp84_fu_811_p2;
reg   [0:0] addr_cmp84_reg_2789;
reg   [4:0] lb1_addr_reg_2794;
wire   [0:0] addr_cmp_fu_820_p2;
reg   [0:0] addr_cmp_reg_2800;
wire   [0:0] and_ln180_fu_898_p2;
wire   [0:0] w_valid_fu_914_p2;
reg   [0:0] w_valid_reg_2809;
reg    lb1_ce0;
reg    lb1_we0;
wire   [31:0] lb1_d0;
wire   [4:0] lb1_address1;
reg    lb1_ce1;
wire   [31:0] lb1_q1;
reg    lb1_1_ce0;
reg    lb1_1_we0;
wire   [4:0] lb1_1_address1;
reg    lb1_1_ce1;
wire   [31:0] lb1_1_q1;
reg    lb1_2_ce0;
reg    lb1_2_we0;
wire   [4:0] lb1_2_address1;
reg    lb1_2_ce1;
wire   [31:0] lb1_2_q1;
reg    lb1_3_ce0;
reg    lb1_3_we0;
wire   [4:0] lb1_3_address1;
reg    lb1_3_ce1;
wire   [31:0] lb1_3_q1;
reg    lb1_4_ce0;
reg    lb1_4_we0;
wire   [4:0] lb1_4_address1;
reg    lb1_4_ce1;
wire   [31:0] lb1_4_q1;
reg    lb1_5_ce0;
reg    lb1_5_we0;
wire   [4:0] lb1_5_address1;
reg    lb1_5_ce1;
wire   [31:0] lb1_5_q1;
reg    lb1_6_ce0;
reg    lb1_6_we0;
wire   [4:0] lb1_6_address1;
reg    lb1_6_ce1;
wire   [31:0] lb1_6_q1;
reg    lb1_7_ce0;
reg    lb1_7_we0;
wire   [4:0] lb1_7_address1;
reg    lb1_7_ce1;
wire   [31:0] lb1_7_q1;
wire   [63:0] idxprom29_i_fu_742_p1;
reg   [63:0] reuse_addr_reg117_fu_64;
wire    ap_loop_init;
reg   [31:0] reuse_reg116_fu_68;
wire   [31:0] reuse_select115_fu_1175_p3;
reg   [63:0] reuse_addr_reg111_fu_72;
reg   [31:0] reuse_reg110_fu_76;
wire   [31:0] reuse_select109_fu_1186_p3;
reg   [63:0] reuse_addr_reg105_fu_80;
reg   [31:0] reuse_reg104_fu_84;
wire   [31:0] reuse_select103_fu_1197_p3;
reg   [63:0] reuse_addr_reg99_fu_88;
reg   [31:0] reuse_reg98_fu_92;
wire   [31:0] reuse_select97_fu_1208_p3;
reg   [63:0] reuse_addr_reg93_fu_96;
reg   [31:0] reuse_reg92_fu_100;
wire   [31:0] reuse_select91_fu_1219_p3;
reg   [63:0] reuse_addr_reg87_fu_104;
reg   [31:0] reuse_reg86_fu_108;
wire   [31:0] reuse_select85_fu_1230_p3;
reg   [63:0] reuse_addr_reg81_fu_112;
reg   [31:0] reuse_reg80_fu_116;
wire   [31:0] reuse_select_fu_1241_p3;
reg   [63:0] reuse_addr_reg_fu_120;
reg   [31:0] reuse_reg_fu_124;
wire   [31:0] pix_fu_1157_p1;
reg   [31:0] x_fu_128;
wire   [31:0] x_5_fu_937_p3;
reg   [31:0] y_fu_132;
wire   [31:0] y_3_fu_945_p3;
reg   [16:0] t_fu_136;
wire   [16:0] add_ln145_fu_736_p2;
reg   [31:0] empty_116_fu_140;
reg   [31:0] empty_117_fu_144;
reg   [31:0] empty_118_fu_148;
reg   [31:0] empty_119_fu_152;
reg   [31:0] empty_120_fu_156;
reg   [31:0] empty_121_fu_160;
reg   [31:0] empty_122_fu_164;
reg   [31:0] empty_123_fu_168;
reg   [31:0] empty_124_fu_172;
reg   [31:0] empty_125_fu_176;
reg   [31:0] empty_126_fu_180;
reg   [31:0] empty_127_fu_184;
reg   [31:0] empty_128_fu_188;
reg   [31:0] empty_129_fu_192;
reg   [31:0] empty_130_fu_196;
reg   [31:0] empty_131_fu_200;
wire   [31:0] reuse_select121_fu_1165_p3;
reg   [31:0] empty_132_fu_204;
reg   [31:0] empty_133_fu_208;
reg   [31:0] empty_134_fu_212;
reg   [31:0] empty_135_fu_216;
reg   [31:0] empty_136_fu_220;
reg   [31:0] empty_137_fu_224;
reg   [31:0] empty_138_fu_228;
reg   [31:0] empty_139_fu_232;
reg   [31:0] empty_140_fu_236;
reg   [31:0] empty_141_fu_240;
reg   [31:0] empty_142_fu_244;
reg   [31:0] empty_143_fu_248;
reg   [31:0] empty_144_fu_252;
reg   [31:0] empty_145_fu_256;
reg   [31:0] empty_146_fu_260;
reg   [31:0] empty_147_fu_264;
reg   [31:0] empty_148_fu_268;
reg   [31:0] empty_149_fu_272;
reg   [31:0] empty_150_fu_276;
reg   [31:0] empty_151_fu_280;
reg   [31:0] empty_152_fu_284;
reg   [31:0] empty_153_fu_288;
reg   [31:0] empty_154_fu_292;
reg   [31:0] empty_155_fu_296;
reg   [31:0] empty_156_fu_300;
reg   [31:0] empty_157_fu_304;
reg   [31:0] empty_158_fu_308;
reg   [31:0] empty_159_fu_312;
reg   [31:0] empty_160_fu_316;
reg   [31:0] empty_161_fu_320;
reg   [31:0] empty_162_fu_324;
reg   [31:0] empty_163_fu_328;
reg   [31:0] empty_164_fu_332;
reg   [31:0] empty_165_fu_336;
reg   [31:0] empty_166_fu_340;
reg   [31:0] empty_167_fu_344;
reg   [31:0] empty_168_fu_348;
reg   [31:0] empty_169_fu_352;
reg   [31:0] empty_170_fu_356;
reg   [31:0] empty_171_fu_360;
reg   [31:0] empty_172_fu_364;
reg   [31:0] empty_173_fu_368;
reg   [31:0] empty_174_fu_372;
reg   [31:0] empty_175_fu_376;
reg   [31:0] empty_176_fu_380;
reg   [31:0] empty_177_fu_384;
reg   [31:0] empty_178_fu_388;
reg   [31:0] empty_179_fu_392;
reg   [31:0] empty_180_fu_396;
reg   [31:0] empty_181_fu_400;
reg   [31:0] empty_182_fu_404;
reg   [31:0] empty_183_fu_408;
reg   [31:0] empty_184_fu_412;
reg   [31:0] empty_185_fu_416;
reg   [31:0] empty_186_fu_420;
reg   [31:0] empty_187_fu_424;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] tmp_3_fu_866_p4;
wire   [28:0] tmp_4_fu_882_p4;
wire   [0:0] icmp_ln180_fu_876_p2;
wire   [0:0] icmp_ln180_1_fu_892_p2;
wire   [0:0] icmp_ln192_fu_904_p2;
wire   [0:0] icmp_ln192_1_fu_909_p2;
wire   [31:0] x_4_fu_920_p2;
wire   [0:0] icmp_ln200_fu_926_p2;
wire   [31:0] add_ln202_fu_931_p2;
wire   [31:0] bitcast_ln196_71_fu_1600_p1;
wire   [31:0] bitcast_ln196_70_fu_1596_p1;
wire   [31:0] bitcast_ln196_69_fu_1592_p1;
wire   [31:0] bitcast_ln196_68_fu_1588_p1;
wire   [31:0] bitcast_ln196_67_fu_1584_p1;
wire   [31:0] bitcast_ln196_66_fu_1580_p1;
wire   [31:0] bitcast_ln196_65_fu_1576_p1;
wire   [31:0] bitcast_ln196_64_fu_1572_p1;
wire   [31:0] bitcast_ln196_63_fu_1568_p1;
wire   [31:0] bitcast_ln196_62_fu_1564_p1;
wire   [31:0] bitcast_ln196_61_fu_1560_p1;
wire   [31:0] bitcast_ln196_60_fu_1556_p1;
wire   [31:0] bitcast_ln196_59_fu_1552_p1;
wire   [31:0] bitcast_ln196_58_fu_1548_p1;
wire   [31:0] bitcast_ln196_57_fu_1544_p1;
wire   [31:0] bitcast_ln196_56_fu_1540_p1;
wire   [31:0] bitcast_ln196_55_fu_1536_p1;
wire   [31:0] bitcast_ln196_54_fu_1532_p1;
wire   [31:0] bitcast_ln196_53_fu_1528_p1;
wire   [31:0] bitcast_ln196_52_fu_1524_p1;
wire   [31:0] bitcast_ln196_51_fu_1520_p1;
wire   [31:0] bitcast_ln196_50_fu_1516_p1;
wire   [31:0] bitcast_ln196_49_fu_1512_p1;
wire   [31:0] bitcast_ln196_48_fu_1508_p1;
wire   [31:0] bitcast_ln196_47_fu_1504_p1;
wire   [31:0] bitcast_ln196_46_fu_1500_p1;
wire   [31:0] bitcast_ln196_45_fu_1496_p1;
wire   [31:0] bitcast_ln196_44_fu_1492_p1;
wire   [31:0] bitcast_ln196_43_fu_1488_p1;
wire   [31:0] bitcast_ln196_42_fu_1484_p1;
wire   [31:0] bitcast_ln196_41_fu_1480_p1;
wire   [31:0] bitcast_ln196_40_fu_1476_p1;
wire   [31:0] bitcast_ln196_39_fu_1472_p1;
wire   [31:0] bitcast_ln196_38_fu_1468_p1;
wire   [31:0] bitcast_ln196_37_fu_1464_p1;
wire   [31:0] bitcast_ln196_36_fu_1460_p1;
wire   [31:0] bitcast_ln196_35_fu_1456_p1;
wire   [31:0] bitcast_ln196_34_fu_1452_p1;
wire   [31:0] bitcast_ln196_33_fu_1448_p1;
wire   [31:0] bitcast_ln196_32_fu_1444_p1;
wire   [31:0] bitcast_ln196_31_fu_1440_p1;
wire   [31:0] bitcast_ln196_30_fu_1436_p1;
wire   [31:0] bitcast_ln196_29_fu_1432_p1;
wire   [31:0] bitcast_ln196_28_fu_1428_p1;
wire   [31:0] bitcast_ln196_27_fu_1424_p1;
wire   [31:0] bitcast_ln196_26_fu_1420_p1;
wire   [31:0] bitcast_ln196_25_fu_1416_p1;
wire   [31:0] bitcast_ln196_24_fu_1412_p1;
wire   [31:0] bitcast_ln196_23_fu_1408_p1;
wire   [31:0] bitcast_ln196_22_fu_1404_p1;
wire   [31:0] bitcast_ln196_21_fu_1400_p1;
wire   [31:0] bitcast_ln196_20_fu_1396_p1;
wire   [31:0] bitcast_ln196_19_fu_1392_p1;
wire   [31:0] bitcast_ln196_18_fu_1388_p1;
wire   [31:0] bitcast_ln196_17_fu_1384_p1;
wire   [31:0] bitcast_ln196_16_fu_1380_p1;
wire   [31:0] bitcast_ln196_15_fu_1376_p1;
wire   [31:0] bitcast_ln196_14_fu_1372_p1;
wire   [31:0] bitcast_ln196_13_fu_1368_p1;
wire   [31:0] bitcast_ln196_12_fu_1364_p1;
wire   [31:0] bitcast_ln196_11_fu_1360_p1;
wire   [31:0] bitcast_ln196_10_fu_1356_p1;
wire   [31:0] bitcast_ln196_9_fu_1352_p1;
wire   [31:0] bitcast_ln196_8_fu_1348_p1;
wire   [31:0] bitcast_ln196_7_fu_1344_p1;
wire   [31:0] bitcast_ln196_6_fu_1340_p1;
wire   [31:0] bitcast_ln196_5_fu_1336_p1;
wire   [31:0] bitcast_ln196_4_fu_1332_p1;
wire   [31:0] bitcast_ln196_3_fu_1328_p1;
wire   [31:0] bitcast_ln196_2_fu_1324_p1;
wire   [31:0] bitcast_ln196_1_fu_1320_p1;
wire   [31:0] bitcast_ln196_fu_1316_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_addr_reg_2794),
    .ce0(lb1_ce0),
    .we0(lb1_we0),
    .d0(lb1_d0),
    .address1(lb1_address1),
    .ce1(lb1_ce1),
    .q1(lb1_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_1_addr_reg_2783),
    .ce0(lb1_1_ce0),
    .we0(lb1_1_we0),
    .d0(reuse_select_fu_1241_p3),
    .address1(lb1_1_address1),
    .ce1(lb1_1_ce1),
    .q1(lb1_1_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_2_addr_reg_2772),
    .ce0(lb1_2_ce0),
    .we0(lb1_2_we0),
    .d0(reuse_select85_fu_1230_p3),
    .address1(lb1_2_address1),
    .ce1(lb1_2_ce1),
    .q1(lb1_2_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_3_addr_reg_2761),
    .ce0(lb1_3_ce0),
    .we0(lb1_3_we0),
    .d0(reuse_select91_fu_1219_p3),
    .address1(lb1_3_address1),
    .ce1(lb1_3_ce1),
    .q1(lb1_3_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_4_addr_reg_2750),
    .ce0(lb1_4_ce0),
    .we0(lb1_4_we0),
    .d0(reuse_select97_fu_1208_p3),
    .address1(lb1_4_address1),
    .ce1(lb1_4_ce1),
    .q1(lb1_4_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_5_addr_reg_2739),
    .ce0(lb1_5_ce0),
    .we0(lb1_5_we0),
    .d0(reuse_select103_fu_1197_p3),
    .address1(lb1_5_address1),
    .ce1(lb1_5_ce1),
    .q1(lb1_5_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_6_addr_reg_2728),
    .ce0(lb1_6_ce0),
    .we0(lb1_6_we0),
    .d0(reuse_select109_fu_1186_p3),
    .address1(lb1_6_address1),
    .ce1(lb1_6_ce1),
    .q1(lb1_6_q1)
);

srcnn_make_win97_Pipeline_win9x9_read_pix_lb1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
lb1_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lb1_7_addr_reg_2717),
    .ce0(lb1_7_ce0),
    .we0(lb1_7_we0),
    .d0(reuse_select115_fu_1175_p3),
    .address1(lb1_7_address1),
    .ce1(lb1_7_ce1),
    .q1(lb1_7_q1)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg105_fu_80 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg105_fu_80 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg111_fu_72 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg111_fu_72 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg117_fu_64 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg117_fu_64 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg81_fu_112 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg81_fu_112 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg87_fu_104 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg87_fu_104 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg93_fu_96 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg93_fu_96 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg99_fu_88 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg99_fu_88 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_120 <= 64'd18446744073709551615;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg_fu_120 <= idxprom29_i_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg104_fu_84 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg104_fu_84 <= reuse_select103_fu_1197_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg110_fu_76 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg110_fu_76 <= reuse_select109_fu_1186_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg116_fu_68 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg116_fu_68 <= reuse_select115_fu_1175_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg80_fu_116 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg80_fu_116 <= reuse_select_fu_1241_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg86_fu_108 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg86_fu_108 <= reuse_select85_fu_1230_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg92_fu_100 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg92_fu_100 <= reuse_select91_fu_1219_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg98_fu_92 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg98_fu_92 <= reuse_select97_fu_1208_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_124 <= 32'd0;
        end else if (((icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg_fu_124 <= pix_fu_1157_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            t_fu_136 <= 17'd0;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            t_fu_136 <= add_ln145_fu_736_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_128 <= 32'd0;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_128 <= x_5_fu_937_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_132 <= 32'd0;
        end else if (((icmp_ln145_fu_731_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_132 <= y_3_fu_945_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_fu_731_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp102_reg_2756 <= addr_cmp102_fu_784_p2;
        addr_cmp108_reg_2745 <= addr_cmp108_fu_775_p2;
        addr_cmp114_reg_2734 <= addr_cmp114_fu_766_p2;
        addr_cmp120_reg_2723 <= addr_cmp120_fu_757_p2;
        addr_cmp84_reg_2789 <= addr_cmp84_fu_811_p2;
        addr_cmp90_reg_2778 <= addr_cmp90_fu_802_p2;
        addr_cmp96_reg_2767 <= addr_cmp96_fu_793_p2;
        addr_cmp_reg_2800 <= addr_cmp_fu_820_p2;
        and_ln180_reg_2805 <= and_ln180_fu_898_p2;
        lb1_1_addr_reg_2783 <= idxprom29_i_fu_742_p1;
        lb1_2_addr_reg_2772 <= idxprom29_i_fu_742_p1;
        lb1_3_addr_reg_2761 <= idxprom29_i_fu_742_p1;
        lb1_4_addr_reg_2750 <= idxprom29_i_fu_742_p1;
        lb1_5_addr_reg_2739 <= idxprom29_i_fu_742_p1;
        lb1_6_addr_reg_2728 <= idxprom29_i_fu_742_p1;
        lb1_7_addr_reg_2717 <= idxprom29_i_fu_742_p1;
        lb1_addr_reg_2794 <= idxprom29_i_fu_742_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_116_fu_140 <= empty_125_fu_176;
        empty_117_fu_144 <= empty_132_fu_204;
        empty_118_fu_148 <= empty_139_fu_232;
        empty_119_fu_152 <= empty_146_fu_260;
        empty_120_fu_156 <= empty_153_fu_288;
        empty_121_fu_160 <= empty_160_fu_316;
        empty_122_fu_164 <= empty_167_fu_344;
        empty_123_fu_168 <= empty_174_fu_372;
        empty_124_fu_172 <= empty_181_fu_400;
        empty_125_fu_176 <= empty_126_fu_180;
        empty_126_fu_180 <= empty_127_fu_184;
        empty_127_fu_184 <= empty_128_fu_188;
        empty_128_fu_188 <= empty_129_fu_192;
        empty_129_fu_192 <= empty_130_fu_196;
        empty_130_fu_196 <= empty_131_fu_200;
        empty_131_fu_200 <= reuse_select121_fu_1165_p3;
        empty_132_fu_204 <= empty_133_fu_208;
        empty_133_fu_208 <= empty_134_fu_212;
        empty_134_fu_212 <= empty_135_fu_216;
        empty_135_fu_216 <= empty_136_fu_220;
        empty_136_fu_220 <= empty_137_fu_224;
        empty_137_fu_224 <= empty_138_fu_228;
        empty_138_fu_228 <= reuse_select115_fu_1175_p3;
        empty_139_fu_232 <= empty_140_fu_236;
        empty_140_fu_236 <= empty_141_fu_240;
        empty_141_fu_240 <= empty_142_fu_244;
        empty_142_fu_244 <= empty_143_fu_248;
        empty_143_fu_248 <= empty_144_fu_252;
        empty_144_fu_252 <= empty_145_fu_256;
        empty_145_fu_256 <= reuse_select109_fu_1186_p3;
        empty_146_fu_260 <= empty_147_fu_264;
        empty_147_fu_264 <= empty_148_fu_268;
        empty_148_fu_268 <= empty_149_fu_272;
        empty_149_fu_272 <= empty_150_fu_276;
        empty_150_fu_276 <= empty_151_fu_280;
        empty_151_fu_280 <= empty_152_fu_284;
        empty_152_fu_284 <= reuse_select103_fu_1197_p3;
        empty_153_fu_288 <= empty_154_fu_292;
        empty_154_fu_292 <= empty_155_fu_296;
        empty_155_fu_296 <= empty_156_fu_300;
        empty_156_fu_300 <= empty_157_fu_304;
        empty_157_fu_304 <= empty_158_fu_308;
        empty_158_fu_308 <= empty_159_fu_312;
        empty_159_fu_312 <= reuse_select97_fu_1208_p3;
        empty_160_fu_316 <= empty_161_fu_320;
        empty_161_fu_320 <= empty_162_fu_324;
        empty_162_fu_324 <= empty_163_fu_328;
        empty_163_fu_328 <= empty_164_fu_332;
        empty_164_fu_332 <= empty_165_fu_336;
        empty_165_fu_336 <= empty_166_fu_340;
        empty_166_fu_340 <= reuse_select91_fu_1219_p3;
        empty_167_fu_344 <= empty_168_fu_348;
        empty_168_fu_348 <= empty_169_fu_352;
        empty_169_fu_352 <= empty_170_fu_356;
        empty_170_fu_356 <= empty_171_fu_360;
        empty_171_fu_360 <= empty_172_fu_364;
        empty_172_fu_364 <= empty_173_fu_368;
        empty_173_fu_368 <= reuse_select85_fu_1230_p3;
        empty_174_fu_372 <= empty_175_fu_376;
        empty_175_fu_376 <= empty_176_fu_380;
        empty_176_fu_380 <= empty_177_fu_384;
        empty_177_fu_384 <= empty_178_fu_388;
        empty_178_fu_388 <= empty_179_fu_392;
        empty_179_fu_392 <= empty_180_fu_396;
        empty_180_fu_396 <= reuse_select_fu_1241_p3;
        empty_181_fu_400 <= empty_182_fu_404;
        empty_182_fu_404 <= empty_183_fu_408;
        empty_183_fu_408 <= empty_184_fu_412;
        empty_184_fu_412 <= empty_185_fu_416;
        empty_185_fu_416 <= empty_186_fu_420;
        empty_186_fu_420 <= empty_187_fu_424;
        empty_187_fu_424 <= s_pix_i_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln145_reg_2713 <= icmp_ln145_fu_731_p2;
        zext_ln124_cast_reg_2702[8 : 0] <= zext_ln124_cast_fu_619_p1[8 : 0];
        zext_ln125_cast_reg_2707[8 : 0] <= zext_ln125_cast_fu_623_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_fu_731_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln180_fu_898_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_valid_reg_2809 <= w_valid_fu_914_p2;
    end
end

always @ (*) begin
    if (((icmp_ln145_fu_731_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_1_ce0 = 1'b1;
    end else begin
        lb1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_1_ce1 = 1'b1;
    end else begin
        lb1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_1_we0 = 1'b1;
    end else begin
        lb1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_2_ce0 = 1'b1;
    end else begin
        lb1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_2_ce1 = 1'b1;
    end else begin
        lb1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_2_we0 = 1'b1;
    end else begin
        lb1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_3_ce0 = 1'b1;
    end else begin
        lb1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_3_ce1 = 1'b1;
    end else begin
        lb1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_3_we0 = 1'b1;
    end else begin
        lb1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_4_ce0 = 1'b1;
    end else begin
        lb1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_4_ce1 = 1'b1;
    end else begin
        lb1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_4_we0 = 1'b1;
    end else begin
        lb1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_5_ce0 = 1'b1;
    end else begin
        lb1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_5_ce1 = 1'b1;
    end else begin
        lb1_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_5_we0 = 1'b1;
    end else begin
        lb1_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_6_ce0 = 1'b1;
    end else begin
        lb1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_6_ce1 = 1'b1;
    end else begin
        lb1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_6_we0 = 1'b1;
    end else begin
        lb1_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_7_ce0 = 1'b1;
    end else begin
        lb1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_7_ce1 = 1'b1;
    end else begin
        lb1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_7_we0 = 1'b1;
    end else begin
        lb1_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_ce0 = 1'b1;
    end else begin
        lb1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb1_ce1 = 1'b1;
    end else begin
        lb1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb1_we0 = 1'b1;
    end else begin
        lb1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_pix_i_blk_n = s_pix_i_empty_n;
    end else begin
        s_pix_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_2713 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_pix_i_read = 1'b1;
    end else begin
        s_pix_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op385_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_win_i_blk_n = s_win_i_full_n;
    end else begin
        s_win_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op385_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_win_i_write = 1'b1;
    end else begin
        s_win_i_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln145_fu_736_p2 = (t_fu_136 + 17'd1);

assign add_ln202_fu_931_p2 = (y_fu_132 + 32'd1);

assign addr_cmp102_fu_784_p2 = ((reuse_addr_reg99_fu_88 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp108_fu_775_p2 = ((reuse_addr_reg105_fu_80 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp114_fu_766_p2 = ((reuse_addr_reg111_fu_72 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp120_fu_757_p2 = ((reuse_addr_reg117_fu_64 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp84_fu_811_p2 = ((reuse_addr_reg81_fu_112 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp90_fu_802_p2 = ((reuse_addr_reg87_fu_104 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp96_fu_793_p2 = ((reuse_addr_reg93_fu_96 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_820_p2 = ((reuse_addr_reg_fu_120 == idxprom29_i_fu_742_p1) ? 1'b1 : 1'b0);

assign and_ln180_fu_898_p2 = (icmp_ln180_fu_876_p2 & icmp_ln180_1_fu_892_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2713 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2713 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2713 == 1'd0) & (s_pix_i_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op385_write_state3 == 1'b1) & (s_win_i_full_n == 1'b0)) | ((icmp_ln145_reg_2713 == 1'd0) & (s_pix_i_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op385_write_state3 = ((1'd1 == and_ln180_reg_2805) & (icmp_ln145_reg_2713 == 1'd0));
end

assign bitcast_ln196_10_fu_1356_p1 = empty_132_fu_204;

assign bitcast_ln196_11_fu_1360_p1 = empty_133_fu_208;

assign bitcast_ln196_12_fu_1364_p1 = empty_134_fu_212;

assign bitcast_ln196_13_fu_1368_p1 = empty_135_fu_216;

assign bitcast_ln196_14_fu_1372_p1 = empty_136_fu_220;

assign bitcast_ln196_15_fu_1376_p1 = empty_137_fu_224;

assign bitcast_ln196_16_fu_1380_p1 = empty_138_fu_228;

assign bitcast_ln196_17_fu_1384_p1 = reuse_select115_fu_1175_p3;

assign bitcast_ln196_18_fu_1388_p1 = empty_118_fu_148;

assign bitcast_ln196_19_fu_1392_p1 = empty_139_fu_232;

assign bitcast_ln196_1_fu_1320_p1 = empty_125_fu_176;

assign bitcast_ln196_20_fu_1396_p1 = empty_140_fu_236;

assign bitcast_ln196_21_fu_1400_p1 = empty_141_fu_240;

assign bitcast_ln196_22_fu_1404_p1 = empty_142_fu_244;

assign bitcast_ln196_23_fu_1408_p1 = empty_143_fu_248;

assign bitcast_ln196_24_fu_1412_p1 = empty_144_fu_252;

assign bitcast_ln196_25_fu_1416_p1 = empty_145_fu_256;

assign bitcast_ln196_26_fu_1420_p1 = reuse_select109_fu_1186_p3;

assign bitcast_ln196_27_fu_1424_p1 = empty_119_fu_152;

assign bitcast_ln196_28_fu_1428_p1 = empty_146_fu_260;

assign bitcast_ln196_29_fu_1432_p1 = empty_147_fu_264;

assign bitcast_ln196_2_fu_1324_p1 = empty_126_fu_180;

assign bitcast_ln196_30_fu_1436_p1 = empty_148_fu_268;

assign bitcast_ln196_31_fu_1440_p1 = empty_149_fu_272;

assign bitcast_ln196_32_fu_1444_p1 = empty_150_fu_276;

assign bitcast_ln196_33_fu_1448_p1 = empty_151_fu_280;

assign bitcast_ln196_34_fu_1452_p1 = empty_152_fu_284;

assign bitcast_ln196_35_fu_1456_p1 = reuse_select103_fu_1197_p3;

assign bitcast_ln196_36_fu_1460_p1 = empty_120_fu_156;

assign bitcast_ln196_37_fu_1464_p1 = empty_153_fu_288;

assign bitcast_ln196_38_fu_1468_p1 = empty_154_fu_292;

assign bitcast_ln196_39_fu_1472_p1 = empty_155_fu_296;

assign bitcast_ln196_3_fu_1328_p1 = empty_127_fu_184;

assign bitcast_ln196_40_fu_1476_p1 = empty_156_fu_300;

assign bitcast_ln196_41_fu_1480_p1 = empty_157_fu_304;

assign bitcast_ln196_42_fu_1484_p1 = empty_158_fu_308;

assign bitcast_ln196_43_fu_1488_p1 = empty_159_fu_312;

assign bitcast_ln196_44_fu_1492_p1 = reuse_select97_fu_1208_p3;

assign bitcast_ln196_45_fu_1496_p1 = empty_121_fu_160;

assign bitcast_ln196_46_fu_1500_p1 = empty_160_fu_316;

assign bitcast_ln196_47_fu_1504_p1 = empty_161_fu_320;

assign bitcast_ln196_48_fu_1508_p1 = empty_162_fu_324;

assign bitcast_ln196_49_fu_1512_p1 = empty_163_fu_328;

assign bitcast_ln196_4_fu_1332_p1 = empty_128_fu_188;

assign bitcast_ln196_50_fu_1516_p1 = empty_164_fu_332;

assign bitcast_ln196_51_fu_1520_p1 = empty_165_fu_336;

assign bitcast_ln196_52_fu_1524_p1 = empty_166_fu_340;

assign bitcast_ln196_53_fu_1528_p1 = reuse_select91_fu_1219_p3;

assign bitcast_ln196_54_fu_1532_p1 = empty_122_fu_164;

assign bitcast_ln196_55_fu_1536_p1 = empty_167_fu_344;

assign bitcast_ln196_56_fu_1540_p1 = empty_168_fu_348;

assign bitcast_ln196_57_fu_1544_p1 = empty_169_fu_352;

assign bitcast_ln196_58_fu_1548_p1 = empty_170_fu_356;

assign bitcast_ln196_59_fu_1552_p1 = empty_171_fu_360;

assign bitcast_ln196_5_fu_1336_p1 = empty_129_fu_192;

assign bitcast_ln196_60_fu_1556_p1 = empty_172_fu_364;

assign bitcast_ln196_61_fu_1560_p1 = empty_173_fu_368;

assign bitcast_ln196_62_fu_1564_p1 = reuse_select85_fu_1230_p3;

assign bitcast_ln196_63_fu_1568_p1 = empty_123_fu_168;

assign bitcast_ln196_64_fu_1572_p1 = empty_174_fu_372;

assign bitcast_ln196_65_fu_1576_p1 = empty_175_fu_376;

assign bitcast_ln196_66_fu_1580_p1 = empty_176_fu_380;

assign bitcast_ln196_67_fu_1584_p1 = empty_177_fu_384;

assign bitcast_ln196_68_fu_1588_p1 = empty_178_fu_388;

assign bitcast_ln196_69_fu_1592_p1 = empty_179_fu_392;

assign bitcast_ln196_6_fu_1340_p1 = empty_130_fu_196;

assign bitcast_ln196_70_fu_1596_p1 = empty_180_fu_396;

assign bitcast_ln196_71_fu_1600_p1 = reuse_select_fu_1241_p3;

assign bitcast_ln196_7_fu_1344_p1 = empty_131_fu_200;

assign bitcast_ln196_8_fu_1348_p1 = reuse_select121_fu_1165_p3;

assign bitcast_ln196_9_fu_1352_p1 = empty_117_fu_144;

assign bitcast_ln196_fu_1316_p1 = empty_116_fu_140;

assign icmp_ln145_fu_731_p2 = ((t_fu_136 == empty) ? 1'b1 : 1'b0);

assign icmp_ln180_1_fu_892_p2 = (($signed(tmp_4_fu_882_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_876_p2 = (($signed(tmp_3_fu_866_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln192_1_fu_909_p2 = (($signed(x_fu_128) < $signed(zext_ln125_cast_reg_2707)) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_904_p2 = (($signed(y_fu_132) < $signed(zext_ln124_cast_reg_2702)) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_926_p2 = ((x_4_fu_920_p2 == zext_ln125_cast_reg_2707) ? 1'b1 : 1'b0);

assign idxprom29_i_fu_742_p1 = x_fu_128;

assign lb1_1_address1 = idxprom29_i_fu_742_p1;

assign lb1_2_address1 = idxprom29_i_fu_742_p1;

assign lb1_3_address1 = idxprom29_i_fu_742_p1;

assign lb1_4_address1 = idxprom29_i_fu_742_p1;

assign lb1_5_address1 = idxprom29_i_fu_742_p1;

assign lb1_6_address1 = idxprom29_i_fu_742_p1;

assign lb1_7_address1 = idxprom29_i_fu_742_p1;

assign lb1_address1 = idxprom29_i_fu_742_p1;

assign lb1_d0 = s_pix_i_dout;

assign pix_fu_1157_p1 = s_pix_i_dout;

assign reuse_select103_fu_1197_p3 = ((addr_cmp102_reg_2756[0:0] == 1'b1) ? reuse_reg98_fu_92 : lb1_4_q1);

assign reuse_select109_fu_1186_p3 = ((addr_cmp108_reg_2745[0:0] == 1'b1) ? reuse_reg104_fu_84 : lb1_5_q1);

assign reuse_select115_fu_1175_p3 = ((addr_cmp114_reg_2734[0:0] == 1'b1) ? reuse_reg110_fu_76 : lb1_6_q1);

assign reuse_select121_fu_1165_p3 = ((addr_cmp120_reg_2723[0:0] == 1'b1) ? reuse_reg116_fu_68 : lb1_7_q1);

assign reuse_select85_fu_1230_p3 = ((addr_cmp84_reg_2789[0:0] == 1'b1) ? reuse_reg80_fu_116 : lb1_1_q1);

assign reuse_select91_fu_1219_p3 = ((addr_cmp90_reg_2778[0:0] == 1'b1) ? reuse_reg86_fu_108 : lb1_2_q1);

assign reuse_select97_fu_1208_p3 = ((addr_cmp96_reg_2767[0:0] == 1'b1) ? reuse_reg92_fu_100 : lb1_3_q1);

assign reuse_select_fu_1241_p3 = ((addr_cmp_reg_2800[0:0] == 1'b1) ? reuse_reg_fu_124 : lb1_q1);

assign s_win_i_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{w_valid_reg_2809}, {s_pix_i_dout}}, {empty_187_fu_424}}, {empty_186_fu_420}}, {empty_185_fu_416}}, {empty_184_fu_412}}, {empty_183_fu_408}}, {empty_182_fu_404}}, {empty_181_fu_400}}, {empty_124_fu_172}}, {bitcast_ln196_71_fu_1600_p1}}, {bitcast_ln196_70_fu_1596_p1}}, {bitcast_ln196_69_fu_1592_p1}}, {bitcast_ln196_68_fu_1588_p1}}, {bitcast_ln196_67_fu_1584_p1}}, {bitcast_ln196_66_fu_1580_p1}}, {bitcast_ln196_65_fu_1576_p1}}, {bitcast_ln196_64_fu_1572_p1}}, {bitcast_ln196_63_fu_1568_p1}}, {bitcast_ln196_62_fu_1564_p1}}, {bitcast_ln196_61_fu_1560_p1}}, {bitcast_ln196_60_fu_1556_p1}}, {bitcast_ln196_59_fu_1552_p1}}, {bitcast_ln196_58_fu_1548_p1}}, {bitcast_ln196_57_fu_1544_p1}}, {bitcast_ln196_56_fu_1540_p1}}, {bitcast_ln196_55_fu_1536_p1}}, {bitcast_ln196_54_fu_1532_p1}}, {bitcast_ln196_53_fu_1528_p1}}, {bitcast_ln196_52_fu_1524_p1}}, {bitcast_ln196_51_fu_1520_p1}}, {bitcast_ln196_50_fu_1516_p1}}, {bitcast_ln196_49_fu_1512_p1}}, {bitcast_ln196_48_fu_1508_p1}}, 
    {bitcast_ln196_47_fu_1504_p1}}, {bitcast_ln196_46_fu_1500_p1}}, {bitcast_ln196_45_fu_1496_p1}}, {bitcast_ln196_44_fu_1492_p1}}, {bitcast_ln196_43_fu_1488_p1}}, {bitcast_ln196_42_fu_1484_p1}}, {bitcast_ln196_41_fu_1480_p1}}, {bitcast_ln196_40_fu_1476_p1}}, {bitcast_ln196_39_fu_1472_p1}}, {bitcast_ln196_38_fu_1468_p1}}, {bitcast_ln196_37_fu_1464_p1}}, {bitcast_ln196_36_fu_1460_p1}}, {bitcast_ln196_35_fu_1456_p1}}, {bitcast_ln196_34_fu_1452_p1}}, {bitcast_ln196_33_fu_1448_p1}}, {bitcast_ln196_32_fu_1444_p1}}, {bitcast_ln196_31_fu_1440_p1}}, {bitcast_ln196_30_fu_1436_p1}}, {bitcast_ln196_29_fu_1432_p1}}, {bitcast_ln196_28_fu_1428_p1}}, {bitcast_ln196_27_fu_1424_p1}}, {bitcast_ln196_26_fu_1420_p1}}, {bitcast_ln196_25_fu_1416_p1}}, {bitcast_ln196_24_fu_1412_p1}}, {bitcast_ln196_23_fu_1408_p1}}, {bitcast_ln196_22_fu_1404_p1}}, {bitcast_ln196_21_fu_1400_p1}}, {bitcast_ln196_20_fu_1396_p1}}, {bitcast_ln196_19_fu_1392_p1}}, {bitcast_ln196_18_fu_1388_p1}}, {bitcast_ln196_17_fu_1384_p1}}, {bitcast_ln196_16_fu_1380_p1}}, {bitcast_ln196_15_fu_1376_p1}}, 
    {bitcast_ln196_14_fu_1372_p1}}, {bitcast_ln196_13_fu_1368_p1}}, {bitcast_ln196_12_fu_1364_p1}}, {bitcast_ln196_11_fu_1360_p1}}, {bitcast_ln196_10_fu_1356_p1}}, {bitcast_ln196_9_fu_1352_p1}}, {bitcast_ln196_8_fu_1348_p1}}, {bitcast_ln196_7_fu_1344_p1}}, {bitcast_ln196_6_fu_1340_p1}}, {bitcast_ln196_5_fu_1336_p1}}, {bitcast_ln196_4_fu_1332_p1}}, {bitcast_ln196_3_fu_1328_p1}}, {bitcast_ln196_2_fu_1324_p1}}, {bitcast_ln196_1_fu_1320_p1}}, {bitcast_ln196_fu_1316_p1}};

assign tmp_3_fu_866_p4 = {{y_fu_132[31:3]}};

assign tmp_4_fu_882_p4 = {{x_fu_128[31:3]}};

assign w_valid_fu_914_p2 = (icmp_ln192_fu_904_p2 & icmp_ln192_1_fu_909_p2);

assign x_4_fu_920_p2 = (x_fu_128 + 32'd1);

assign x_5_fu_937_p3 = ((icmp_ln200_fu_926_p2[0:0] == 1'b1) ? 32'd0 : x_4_fu_920_p2);

assign y_3_fu_945_p3 = ((icmp_ln200_fu_926_p2[0:0] == 1'b1) ? add_ln202_fu_931_p2 : y_fu_132);

assign zext_ln124_cast_fu_619_p1 = zext_ln124;

assign zext_ln125_cast_fu_623_p1 = zext_ln125;

always @ (posedge ap_clk) begin
    zext_ln124_cast_reg_2702[31:9] <= 23'b00000000000000000000000;
    zext_ln125_cast_reg_2707[31:9] <= 23'b00000000000000000000000;
end

endmodule //srcnn_make_win97_Pipeline_win9x9_read_pix
