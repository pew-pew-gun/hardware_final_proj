// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_CopyW2_inft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_w2_AWVALID,
        m_axi_gmem_w2_AWREADY,
        m_axi_gmem_w2_AWADDR,
        m_axi_gmem_w2_AWID,
        m_axi_gmem_w2_AWLEN,
        m_axi_gmem_w2_AWSIZE,
        m_axi_gmem_w2_AWBURST,
        m_axi_gmem_w2_AWLOCK,
        m_axi_gmem_w2_AWCACHE,
        m_axi_gmem_w2_AWPROT,
        m_axi_gmem_w2_AWQOS,
        m_axi_gmem_w2_AWREGION,
        m_axi_gmem_w2_AWUSER,
        m_axi_gmem_w2_WVALID,
        m_axi_gmem_w2_WREADY,
        m_axi_gmem_w2_WDATA,
        m_axi_gmem_w2_WSTRB,
        m_axi_gmem_w2_WLAST,
        m_axi_gmem_w2_WID,
        m_axi_gmem_w2_WUSER,
        m_axi_gmem_w2_ARVALID,
        m_axi_gmem_w2_ARREADY,
        m_axi_gmem_w2_ARADDR,
        m_axi_gmem_w2_ARID,
        m_axi_gmem_w2_ARLEN,
        m_axi_gmem_w2_ARSIZE,
        m_axi_gmem_w2_ARBURST,
        m_axi_gmem_w2_ARLOCK,
        m_axi_gmem_w2_ARCACHE,
        m_axi_gmem_w2_ARPROT,
        m_axi_gmem_w2_ARQOS,
        m_axi_gmem_w2_ARREGION,
        m_axi_gmem_w2_ARUSER,
        m_axi_gmem_w2_RVALID,
        m_axi_gmem_w2_RREADY,
        m_axi_gmem_w2_RDATA,
        m_axi_gmem_w2_RLAST,
        m_axi_gmem_w2_RID,
        m_axi_gmem_w2_RFIFONUM,
        m_axi_gmem_w2_RUSER,
        m_axi_gmem_w2_RRESP,
        m_axi_gmem_w2_BVALID,
        m_axi_gmem_w2_BREADY,
        m_axi_gmem_w2_BRESP,
        m_axi_gmem_w2_BID,
        m_axi_gmem_w2_BUSER,
        zext_ln576_7,
        zext_ln566_1,
        sext_ln566,
        trunc_ln566_3,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0,
        grp_fu_5410_p_din0,
        grp_fu_5410_p_dout0,
        grp_fu_5410_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_w2_AWVALID;
input   m_axi_gmem_w2_AWREADY;
output  [63:0] m_axi_gmem_w2_AWADDR;
output  [0:0] m_axi_gmem_w2_AWID;
output  [31:0] m_axi_gmem_w2_AWLEN;
output  [2:0] m_axi_gmem_w2_AWSIZE;
output  [1:0] m_axi_gmem_w2_AWBURST;
output  [1:0] m_axi_gmem_w2_AWLOCK;
output  [3:0] m_axi_gmem_w2_AWCACHE;
output  [2:0] m_axi_gmem_w2_AWPROT;
output  [3:0] m_axi_gmem_w2_AWQOS;
output  [3:0] m_axi_gmem_w2_AWREGION;
output  [0:0] m_axi_gmem_w2_AWUSER;
output   m_axi_gmem_w2_WVALID;
input   m_axi_gmem_w2_WREADY;
output  [31:0] m_axi_gmem_w2_WDATA;
output  [3:0] m_axi_gmem_w2_WSTRB;
output   m_axi_gmem_w2_WLAST;
output  [0:0] m_axi_gmem_w2_WID;
output  [0:0] m_axi_gmem_w2_WUSER;
output   m_axi_gmem_w2_ARVALID;
input   m_axi_gmem_w2_ARREADY;
output  [63:0] m_axi_gmem_w2_ARADDR;
output  [0:0] m_axi_gmem_w2_ARID;
output  [31:0] m_axi_gmem_w2_ARLEN;
output  [2:0] m_axi_gmem_w2_ARSIZE;
output  [1:0] m_axi_gmem_w2_ARBURST;
output  [1:0] m_axi_gmem_w2_ARLOCK;
output  [3:0] m_axi_gmem_w2_ARCACHE;
output  [2:0] m_axi_gmem_w2_ARPROT;
output  [3:0] m_axi_gmem_w2_ARQOS;
output  [3:0] m_axi_gmem_w2_ARREGION;
output  [0:0] m_axi_gmem_w2_ARUSER;
input   m_axi_gmem_w2_RVALID;
output   m_axi_gmem_w2_RREADY;
input  [31:0] m_axi_gmem_w2_RDATA;
input   m_axi_gmem_w2_RLAST;
input  [0:0] m_axi_gmem_w2_RID;
input  [8:0] m_axi_gmem_w2_RFIFONUM;
input  [0:0] m_axi_gmem_w2_RUSER;
input  [1:0] m_axi_gmem_w2_RRESP;
input   m_axi_gmem_w2_BVALID;
output   m_axi_gmem_w2_BREADY;
input  [1:0] m_axi_gmem_w2_BRESP;
input  [0:0] m_axi_gmem_w2_BID;
input  [0:0] m_axi_gmem_w2_BUSER;
input  [7:0] zext_ln576_7;
input  [10:0] zext_ln566_1;
input  [61:0] sext_ln566;
input  [2:0] trunc_ln566_3;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0;
output  [7:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0;
output  [15:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0;
output  [31:0] grp_fu_5410_p_din0;
input  [63:0] grp_fu_5410_p_dout0;
output   grp_fu_5410_p_ce;

reg ap_idle;
reg m_axi_gmem_w2_ARVALID;
reg m_axi_gmem_w2_RREADY;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln570_fu_343_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_w2_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_w2_blk_n_R;
wire   [2:0] trunc_ln566_3_read_reg_1217;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] i2_1_reg_1226;
reg   [6:0] i2_1_reg_1226_pp0_iter1_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter2_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter3_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter4_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter5_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter6_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter7_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter8_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter9_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter10_reg;
reg   [6:0] i2_1_reg_1226_pp0_iter11_reg;
reg   [63:0] gmem_w2_addr_reg_1235;
reg   [31:0] gmem_w2_addr_read_reg_1241;
reg   [31:0] gmem_w2_addr_read_reg_1241_pp0_iter10_reg;
reg   [31:0] gmem_w2_addr_read_reg_1241_pp0_iter11_reg;
wire   [31:0] bitcast_ln576_fu_390_p1;
reg   [0:0] tmp_reg_1252;
wire   [53:0] zext_ln576_6_fu_436_p1;
reg   [53:0] zext_ln576_6_reg_1261;
wire   [53:0] sub_ln576_fu_440_p2;
reg   [53:0] sub_ln576_reg_1266;
wire   [0:0] icmp_ln576_fu_446_p2;
reg   [0:0] icmp_ln576_reg_1271;
wire   [11:0] sub_ln576_1_fu_452_p2;
reg   [11:0] sub_ln576_1_reg_1277;
wire   [10:0] trunc_ln576_2_fu_458_p1;
reg   [10:0] trunc_ln576_2_reg_1285;
wire   [0:0] icmp_ln576_1_fu_462_p2;
reg   [0:0] icmp_ln576_1_reg_1290;
wire  signed [11:0] select_ln576_1_fu_480_p3;
reg  signed [11:0] select_ln576_1_reg_1295;
wire   [0:0] icmp_ln576_4_fu_488_p2;
reg   [0:0] icmp_ln576_4_reg_1302;
wire   [0:0] icmp_ln576_5_fu_504_p2;
reg   [0:0] icmp_ln576_5_reg_1307;
wire   [0:0] icmp_ln576_6_fu_520_p2;
reg   [0:0] icmp_ln576_6_reg_1312;
wire   [5:0] trunc_ln576_7_fu_526_p1;
reg   [5:0] trunc_ln576_7_reg_1317;
wire   [0:0] icmp_ln576_7_fu_536_p2;
reg   [0:0] icmp_ln576_7_reg_1323;
wire   [0:0] icmp_ln576_10_fu_570_p2;
reg   [0:0] icmp_ln576_10_reg_1328;
wire   [63:0] zext_ln576_5_fu_584_p1;
wire  signed [63:0] sext_ln576_fu_375_p1;
reg   [6:0] i2_fu_180;
wire   [6:0] add_ln570_fu_349_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i2_1;
wire   [15:0] select_ln576_18_fu_1194_p3;
wire   [11:0] zext_ln566_1_cast_fu_331_p1;
wire   [11:0] zext_ln570_fu_355_p1;
wire   [11:0] add_ln576_5_fu_359_p2;
wire   [62:0] zext_ln576_1_fu_365_p1;
wire  signed [62:0] sext_ln566_cast_fu_327_p1;
wire   [62:0] add_ln576_fu_369_p2;
wire   [63:0] bitcast_ln724_fu_394_p1;
wire   [10:0] tmp_s_fu_410_p4;
wire   [51:0] trunc_ln576_1_fu_424_p1;
wire   [52:0] zext_ln576_2_cast_fu_428_p3;
wire   [62:0] trunc_ln576_fu_398_p1;
wire   [11:0] zext_ln576_fu_420_p1;
wire   [11:0] add_ln576_1_fu_468_p2;
wire   [11:0] sub_ln576_2_fu_474_p2;
wire   [7:0] tmp_19_fu_494_p4;
wire   [7:0] tmp_20_fu_510_p4;
wire   [11:0] add_ln576_3_fu_530_p2;
wire   [10:0] or_ln576_4_fu_542_p3;
wire  signed [11:0] sext_ln576_4_fu_550_p1;
wire   [11:0] add_ln576_6_fu_554_p2;
wire   [10:0] tmp_23_fu_560_p4;
wire   [7:0] zext_ln576_2_fu_576_p1;
wire   [7:0] add_ln576_9_fu_579_p2;
wire   [53:0] select_ln576_fu_596_p3;
wire   [0:0] tmp_18_fu_618_p3;
wire  signed [31:0] sext_ln576_2_fu_633_p1;
wire   [53:0] zext_ln576_9_fu_636_p1;
wire   [53:0] ashr_ln576_fu_640_p2;
wire   [0:0] icmp_ln576_3_fu_613_p2;
wire   [15:0] trunc_ln576_4_fu_646_p1;
wire   [15:0] select_ln576_3_fu_625_p3;
wire   [15:0] select_ln576_2_fu_650_p3;
wire   [10:0] add_ln576_2_fu_662_p2;
wire   [31:0] zext_ln576_4_fu_667_p1;
wire  signed [30:0] sext_ln576_1_fu_601_p1;
wire   [15:0] trunc_ln576_3_fu_609_p1;
wire   [15:0] sext_ln576_1cast_fu_679_p1;
wire   [0:0] bit_select59_i3_fu_671_p3;
wire   [5:0] sub_ln576_3_fu_695_p2;
wire   [5:0] select_ln576_19_fu_700_p3;
wire   [53:0] zext_ln576_10_fu_707_p1;
wire   [53:0] lshr_ln576_2_fu_711_p2;
wire   [53:0] and_ln576_21_fu_717_p2;
wire   [0:0] icmp_ln576_8_fu_723_p2;
wire   [0:0] trunc_ln576_5_fu_658_p1;
wire   [0:0] and_ln576_1_fu_729_p2;
wire   [0:0] or_ln576_fu_742_p2;
wire   [0:0] select_ln576_8_fu_689_p3;
wire   [0:0] and_ln576_fu_748_p2;
wire   [15:0] zext_ln576_3_fu_754_p1;
wire   [15:0] add_ln576_4_fu_758_p2;
wire   [0:0] tmp_22_fu_764_p3;
wire   [0:0] icmp_ln576_2_fu_604_p2;
wire   [0:0] xor_ln576_1_fu_786_p2;
wire   [0:0] and_ln576_10_fu_792_p2;
wire   [15:0] select_ln576_9_fu_778_p3;
wire   [0:0] icmp_ln576_9_fu_805_p2;
wire   [0:0] and_ln576_11_fu_810_p2;
wire   [15:0] shl_ln576_fu_683_p2;
wire   [15:0] select_ln576_10_fu_797_p3;
wire   [0:0] tmp_21_fu_734_p3;
wire   [0:0] xor_ln576_8_fu_772_p2;
wire   [0:0] and_ln576_12_fu_823_p2;
wire  signed [11:0] add_ln576_7_fu_835_p2;
wire   [15:0] select_ln576_11_fu_815_p3;
wire   [0:0] tmp_25_fu_863_p3;
wire  signed [31:0] sext_ln576_5_fu_840_p1;
wire   [0:0] icmp_ln576_12_fu_877_p2;
wire   [0:0] tobool_i3_fu_883_p3;
wire   [11:0] add_ln576_8_fu_844_p2;
wire   [5:0] add_ln576_10_fu_909_p2;
wire   [53:0] zext_ln576_8_fu_914_p1;
wire   [53:0] lshr_ln576_fu_918_p2;
wire   [53:0] lshr_ln576_1_fu_924_p2;
wire   [0:0] tmp_26_fu_936_p3;
wire   [0:0] icmp_ln576_14_fu_903_p2;
wire   [0:0] icmp_ln576_15_fu_930_p2;
wire   [0:0] xor_ln576_10_fu_944_p2;
wire   [0:0] icmp_ln576_13_fu_897_p2;
wire   [0:0] xor_ln576_9_fu_871_p2;
wire   [0:0] select_ln576_12_fu_950_p3;
wire   [0:0] and_ln576_14_fu_891_p2;
wire   [0:0] icmp_ln576_16_fu_976_p2;
wire   [0:0] xor_ln576_fu_970_p2;
wire   [0:0] icmp_ln576_17_fu_988_p2;
wire   [0:0] and_ln576_2_fu_958_p2;
wire   [0:0] and_ln576_3_fu_964_p2;
wire   [0:0] select_ln576_6_fu_994_p3;
wire   [0:0] and_ln576_4_fu_982_p2;
wire   [0:0] select_ln576_7_fu_1002_p3;
wire   [0:0] and_ln576_13_fu_829_p2;
wire   [0:0] select_ln576_13_fu_1010_p3;
wire   [0:0] select_ln576_14_fu_1018_p3;
wire   [0:0] tmp_27_fu_1034_p3;
wire   [0:0] or_ln576_1_fu_1042_p2;
wire   [0:0] and_ln576_5_fu_1048_p2;
wire   [0:0] and_ln576_6_fu_1062_p2;
wire   [0:0] icmp_ln576_11_fu_857_p2;
wire   [0:0] select_ln576_15_fu_1054_p3;
wire   [0:0] xor_ln576_3_fu_1074_p2;
wire   [0:0] tmp_24_fu_849_p3;
wire   [0:0] and_ln576_15_fu_1086_p2;
wire   [0:0] and_ln576_17_fu_1097_p2;
wire   [0:0] xor_ln576_2_fu_1068_p2;
wire   [0:0] and_ln576_16_fu_1092_p2;
wire   [0:0] select_ln576_4_fu_1026_p3;
wire   [0:0] xor_ln576_4_fu_1110_p2;
wire   [0:0] and_ln576_18_fu_1116_p2;
wire   [0:0] or_ln576_2_fu_1122_p2;
wire   [0:0] xor_ln576_5_fu_1128_p2;
wire   [0:0] or_ln576_5_fu_1080_p2;
wire   [0:0] and_ln576_8_fu_1139_p2;
wire   [0:0] select_ln576_16_fu_1102_p3;
wire   [0:0] xor_ln576_6_fu_1145_p2;
wire   [0:0] and_ln576_9_fu_1151_p2;
wire   [0:0] and_ln576_7_fu_1133_p2;
wire   [0:0] or_ln576_3_fu_1157_p2;
wire   [0:0] xor_ln576_7_fu_1178_p2;
wire   [0:0] and_ln576_19_fu_1183_p2;
wire   [0:0] and_ln576_20_fu_1189_p2;
wire   [15:0] select_ln576_5_fu_1163_p3;
wire   [15:0] select_ln576_17_fu_1171_p3;
reg    grp_fu_324_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln570_fu_343_p2 == 1'd0))) begin
            i2_fu_180 <= add_ln570_fu_349_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i2_fu_180 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_w2_addr_read_reg_1241 <= m_axi_gmem_w2_RDATA;
        gmem_w2_addr_read_reg_1241_pp0_iter10_reg <= gmem_w2_addr_read_reg_1241;
        gmem_w2_addr_read_reg_1241_pp0_iter11_reg <= gmem_w2_addr_read_reg_1241_pp0_iter10_reg;
        i2_1_reg_1226_pp0_iter10_reg <= i2_1_reg_1226_pp0_iter9_reg;
        i2_1_reg_1226_pp0_iter11_reg <= i2_1_reg_1226_pp0_iter10_reg;
        i2_1_reg_1226_pp0_iter2_reg <= i2_1_reg_1226_pp0_iter1_reg;
        i2_1_reg_1226_pp0_iter3_reg <= i2_1_reg_1226_pp0_iter2_reg;
        i2_1_reg_1226_pp0_iter4_reg <= i2_1_reg_1226_pp0_iter3_reg;
        i2_1_reg_1226_pp0_iter5_reg <= i2_1_reg_1226_pp0_iter4_reg;
        i2_1_reg_1226_pp0_iter6_reg <= i2_1_reg_1226_pp0_iter5_reg;
        i2_1_reg_1226_pp0_iter7_reg <= i2_1_reg_1226_pp0_iter6_reg;
        i2_1_reg_1226_pp0_iter8_reg <= i2_1_reg_1226_pp0_iter7_reg;
        i2_1_reg_1226_pp0_iter9_reg <= i2_1_reg_1226_pp0_iter8_reg;
        icmp_ln576_10_reg_1328 <= icmp_ln576_10_fu_570_p2;
        icmp_ln576_1_reg_1290 <= icmp_ln576_1_fu_462_p2;
        icmp_ln576_4_reg_1302 <= icmp_ln576_4_fu_488_p2;
        icmp_ln576_5_reg_1307 <= icmp_ln576_5_fu_504_p2;
        icmp_ln576_6_reg_1312 <= icmp_ln576_6_fu_520_p2;
        icmp_ln576_7_reg_1323 <= icmp_ln576_7_fu_536_p2;
        icmp_ln576_reg_1271 <= icmp_ln576_fu_446_p2;
        select_ln576_1_reg_1295 <= select_ln576_1_fu_480_p3;
        sub_ln576_1_reg_1277 <= sub_ln576_1_fu_452_p2;
        sub_ln576_reg_1266 <= sub_ln576_fu_440_p2;
        tmp_reg_1252 <= bitcast_ln724_fu_394_p1[32'd63];
        trunc_ln576_2_reg_1285 <= trunc_ln576_2_fu_458_p1;
        trunc_ln576_7_reg_1317 <= trunc_ln576_7_fu_526_p1;
        zext_ln576_6_reg_1261[51 : 0] <= zext_ln576_6_fu_436_p1[51 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i2_1_reg_1226 <= ap_sig_allocacmp_i2_1;
        i2_1_reg_1226_pp0_iter1_reg <= i2_1_reg_1226;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln570_fu_343_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_w2_addr_reg_1235 <= sext_ln576_fu_375_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln570_fu_343_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i2_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i2_1 = i2_fu_180;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_w2_blk_n_AR = m_axi_gmem_w2_ARREADY;
    end else begin
        gmem_w2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_w2_blk_n_R = m_axi_gmem_w2_RVALID;
    end else begin
        gmem_w2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_324_ce = 1'b1;
    end else begin
        grp_fu_324_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_w2_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_w2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_w2_RREADY = 1'b1;
    end else begin
        m_axi_gmem_w2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln566_3_read_reg_1217 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln570_fu_349_p2 = (ap_sig_allocacmp_i2_1 + 7'd1);

assign add_ln576_10_fu_909_p2 = (trunc_ln576_7_reg_1317 + 6'd3);

assign add_ln576_1_fu_468_p2 = ($signed(sub_ln576_1_fu_452_p2) + $signed(12'd4082));

assign add_ln576_2_fu_662_p2 = ($signed(trunc_ln576_2_reg_1285) + $signed(11'd2033));

assign add_ln576_3_fu_530_p2 = ($signed(sub_ln576_1_fu_452_p2) + $signed(12'd4080));

assign add_ln576_4_fu_758_p2 = (select_ln576_2_fu_650_p3 + zext_ln576_3_fu_754_p1);

assign add_ln576_5_fu_359_p2 = (zext_ln566_1_cast_fu_331_p1 + zext_ln570_fu_355_p1);

assign add_ln576_6_fu_554_p2 = ($signed(sext_ln576_4_fu_550_p1) + $signed(zext_ln576_fu_420_p1));

assign add_ln576_7_fu_835_p2 = (sub_ln576_1_reg_1277 + 12'd2);

assign add_ln576_8_fu_844_p2 = (sub_ln576_1_reg_1277 + 12'd3);

assign add_ln576_9_fu_579_p2 = (zext_ln576_7 + zext_ln576_2_fu_576_p1);

assign add_ln576_fu_369_p2 = ($signed(zext_ln576_1_fu_365_p1) + $signed(sext_ln566_cast_fu_327_p1));

assign and_ln576_10_fu_792_p2 = (xor_ln576_1_fu_786_p2 & icmp_ln576_1_reg_1290);

assign and_ln576_11_fu_810_p2 = (icmp_ln576_9_fu_805_p2 & icmp_ln576_5_reg_1307);

assign and_ln576_12_fu_823_p2 = (xor_ln576_8_fu_772_p2 & tmp_21_fu_734_p3);

assign and_ln576_13_fu_829_p2 = (and_ln576_12_fu_823_p2 & and_ln576_10_fu_792_p2);

assign and_ln576_14_fu_891_p2 = (tobool_i3_fu_883_p3 & icmp_ln576_12_fu_877_p2);

assign and_ln576_15_fu_1086_p2 = (xor_ln576_3_fu_1074_p2 & tmp_24_fu_849_p3);

assign and_ln576_16_fu_1092_p2 = (tmp_reg_1252 & and_ln576_15_fu_1086_p2);

assign and_ln576_17_fu_1097_p2 = (tmp_reg_1252 & icmp_ln576_11_fu_857_p2);

assign and_ln576_18_fu_1116_p2 = (xor_ln576_4_fu_1110_p2 & icmp_ln576_11_fu_857_p2);

assign and_ln576_19_fu_1183_p2 = (xor_ln576_7_fu_1178_p2 & or_ln576_3_fu_1157_p2);

assign and_ln576_1_fu_729_p2 = (icmp_ln576_8_fu_723_p2 & icmp_ln576_6_reg_1312);

assign and_ln576_20_fu_1189_p2 = (icmp_ln576_10_reg_1328 & and_ln576_19_fu_1183_p2);

assign and_ln576_21_fu_717_p2 = (select_ln576_fu_596_p3 & lshr_ln576_2_fu_711_p2);

assign and_ln576_2_fu_958_p2 = (xor_ln576_9_fu_871_p2 & icmp_ln576_13_fu_897_p2);

assign and_ln576_3_fu_964_p2 = (select_ln576_12_fu_950_p3 & and_ln576_14_fu_891_p2);

assign and_ln576_4_fu_982_p2 = (xor_ln576_fu_970_p2 & icmp_ln576_16_fu_976_p2);

assign and_ln576_5_fu_1048_p2 = (select_ln576_12_fu_950_p3 & or_ln576_1_fu_1042_p2);

assign and_ln576_6_fu_1062_p2 = (select_ln576_13_fu_1010_p3 & and_ln576_13_fu_829_p2);

assign and_ln576_7_fu_1133_p2 = (xor_ln576_5_fu_1128_p2 & or_ln576_2_fu_1122_p2);

assign and_ln576_8_fu_1139_p2 = (tmp_24_fu_849_p3 & or_ln576_5_fu_1080_p2);

assign and_ln576_9_fu_1151_p2 = (xor_ln576_6_fu_1145_p2 & select_ln576_16_fu_1102_p3);

assign and_ln576_fu_748_p2 = (select_ln576_8_fu_689_p3 & or_ln576_fu_742_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_w2_RVALID == 1'b0)) | ((m_axi_gmem_w2_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_w2_RVALID == 1'b0)) | ((m_axi_gmem_w2_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (m_axi_gmem_w2_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln576_fu_640_p2 = $signed(select_ln576_fu_596_p3) >>> zext_ln576_9_fu_636_p1;

assign bit_select59_i3_fu_671_p3 = select_ln576_fu_596_p3[zext_ln576_4_fu_667_p1];

assign bitcast_ln576_fu_390_p1 = gmem_w2_addr_read_reg_1241;

assign bitcast_ln724_fu_394_p1 = grp_fu_5410_p_dout0;

assign grp_fu_5410_p_ce = grp_fu_324_ce;

assign grp_fu_5410_p_din0 = bitcast_ln576_fu_390_p1;

assign icmp_ln570_fu_343_p2 = ((ap_sig_allocacmp_i2_1 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln576_10_fu_570_p2 = (($signed(tmp_23_fu_560_p4) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln576_11_fu_857_p2 = (($signed(add_ln576_7_fu_835_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln576_12_fu_877_p2 = ((add_ln576_7_fu_835_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln576_13_fu_897_p2 = (($signed(add_ln576_8_fu_844_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln576_14_fu_903_p2 = ((add_ln576_8_fu_844_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln576_15_fu_930_p2 = ((lshr_ln576_fu_918_p2 == lshr_ln576_1_fu_924_p2) ? 1'b1 : 1'b0);

assign icmp_ln576_16_fu_976_p2 = ((lshr_ln576_fu_918_p2 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln576_17_fu_988_p2 = ((add_ln576_8_fu_844_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln576_1_fu_462_p2 = (($signed(sub_ln576_1_fu_452_p2) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln576_2_fu_604_p2 = ((sub_ln576_1_reg_1277 == 12'd14) ? 1'b1 : 1'b0);

assign icmp_ln576_3_fu_613_p2 = ((select_ln576_1_reg_1295 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln576_4_fu_488_p2 = (($signed(add_ln576_1_fu_468_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln576_5_fu_504_p2 = ((tmp_19_fu_494_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln576_6_fu_520_p2 = (($signed(tmp_20_fu_510_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln576_7_fu_536_p2 = (($signed(add_ln576_3_fu_530_p2) > $signed(12'd53)) ? 1'b1 : 1'b0);

assign icmp_ln576_8_fu_723_p2 = ((and_ln576_21_fu_717_p2 != 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln576_9_fu_805_p2 = (($signed(sub_ln576_1_reg_1277) < $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln576_fu_446_p2 = ((trunc_ln576_fu_398_p1 == 63'd0) ? 1'b1 : 1'b0);

assign lshr_ln576_1_fu_924_p2 = 54'd18014398509481983 >> zext_ln576_8_fu_914_p1;

assign lshr_ln576_2_fu_711_p2 = 54'd18014398509481983 >> zext_ln576_10_fu_707_p1;

assign lshr_ln576_fu_918_p2 = select_ln576_fu_596_p3 >> zext_ln576_8_fu_914_p1;

assign m_axi_gmem_w2_ARADDR = gmem_w2_addr_reg_1235;

assign m_axi_gmem_w2_ARBURST = 2'd0;

assign m_axi_gmem_w2_ARCACHE = 4'd0;

assign m_axi_gmem_w2_ARID = 1'd0;

assign m_axi_gmem_w2_ARLEN = 32'd1;

assign m_axi_gmem_w2_ARLOCK = 2'd0;

assign m_axi_gmem_w2_ARPROT = 3'd0;

assign m_axi_gmem_w2_ARQOS = 4'd0;

assign m_axi_gmem_w2_ARREGION = 4'd0;

assign m_axi_gmem_w2_ARSIZE = 3'd0;

assign m_axi_gmem_w2_ARUSER = 1'd0;

assign m_axi_gmem_w2_AWADDR = 64'd0;

assign m_axi_gmem_w2_AWBURST = 2'd0;

assign m_axi_gmem_w2_AWCACHE = 4'd0;

assign m_axi_gmem_w2_AWID = 1'd0;

assign m_axi_gmem_w2_AWLEN = 32'd0;

assign m_axi_gmem_w2_AWLOCK = 2'd0;

assign m_axi_gmem_w2_AWPROT = 3'd0;

assign m_axi_gmem_w2_AWQOS = 4'd0;

assign m_axi_gmem_w2_AWREGION = 4'd0;

assign m_axi_gmem_w2_AWSIZE = 3'd0;

assign m_axi_gmem_w2_AWUSER = 1'd0;

assign m_axi_gmem_w2_AWVALID = 1'b0;

assign m_axi_gmem_w2_BREADY = 1'b0;

assign m_axi_gmem_w2_WDATA = 32'd0;

assign m_axi_gmem_w2_WID = 1'd0;

assign m_axi_gmem_w2_WLAST = 1'b0;

assign m_axi_gmem_w2_WSTRB = 4'd0;

assign m_axi_gmem_w2_WUSER = 1'd0;

assign m_axi_gmem_w2_WVALID = 1'b0;

assign or_ln576_1_fu_1042_p2 = (xor_ln576_fu_970_p2 | tmp_27_fu_1034_p3);

assign or_ln576_2_fu_1122_p2 = (tmp_24_fu_849_p3 | and_ln576_18_fu_1116_p2);

assign or_ln576_3_fu_1157_p2 = (and_ln576_9_fu_1151_p2 | and_ln576_7_fu_1133_p2);

assign or_ln576_4_fu_542_p3 = {{10'd513}, {icmp_ln576_1_fu_462_p2}};

assign or_ln576_5_fu_1080_p2 = (xor_ln576_3_fu_1074_p2 | select_ln576_15_fu_1054_p3);

assign or_ln576_fu_742_p2 = (trunc_ln576_5_fu_658_p1 | and_ln576_1_fu_729_p2);

assign select_ln576_10_fu_797_p3 = ((and_ln576_10_fu_792_p2[0:0] == 1'b1) ? add_ln576_4_fu_758_p2 : select_ln576_9_fu_778_p3);

assign select_ln576_11_fu_815_p3 = ((and_ln576_11_fu_810_p2[0:0] == 1'b1) ? shl_ln576_fu_683_p2 : select_ln576_10_fu_797_p3);

assign select_ln576_12_fu_950_p3 = ((icmp_ln576_14_fu_903_p2[0:0] == 1'b1) ? icmp_ln576_15_fu_930_p2 : xor_ln576_10_fu_944_p2);

assign select_ln576_13_fu_1010_p3 = ((and_ln576_2_fu_958_p2[0:0] == 1'b1) ? and_ln576_3_fu_964_p2 : select_ln576_6_fu_994_p3);

assign select_ln576_14_fu_1018_p3 = ((and_ln576_2_fu_958_p2[0:0] == 1'b1) ? and_ln576_4_fu_982_p2 : select_ln576_7_fu_1002_p3);

assign select_ln576_15_fu_1054_p3 = ((and_ln576_13_fu_829_p2[0:0] == 1'b1) ? and_ln576_5_fu_1048_p2 : select_ln576_13_fu_1010_p3);

assign select_ln576_16_fu_1102_p3 = ((and_ln576_17_fu_1097_p2[0:0] == 1'b1) ? xor_ln576_2_fu_1068_p2 : and_ln576_16_fu_1092_p2);

assign select_ln576_17_fu_1171_p3 = ((icmp_ln576_reg_1271[0:0] == 1'b1) ? 16'd0 : select_ln576_11_fu_815_p3);

assign select_ln576_18_fu_1194_p3 = ((and_ln576_20_fu_1189_p2[0:0] == 1'b1) ? select_ln576_5_fu_1163_p3 : select_ln576_17_fu_1171_p3);

assign select_ln576_19_fu_700_p3 = ((icmp_ln576_7_reg_1323[0:0] == 1'b1) ? 6'd0 : sub_ln576_3_fu_695_p2);

assign select_ln576_1_fu_480_p3 = ((icmp_ln576_1_fu_462_p2[0:0] == 1'b1) ? add_ln576_1_fu_468_p2 : sub_ln576_2_fu_474_p2);

assign select_ln576_2_fu_650_p3 = ((icmp_ln576_3_fu_613_p2[0:0] == 1'b1) ? trunc_ln576_4_fu_646_p1 : select_ln576_3_fu_625_p3);

assign select_ln576_3_fu_625_p3 = ((tmp_18_fu_618_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln576_4_fu_1026_p3 = ((and_ln576_13_fu_829_p2[0:0] == 1'b1) ? select_ln576_13_fu_1010_p3 : select_ln576_14_fu_1018_p3);

assign select_ln576_5_fu_1163_p3 = ((and_ln576_7_fu_1133_p2[0:0] == 1'b1) ? 16'd32767 : 16'd32768);

assign select_ln576_6_fu_994_p3 = ((icmp_ln576_17_fu_988_p2[0:0] == 1'b1) ? and_ln576_14_fu_891_p2 : xor_ln576_9_fu_871_p2);

assign select_ln576_7_fu_1002_p3 = ((icmp_ln576_17_fu_988_p2[0:0] == 1'b1) ? xor_ln576_fu_970_p2 : xor_ln576_9_fu_871_p2);

assign select_ln576_8_fu_689_p3 = ((icmp_ln576_4_reg_1302[0:0] == 1'b1) ? tmp_reg_1252 : bit_select59_i3_fu_671_p3);

assign select_ln576_9_fu_778_p3 = ((icmp_ln576_2_fu_604_p2[0:0] == 1'b1) ? trunc_ln576_3_fu_609_p1 : 16'd0);

assign select_ln576_fu_596_p3 = ((tmp_reg_1252[0:0] == 1'b1) ? sub_ln576_reg_1266 : zext_ln576_6_reg_1261);

assign sext_ln566_cast_fu_327_p1 = $signed(sext_ln566);

assign sext_ln576_1_fu_601_p1 = select_ln576_1_reg_1295;

assign sext_ln576_1cast_fu_679_p1 = sext_ln576_1_fu_601_p1[15:0];

assign sext_ln576_2_fu_633_p1 = select_ln576_1_reg_1295;

assign sext_ln576_4_fu_550_p1 = $signed(or_ln576_4_fu_542_p3);

assign sext_ln576_5_fu_840_p1 = add_ln576_7_fu_835_p2;

assign sext_ln576_fu_375_p1 = $signed(add_ln576_fu_369_p2);

assign shl_ln576_fu_683_p2 = trunc_ln576_3_fu_609_p1 << sext_ln576_1cast_fu_679_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_1_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_2_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_3_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_4_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_5_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_6_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_7_d0 = select_ln576_18_fu_1194_p3;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_address0 = zext_ln576_5_fu_584_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_d0 = select_ln576_18_fu_1194_p3;

assign sub_ln576_1_fu_452_p2 = (12'd1075 - zext_ln576_fu_420_p1);

assign sub_ln576_2_fu_474_p2 = (12'd14 - sub_ln576_1_fu_452_p2);

assign sub_ln576_3_fu_695_p2 = (6'd5 - trunc_ln576_7_reg_1317);

assign sub_ln576_fu_440_p2 = (54'd0 - zext_ln576_6_fu_436_p1);

assign tmp_18_fu_618_p3 = gmem_w2_addr_read_reg_1241_pp0_iter11_reg[32'd31];

assign tmp_19_fu_494_p4 = {{select_ln576_1_fu_480_p3[11:4]}};

assign tmp_20_fu_510_p4 = {{sub_ln576_1_fu_452_p2[11:4]}};

assign tmp_21_fu_734_p3 = select_ln576_2_fu_650_p3[32'd15];

assign tmp_22_fu_764_p3 = add_ln576_4_fu_758_p2[32'd15];

assign tmp_23_fu_560_p4 = {{add_ln576_6_fu_554_p2[11:1]}};

assign tmp_24_fu_849_p3 = select_ln576_11_fu_815_p3[32'd15];

assign tmp_25_fu_863_p3 = add_ln576_7_fu_835_p2[32'd11];

assign tmp_26_fu_936_p3 = add_ln576_8_fu_844_p2[32'd11];

assign tmp_27_fu_1034_p3 = add_ln576_7_fu_835_p2[32'd11];

assign tmp_s_fu_410_p4 = {{bitcast_ln724_fu_394_p1[62:52]}};

assign tobool_i3_fu_883_p3 = select_ln576_fu_596_p3[sext_ln576_5_fu_840_p1];

assign trunc_ln566_3_read_reg_1217 = trunc_ln566_3;

assign trunc_ln576_1_fu_424_p1 = bitcast_ln724_fu_394_p1[51:0];

assign trunc_ln576_2_fu_458_p1 = sub_ln576_1_fu_452_p2[10:0];

assign trunc_ln576_3_fu_609_p1 = select_ln576_fu_596_p3[15:0];

assign trunc_ln576_4_fu_646_p1 = ashr_ln576_fu_640_p2[15:0];

assign trunc_ln576_5_fu_658_p1 = select_ln576_2_fu_650_p3[0:0];

assign trunc_ln576_7_fu_526_p1 = sub_ln576_1_fu_452_p2[5:0];

assign trunc_ln576_fu_398_p1 = bitcast_ln724_fu_394_p1[62:0];

assign xor_ln576_10_fu_944_p2 = (tmp_26_fu_936_p3 ^ 1'd1);

assign xor_ln576_1_fu_786_p2 = (icmp_ln576_2_fu_604_p2 ^ 1'd1);

assign xor_ln576_2_fu_1068_p2 = (1'd1 ^ and_ln576_6_fu_1062_p2);

assign xor_ln576_3_fu_1074_p2 = (icmp_ln576_11_fu_857_p2 ^ 1'd1);

assign xor_ln576_4_fu_1110_p2 = (select_ln576_4_fu_1026_p3 ^ 1'd1);

assign xor_ln576_5_fu_1128_p2 = (tmp_reg_1252 ^ 1'd1);

assign xor_ln576_6_fu_1145_p2 = (1'd1 ^ and_ln576_8_fu_1139_p2);

assign xor_ln576_7_fu_1178_p2 = (icmp_ln576_reg_1271 ^ 1'd1);

assign xor_ln576_8_fu_772_p2 = (tmp_22_fu_764_p3 ^ 1'd1);

assign xor_ln576_9_fu_871_p2 = (tmp_25_fu_863_p3 ^ 1'd1);

assign xor_ln576_fu_970_p2 = (1'd1 ^ and_ln576_14_fu_891_p2);

assign zext_ln566_1_cast_fu_331_p1 = zext_ln566_1;

assign zext_ln570_fu_355_p1 = ap_sig_allocacmp_i2_1;

assign zext_ln576_10_fu_707_p1 = select_ln576_19_fu_700_p3;

assign zext_ln576_1_fu_365_p1 = add_ln576_5_fu_359_p2;

assign zext_ln576_2_cast_fu_428_p3 = {{1'd1}, {trunc_ln576_1_fu_424_p1}};

assign zext_ln576_2_fu_576_p1 = i2_1_reg_1226_pp0_iter11_reg;

assign zext_ln576_3_fu_754_p1 = and_ln576_fu_748_p2;

assign zext_ln576_4_fu_667_p1 = add_ln576_2_fu_662_p2;

assign zext_ln576_5_fu_584_p1 = add_ln576_9_fu_579_p2;

assign zext_ln576_6_fu_436_p1 = zext_ln576_2_cast_fu_428_p3;

assign zext_ln576_8_fu_914_p1 = add_ln576_10_fu_909_p2;

assign zext_ln576_9_fu_636_p1 = $unsigned(sext_ln576_2_fu_633_p1);

assign zext_ln576_fu_420_p1 = tmp_s_fu_410_p4;

always @ (posedge ap_clk) begin
    zext_ln576_6_reg_1261[53:52] <= 2'b01;
end

endmodule //srcnn_srcnn_Pipeline_CopyW2_inft
