// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_store_stream6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_out_i_dout,
        s_out_i_num_data_valid,
        s_out_i_fifo_cap,
        s_out_i_empty_n,
        s_out_i_read,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RFIFONUM,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        output_ftmap_dout,
        output_ftmap_num_data_valid,
        output_ftmap_fifo_cap,
        output_ftmap_empty_n,
        output_ftmap_read,
        h0_dout,
        h0_num_data_valid,
        h0_fifo_cap,
        h0_empty_n,
        h0_read,
        w0_dout,
        w0_num_data_valid,
        w0_fifo_cap,
        w0_empty_n,
        w0_read,
        tw_eff_loc_i_dout,
        tw_eff_loc_i_num_data_valid,
        tw_eff_loc_i_fifo_cap,
        tw_eff_loc_i_empty_n,
        tw_eff_loc_i_read
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] s_out_i_dout;
input  [10:0] s_out_i_num_data_valid;
input  [10:0] s_out_i_fifo_cap;
input   s_out_i_empty_n;
output   s_out_i_read;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [63:0] m_axi_gmem_out_AWADDR;
output  [0:0] m_axi_gmem_out_AWID;
output  [31:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [0:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [31:0] m_axi_gmem_out_WDATA;
output  [3:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [0:0] m_axi_gmem_out_WID;
output  [0:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [63:0] m_axi_gmem_out_ARADDR;
output  [0:0] m_axi_gmem_out_ARID;
output  [31:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [0:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [31:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [0:0] m_axi_gmem_out_RID;
input  [8:0] m_axi_gmem_out_RFIFONUM;
input  [0:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [0:0] m_axi_gmem_out_BID;
input  [0:0] m_axi_gmem_out_BUSER;
input  [63:0] output_ftmap_dout;
input  [3:0] output_ftmap_num_data_valid;
input  [3:0] output_ftmap_fifo_cap;
input   output_ftmap_empty_n;
output   output_ftmap_read;
input  [8:0] h0_dout;
input  [1:0] h0_num_data_valid;
input  [1:0] h0_fifo_cap;
input   h0_empty_n;
output   h0_read;
input  [7:0] w0_dout;
input  [2:0] w0_num_data_valid;
input  [2:0] w0_fifo_cap;
input   w0_empty_n;
output   w0_read;
input  [7:0] tw_eff_loc_i_dout;
input  [1:0] tw_eff_loc_i_num_data_valid;
input  [1:0] tw_eff_loc_i_fifo_cap;
input   tw_eff_loc_i_empty_n;
output   tw_eff_loc_i_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_out_i_read;
reg m_axi_gmem_out_AWVALID;
reg m_axi_gmem_out_WVALID;
reg m_axi_gmem_out_BREADY;
reg output_ftmap_read;
reg h0_read;
reg w0_read;
reg tw_eff_loc_i_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    s_out_i_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln421_fu_364_p2;
reg    gmem_out_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem_out_blk_n_W;
wire    ap_CS_fsm_state6;
reg    gmem_out_blk_n_B;
wire    ap_CS_fsm_state11;
reg    output_ftmap_blk_n;
reg    h0_blk_n;
reg    w0_blk_n;
reg    tw_eff_loc_i_blk_n;
reg   [63:0] out_reg_695;
reg    ap_block_state1;
reg   [7:0] tw_eff_reg_700;
wire   [7:0] th_eff_fu_240_p3;
reg   [7:0] th_eff_reg_705;
wire   [9:0] zext_ln419_fu_248_p1;
reg   [9:0] zext_ln419_reg_710;
wire   [21:0] zext_ln419_1_fu_260_p1;
reg   [21:0] zext_ln419_1_reg_715;
wire   [31:0] zext_ln419_2_fu_264_p1;
reg   [31:0] zext_ln419_2_reg_720;
wire   [7:0] add_ln419_fu_285_p2;
reg   [7:0] add_ln419_reg_728;
wire    ap_CS_fsm_state2;
reg   [63:0] gmem_out_addr_reg_733;
wire   [0:0] icmp_ln419_fu_280_p2;
wire   [7:0] add_ln421_fu_369_p2;
reg   [7:0] add_ln421_reg_742;
reg    ap_block_state4;
reg   [23:0] s_out_i_read_reg_747;
reg   [0:0] tmp_3_reg_753;
wire   [23:0] sub_ln422_fu_383_p2;
reg   [23:0] sub_ln422_reg_759;
wire   [31:0] select_ln422_3_fu_680_p3;
reg   [31:0] select_ln422_3_reg_764;
wire    ap_CS_fsm_state5;
reg   [7:0] x_reg_205;
wire  signed [63:0] sext_ln421_fu_354_p1;
reg   [7:0] y_fu_156;
wire   [8:0] add_ln616_fu_216_p2;
wire   [7:0] trunc_ln615_fu_230_p1;
wire   [0:0] tmp_2_fu_222_p3;
wire   [7:0] xor_ln616_fu_234_p2;
wire   [9:0] tmp_1_fu_252_p3;
wire   [9:0] zext_ln419_3_fu_276_p1;
wire   [9:0] empty_fu_291_p2;
wire   [19:0] p_shl_i_fu_296_p3;
wire   [11:0] p_shl1_i_fu_308_p3;
wire   [20:0] p_shl_cast7_i_fu_304_p1;
wire   [20:0] p_shl1_cast8_i_fu_316_p1;
wire   [20:0] empty_83_fu_320_p2;
wire  signed [21:0] p_cast_fu_326_p1;
wire   [21:0] tmp_fu_330_p2;
wire  signed [63:0] tmp_cast_fu_335_p1;
wire   [63:0] empty_84_fu_339_p2;
wire   [61:0] trunc_ln1_fu_344_p4;
wire   [23:0] select_ln422_fu_398_p3;
reg   [23:0] tmp_i_fu_403_p4;
wire   [24:0] tmp_1_i_fu_413_p3;
wire  signed [31:0] sext_ln422_fu_421_p1;
reg   [31:0] tmp_2_i_fu_425_p3;
wire   [31:0] sub_ln422_1_fu_433_p2;
wire   [31:0] add_ln422_fu_443_p2;
wire   [30:0] tmp_4_fu_449_p4;
wire   [4:0] trunc_ln422_1_fu_465_p1;
wire   [4:0] sub_ln422_4_fu_469_p2;
wire   [23:0] zext_ln422_5_fu_475_p1;
wire   [23:0] lshr_ln422_2_fu_479_p2;
wire   [23:0] and_ln422_2_fu_485_p2;
wire   [0:0] icmp_ln422_1_fu_459_p2;
wire   [0:0] icmp_ln422_2_fu_491_p2;
wire   [0:0] tmp_5_fu_503_p3;
wire   [23:0] trunc_ln422_fu_439_p1;
wire   [23:0] add_ln422_1_fu_517_p2;
wire   [0:0] bit_select30_i_i_i_fu_523_p3;
wire   [0:0] xor_ln422_fu_511_p2;
wire   [0:0] and_ln422_1_fu_531_p2;
wire   [0:0] and_ln422_fu_497_p2;
wire   [0:0] or_ln422_fu_537_p2;
wire   [31:0] add_ln422_2_fu_561_p2;
wire   [63:0] zext_ln422_fu_551_p1;
wire   [63:0] zext_ln422_1_fu_567_p1;
wire   [31:0] sub_ln422_2_fu_577_p2;
wire   [63:0] zext_ln422_2_fu_583_p1;
wire   [0:0] icmp_ln422_3_fu_555_p2;
wire   [63:0] lshr_ln422_fu_571_p2;
wire   [63:0] shl_ln422_fu_587_p2;
wire   [1:0] or_ln_i_fu_543_p3;
wire   [63:0] select_ln422_1_fu_593_p3;
wire   [63:0] zext_ln422_3_fu_601_p1;
wire   [63:0] add_ln422_3_fu_605_p2;
wire   [62:0] lshr_ln422_1_fu_611_p4;
wire   [0:0] tmp_6_fu_625_p3;
wire   [7:0] trunc_ln422_2_fu_641_p1;
wire   [7:0] sub_ln422_3_fu_645_p2;
wire   [7:0] select_ln422_2_fu_633_p3;
wire   [7:0] add_ln422_4_fu_651_p2;
wire   [63:0] zext_ln422_4_fu_621_p1;
wire   [8:0] tmp_5_i_fu_657_p3;
wire   [63:0] pi_assign_fu_664_p5;
wire   [0:0] icmp_ln422_fu_393_p2;
wire   [31:0] LD_fu_676_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln419_fu_280_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        x_reg_205 <= add_ln421_reg_742;
    end else if (((m_axi_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_205 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_156 <= 8'd0;
    end else if ((~((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln421_fu_364_p2 == 1'd1))) begin
        y_fu_156 <= add_ln419_reg_728;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln419_reg_728 <= add_ln419_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln421_reg_742 <= add_ln421_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln419_fu_280_p2 == 1'd0))) begin
        gmem_out_addr_reg_733 <= sext_ln421_fu_354_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_reg_695 <= output_ftmap_dout;
        th_eff_reg_705 <= th_eff_fu_240_p3;
        tw_eff_reg_700 <= tw_eff_loc_i_dout;
        zext_ln419_1_reg_715[9 : 2] <= zext_ln419_1_fu_260_p1[9 : 2];
        zext_ln419_2_reg_720[7 : 0] <= zext_ln419_2_fu_264_p1[7 : 0];
        zext_ln419_reg_710[8 : 0] <= zext_ln419_fu_248_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln421_fu_364_p2 == 1'd0))) begin
        s_out_i_read_reg_747 <= s_out_i_dout;
        sub_ln422_reg_759 <= sub_ln422_fu_383_p2;
        tmp_3_reg_753 <= s_out_i_dout[32'd23];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln422_3_reg_764 <= select_ln422_3_fu_680_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_out_BVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_out_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_out_WREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln419_fu_280_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln419_fu_280_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_blk_n = h0_empty_n;
    end else begin
        h0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_read = 1'b1;
    end else begin
        h0_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_out_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_gmem_out_BREADY = 1'b1;
    end else begin
        m_axi_gmem_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_gmem_out_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_ftmap_blk_n = output_ftmap_empty_n;
    end else begin
        output_ftmap_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_ftmap_read = 1'b1;
    end else begin
        output_ftmap_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln421_fu_364_p2 == 1'd0))) begin
        s_out_i_blk_n = s_out_i_empty_n;
    end else begin
        s_out_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln421_fu_364_p2 == 1'd0))) begin
        s_out_i_read = 1'b1;
    end else begin
        s_out_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tw_eff_loc_i_blk_n = tw_eff_loc_i_empty_n;
    end else begin
        tw_eff_loc_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tw_eff_loc_i_read = 1'b1;
    end else begin
        tw_eff_loc_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_blk_n = w0_empty_n;
    end else begin
        w0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_read = 1'b1;
    end else begin
        w0_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln419_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln421_fu_364_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln421_fu_364_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_gmem_out_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_676_p1 = pi_assign_fu_664_p5[31:0];

assign add_ln419_fu_285_p2 = (y_fu_156 + 8'd1);

assign add_ln421_fu_369_p2 = (x_reg_205 + 8'd1);

assign add_ln422_1_fu_517_p2 = ($signed(trunc_ln422_fu_439_p1) + $signed(24'd16777192));

assign add_ln422_2_fu_561_p2 = ($signed(sub_ln422_1_fu_433_p2) + $signed(32'd4294967271));

assign add_ln422_3_fu_605_p2 = (select_ln422_1_fu_593_p3 + zext_ln422_3_fu_601_p1);

assign add_ln422_4_fu_651_p2 = (sub_ln422_3_fu_645_p2 + select_ln422_2_fu_633_p3);

assign add_ln422_fu_443_p2 = ($signed(sub_ln422_1_fu_433_p2) + $signed(32'd4294967272));

assign add_ln616_fu_216_p2 = (h0_dout + 9'd16);

assign and_ln422_1_fu_531_p2 = (xor_ln422_fu_511_p2 & bit_select30_i_i_i_fu_523_p3);

assign and_ln422_2_fu_485_p2 = (select_ln422_fu_398_p3 & lshr_ln422_2_fu_479_p2);

assign and_ln422_fu_497_p2 = (icmp_ln422_2_fu_491_p2 & icmp_ln422_1_fu_459_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (tw_eff_loc_i_empty_n == 1'b0) | (w0_empty_n == 1'b0) | (h0_empty_n == 1'b0) | (output_ftmap_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((s_out_i_empty_n == 1'b0) & (icmp_ln421_fu_364_p2 == 1'd0));
end

assign bit_select30_i_i_i_fu_523_p3 = select_ln422_fu_398_p3[add_ln422_1_fu_517_p2];

assign empty_83_fu_320_p2 = (p_shl_cast7_i_fu_304_p1 - p_shl1_cast8_i_fu_316_p1);

assign empty_84_fu_339_p2 = ($signed(tmp_cast_fu_335_p1) + $signed(out_reg_695));

assign empty_fu_291_p2 = (zext_ln419_reg_710 + zext_ln419_3_fu_276_p1);

assign icmp_ln419_fu_280_p2 = ((y_fu_156 == th_eff_reg_705) ? 1'b1 : 1'b0);

assign icmp_ln421_fu_364_p2 = ((x_reg_205 == tw_eff_reg_700) ? 1'b1 : 1'b0);

assign icmp_ln422_1_fu_459_p2 = (($signed(tmp_4_fu_449_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln422_2_fu_491_p2 = ((and_ln422_2_fu_485_p2 != 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln422_3_fu_555_p2 = (($signed(add_ln422_fu_443_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln422_fu_393_p2 = ((s_out_i_read_reg_747 == 24'd0) ? 1'b1 : 1'b0);

assign lshr_ln422_1_fu_611_p4 = {{add_ln422_3_fu_605_p2[63:1]}};

assign lshr_ln422_2_fu_479_p2 = 24'd16777215 >> zext_ln422_5_fu_475_p1;

assign lshr_ln422_fu_571_p2 = zext_ln422_fu_551_p1 >> zext_ln422_1_fu_567_p1;

assign m_axi_gmem_out_ARADDR = 64'd0;

assign m_axi_gmem_out_ARBURST = 2'd0;

assign m_axi_gmem_out_ARCACHE = 4'd0;

assign m_axi_gmem_out_ARID = 1'd0;

assign m_axi_gmem_out_ARLEN = 32'd0;

assign m_axi_gmem_out_ARLOCK = 2'd0;

assign m_axi_gmem_out_ARPROT = 3'd0;

assign m_axi_gmem_out_ARQOS = 4'd0;

assign m_axi_gmem_out_ARREGION = 4'd0;

assign m_axi_gmem_out_ARSIZE = 3'd0;

assign m_axi_gmem_out_ARUSER = 1'd0;

assign m_axi_gmem_out_ARVALID = 1'b0;

assign m_axi_gmem_out_AWADDR = gmem_out_addr_reg_733;

assign m_axi_gmem_out_AWBURST = 2'd0;

assign m_axi_gmem_out_AWCACHE = 4'd0;

assign m_axi_gmem_out_AWID = 1'd0;

assign m_axi_gmem_out_AWLEN = zext_ln419_2_reg_720;

assign m_axi_gmem_out_AWLOCK = 2'd0;

assign m_axi_gmem_out_AWPROT = 3'd0;

assign m_axi_gmem_out_AWQOS = 4'd0;

assign m_axi_gmem_out_AWREGION = 4'd0;

assign m_axi_gmem_out_AWSIZE = 3'd0;

assign m_axi_gmem_out_AWUSER = 1'd0;

assign m_axi_gmem_out_RREADY = 1'b0;

assign m_axi_gmem_out_WDATA = select_ln422_3_reg_764;

assign m_axi_gmem_out_WID = 1'd0;

assign m_axi_gmem_out_WLAST = 1'b0;

assign m_axi_gmem_out_WSTRB = 4'd15;

assign m_axi_gmem_out_WUSER = 1'd0;

assign or_ln422_fu_537_p2 = (and_ln422_fu_497_p2 | and_ln422_1_fu_531_p2);

assign or_ln_i_fu_543_p3 = {{1'd0}, {or_ln422_fu_537_p2}};

assign p_cast_fu_326_p1 = $signed(empty_83_fu_320_p2);

assign p_shl1_cast8_i_fu_316_p1 = p_shl1_i_fu_308_p3;

assign p_shl1_i_fu_308_p3 = {{empty_fu_291_p2}, {2'd0}};

assign p_shl_cast7_i_fu_304_p1 = p_shl_i_fu_296_p3;

assign p_shl_i_fu_296_p3 = {{empty_fu_291_p2}, {10'd0}};

assign pi_assign_fu_664_p5 = {{zext_ln422_4_fu_621_p1[63:32]}, {tmp_5_i_fu_657_p3}, {zext_ln422_4_fu_621_p1[22:0]}};

assign select_ln422_1_fu_593_p3 = ((icmp_ln422_3_fu_555_p2[0:0] == 1'b1) ? lshr_ln422_fu_571_p2 : shl_ln422_fu_587_p2);

assign select_ln422_2_fu_633_p3 = ((tmp_6_fu_625_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln422_3_fu_680_p3 = ((icmp_ln422_fu_393_p2[0:0] == 1'b1) ? 32'd0 : LD_fu_676_p1);

assign select_ln422_fu_398_p3 = ((tmp_3_reg_753[0:0] == 1'b1) ? sub_ln422_reg_759 : s_out_i_read_reg_747);

assign sext_ln421_fu_354_p1 = $signed(trunc_ln1_fu_344_p4);

assign sext_ln422_fu_421_p1 = $signed(tmp_1_i_fu_413_p3);

assign shl_ln422_fu_587_p2 = zext_ln422_fu_551_p1 << zext_ln422_2_fu_583_p1;

assign sub_ln422_1_fu_433_p2 = (32'd24 - tmp_2_i_fu_425_p3);

assign sub_ln422_2_fu_577_p2 = (32'd25 - sub_ln422_1_fu_433_p2);

assign sub_ln422_3_fu_645_p2 = (8'd14 - trunc_ln422_2_fu_641_p1);

assign sub_ln422_4_fu_469_p2 = ($signed(5'd17) - $signed(trunc_ln422_1_fu_465_p1));

assign sub_ln422_fu_383_p2 = (24'd0 - s_out_i_dout);

assign th_eff_fu_240_p3 = ((tmp_2_fu_222_p3[0:0] == 1'b1) ? xor_ln616_fu_234_p2 : 8'd16);

assign tmp_1_fu_252_p3 = {{w0_dout}, {2'd0}};

assign tmp_1_i_fu_413_p3 = {{1'd1}, {tmp_i_fu_403_p4}};

assign tmp_2_fu_222_p3 = add_ln616_fu_216_p2[32'd8];


always @ (sext_ln422_fu_421_p1) begin
    if (sext_ln422_fu_421_p1[0] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd0;
    end else if (sext_ln422_fu_421_p1[1] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd1;
    end else if (sext_ln422_fu_421_p1[2] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd2;
    end else if (sext_ln422_fu_421_p1[3] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd3;
    end else if (sext_ln422_fu_421_p1[4] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd4;
    end else if (sext_ln422_fu_421_p1[5] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd5;
    end else if (sext_ln422_fu_421_p1[6] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd6;
    end else if (sext_ln422_fu_421_p1[7] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd7;
    end else if (sext_ln422_fu_421_p1[8] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd8;
    end else if (sext_ln422_fu_421_p1[9] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd9;
    end else if (sext_ln422_fu_421_p1[10] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd10;
    end else if (sext_ln422_fu_421_p1[11] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd11;
    end else if (sext_ln422_fu_421_p1[12] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd12;
    end else if (sext_ln422_fu_421_p1[13] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd13;
    end else if (sext_ln422_fu_421_p1[14] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd14;
    end else if (sext_ln422_fu_421_p1[15] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd15;
    end else if (sext_ln422_fu_421_p1[16] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd16;
    end else if (sext_ln422_fu_421_p1[17] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd17;
    end else if (sext_ln422_fu_421_p1[18] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd18;
    end else if (sext_ln422_fu_421_p1[19] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd19;
    end else if (sext_ln422_fu_421_p1[20] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd20;
    end else if (sext_ln422_fu_421_p1[21] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd21;
    end else if (sext_ln422_fu_421_p1[22] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd22;
    end else if (sext_ln422_fu_421_p1[23] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd23;
    end else if (sext_ln422_fu_421_p1[24] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd24;
    end else if (sext_ln422_fu_421_p1[25] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd25;
    end else if (sext_ln422_fu_421_p1[26] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd26;
    end else if (sext_ln422_fu_421_p1[27] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd27;
    end else if (sext_ln422_fu_421_p1[28] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd28;
    end else if (sext_ln422_fu_421_p1[29] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd29;
    end else if (sext_ln422_fu_421_p1[30] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd30;
    end else if (sext_ln422_fu_421_p1[31] == 1'b1) begin
        tmp_2_i_fu_425_p3 = 32'd31;
    end else begin
        tmp_2_i_fu_425_p3 = 32'd32;
    end
end

assign tmp_4_fu_449_p4 = {{add_ln422_fu_443_p2[31:1]}};

assign tmp_5_fu_503_p3 = add_ln422_fu_443_p2[32'd31];

assign tmp_5_i_fu_657_p3 = {{tmp_3_reg_753}, {add_ln422_4_fu_651_p2}};

assign tmp_6_fu_625_p3 = add_ln422_3_fu_605_p2[32'd25];

assign tmp_cast_fu_335_p1 = $signed(tmp_fu_330_p2);

assign tmp_fu_330_p2 = ($signed(p_cast_fu_326_p1) + $signed(zext_ln419_1_reg_715));

integer ap_tvar_int_0;

always @ (select_ln422_fu_398_p3) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_i_fu_403_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_i_fu_403_p4[ap_tvar_int_0] = select_ln422_fu_398_p3[23 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln1_fu_344_p4 = {{empty_84_fu_339_p2[63:2]}};

assign trunc_ln422_1_fu_465_p1 = sub_ln422_1_fu_433_p2[4:0];

assign trunc_ln422_2_fu_641_p1 = tmp_2_i_fu_425_p3[7:0];

assign trunc_ln422_fu_439_p1 = sub_ln422_1_fu_433_p2[23:0];

assign trunc_ln615_fu_230_p1 = h0_dout[7:0];

assign xor_ln422_fu_511_p2 = (tmp_5_fu_503_p3 ^ 1'd1);

assign xor_ln616_fu_234_p2 = (trunc_ln615_fu_230_p1 ^ 8'd255);

assign zext_ln419_1_fu_260_p1 = tmp_1_fu_252_p3;

assign zext_ln419_2_fu_264_p1 = tw_eff_loc_i_dout;

assign zext_ln419_3_fu_276_p1 = y_fu_156;

assign zext_ln419_fu_248_p1 = h0_dout;

assign zext_ln422_1_fu_567_p1 = add_ln422_2_fu_561_p2;

assign zext_ln422_2_fu_583_p1 = sub_ln422_2_fu_577_p2;

assign zext_ln422_3_fu_601_p1 = or_ln_i_fu_543_p3;

assign zext_ln422_4_fu_621_p1 = lshr_ln422_1_fu_611_p4;

assign zext_ln422_5_fu_475_p1 = sub_ln422_4_fu_469_p2;

assign zext_ln422_fu_551_p1 = select_ln422_fu_398_p3;

always @ (posedge ap_clk) begin
    zext_ln419_reg_710[9] <= 1'b0;
    zext_ln419_1_reg_715[1:0] <= 2'b00;
    zext_ln419_1_reg_715[21:10] <= 12'b000000000000;
    zext_ln419_2_reg_720[31:8] <= 24'b000000000000000000000000;
end

endmodule //srcnn_store_stream6
