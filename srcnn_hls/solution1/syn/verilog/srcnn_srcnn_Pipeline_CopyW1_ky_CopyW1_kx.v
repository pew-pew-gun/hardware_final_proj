// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_srcnn_Pipeline_CopyW1_ky_CopyW1_kx (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_w1_AWVALID,
        m_axi_gmem_w1_AWREADY,
        m_axi_gmem_w1_AWADDR,
        m_axi_gmem_w1_AWID,
        m_axi_gmem_w1_AWLEN,
        m_axi_gmem_w1_AWSIZE,
        m_axi_gmem_w1_AWBURST,
        m_axi_gmem_w1_AWLOCK,
        m_axi_gmem_w1_AWCACHE,
        m_axi_gmem_w1_AWPROT,
        m_axi_gmem_w1_AWQOS,
        m_axi_gmem_w1_AWREGION,
        m_axi_gmem_w1_AWUSER,
        m_axi_gmem_w1_WVALID,
        m_axi_gmem_w1_WREADY,
        m_axi_gmem_w1_WDATA,
        m_axi_gmem_w1_WSTRB,
        m_axi_gmem_w1_WLAST,
        m_axi_gmem_w1_WID,
        m_axi_gmem_w1_WUSER,
        m_axi_gmem_w1_ARVALID,
        m_axi_gmem_w1_ARREADY,
        m_axi_gmem_w1_ARADDR,
        m_axi_gmem_w1_ARID,
        m_axi_gmem_w1_ARLEN,
        m_axi_gmem_w1_ARSIZE,
        m_axi_gmem_w1_ARBURST,
        m_axi_gmem_w1_ARLOCK,
        m_axi_gmem_w1_ARCACHE,
        m_axi_gmem_w1_ARPROT,
        m_axi_gmem_w1_ARQOS,
        m_axi_gmem_w1_ARREGION,
        m_axi_gmem_w1_ARUSER,
        m_axi_gmem_w1_RVALID,
        m_axi_gmem_w1_RREADY,
        m_axi_gmem_w1_RDATA,
        m_axi_gmem_w1_RLAST,
        m_axi_gmem_w1_RID,
        m_axi_gmem_w1_RFIFONUM,
        m_axi_gmem_w1_RUSER,
        m_axi_gmem_w1_RRESP,
        m_axi_gmem_w1_BVALID,
        m_axi_gmem_w1_BREADY,
        m_axi_gmem_w1_BRESP,
        m_axi_gmem_w1_BID,
        m_axi_gmem_w1_BUSER,
        add_ln483_3,
        sext_ln474,
        zext_ln474_3,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_w1_AWVALID;
input   m_axi_gmem_w1_AWREADY;
output  [63:0] m_axi_gmem_w1_AWADDR;
output  [0:0] m_axi_gmem_w1_AWID;
output  [31:0] m_axi_gmem_w1_AWLEN;
output  [2:0] m_axi_gmem_w1_AWSIZE;
output  [1:0] m_axi_gmem_w1_AWBURST;
output  [1:0] m_axi_gmem_w1_AWLOCK;
output  [3:0] m_axi_gmem_w1_AWCACHE;
output  [2:0] m_axi_gmem_w1_AWPROT;
output  [3:0] m_axi_gmem_w1_AWQOS;
output  [3:0] m_axi_gmem_w1_AWREGION;
output  [0:0] m_axi_gmem_w1_AWUSER;
output   m_axi_gmem_w1_WVALID;
input   m_axi_gmem_w1_WREADY;
output  [31:0] m_axi_gmem_w1_WDATA;
output  [3:0] m_axi_gmem_w1_WSTRB;
output   m_axi_gmem_w1_WLAST;
output  [0:0] m_axi_gmem_w1_WID;
output  [0:0] m_axi_gmem_w1_WUSER;
output   m_axi_gmem_w1_ARVALID;
input   m_axi_gmem_w1_ARREADY;
output  [63:0] m_axi_gmem_w1_ARADDR;
output  [0:0] m_axi_gmem_w1_ARID;
output  [31:0] m_axi_gmem_w1_ARLEN;
output  [2:0] m_axi_gmem_w1_ARSIZE;
output  [1:0] m_axi_gmem_w1_ARBURST;
output  [1:0] m_axi_gmem_w1_ARLOCK;
output  [3:0] m_axi_gmem_w1_ARCACHE;
output  [2:0] m_axi_gmem_w1_ARPROT;
output  [3:0] m_axi_gmem_w1_ARQOS;
output  [3:0] m_axi_gmem_w1_ARREGION;
output  [0:0] m_axi_gmem_w1_ARUSER;
input   m_axi_gmem_w1_RVALID;
output   m_axi_gmem_w1_RREADY;
input  [31:0] m_axi_gmem_w1_RDATA;
input   m_axi_gmem_w1_RLAST;
input  [0:0] m_axi_gmem_w1_RID;
input  [8:0] m_axi_gmem_w1_RFIFONUM;
input  [0:0] m_axi_gmem_w1_RUSER;
input  [1:0] m_axi_gmem_w1_RRESP;
input   m_axi_gmem_w1_BVALID;
output   m_axi_gmem_w1_BREADY;
input  [1:0] m_axi_gmem_w1_BRESP;
input  [0:0] m_axi_gmem_w1_BID;
input  [0:0] m_axi_gmem_w1_BUSER;
input  [10:0] add_ln483_3;
input  [61:0] sext_ln474;
input  [12:0] zext_ln474_3;
output  [10:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_d0;
output  [10:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_d0;
output  [10:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_d0;

reg ap_idle;
reg m_axi_gmem_w1_ARVALID;
reg m_axi_gmem_w1_RREADY;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln478_fu_230_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_w1_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_w1_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln478_fu_257_p3;
wire   [3:0] select_ln478_1_fu_269_p3;
reg   [3:0] select_ln478_1_reg_465;
reg   [3:0] select_ln478_1_reg_465_pp0_iter1_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter2_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter3_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter4_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter5_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter6_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter7_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter8_reg;
reg   [3:0] select_ln478_1_reg_465_pp0_iter9_reg;
reg   [2:0] tmp_reg_470;
reg   [2:0] tmp_reg_470_pp0_iter1_reg;
reg   [2:0] tmp_reg_470_pp0_iter2_reg;
reg   [2:0] tmp_reg_470_pp0_iter3_reg;
reg   [2:0] tmp_reg_470_pp0_iter4_reg;
reg   [2:0] tmp_reg_470_pp0_iter5_reg;
reg   [2:0] tmp_reg_470_pp0_iter6_reg;
reg   [2:0] tmp_reg_470_pp0_iter7_reg;
reg   [2:0] tmp_reg_470_pp0_iter8_reg;
reg   [2:0] tmp_reg_470_pp0_iter9_reg;
reg   [63:0] gmem_w1_addr_reg_475;
wire   [1:0] trunc_ln481_fu_386_p1;
reg   [1:0] trunc_ln481_reg_481;
reg   [1:0] trunc_ln481_reg_481_pp0_iter8_reg;
reg   [1:0] trunc_ln481_reg_481_pp0_iter9_reg;
wire   [31:0] bitcast_ln483_fu_390_p1;
reg   [31:0] bitcast_ln483_reg_485;
wire   [63:0] zext_ln483_3_fu_423_p1;
wire  signed [63:0] sext_ln483_fu_355_p1;
reg   [3:0] kx_fu_102;
wire   [3:0] add_ln481_1_fu_365_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_kx_load;
reg   [3:0] ky_fu_106;
reg   [3:0] ap_sig_allocacmp_ky_1;
reg   [6:0] indvar_flatten_fu_110;
wire   [6:0] add_ln478_1_fu_236_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [6:0] shl_ln1_fu_216_p3;
wire   [6:0] zext_ln478_fu_212_p1;
wire   [0:0] icmp_ln481_fu_251_p2;
wire   [3:0] add_ln478_fu_245_p2;
wire   [6:0] shl_ln481_mid1_fu_277_p3;
wire   [6:0] zext_ln478_1_fu_265_p1;
wire   [6:0] add_ln481_2_fu_285_p2;
wire   [6:0] add_ln481_fu_224_p2;
wire   [6:0] select_ln478_2_fu_291_p3;
wire   [3:0] mul_ln481_fu_311_p0;
wire   [5:0] mul_ln481_fu_311_p1;
wire   [8:0] mul_ln481_fu_311_p2;
wire   [2:0] grp_fu_327_p1;
wire  signed [62:0] sext_ln474_cast_fu_187_p1;
wire   [62:0] zext_ln474_3_cast_fu_183_p1;
wire   [7:0] zext_ln478_2_fu_299_p1;
wire   [7:0] kx_cast3_fu_303_p1;
wire   [7:0] add_ln483_2_fu_339_p2;
wire   [62:0] zext_ln483_fu_345_p1;
wire   [62:0] add_ln483_fu_333_p2;
wire   [62:0] add_ln483_1_fu_349_p2;
wire   [1:0] grp_fu_327_p2;
wire   [10:0] zext_ln483_1_fu_394_p1;
wire   [10:0] add_ln483_4_fu_397_p2;
wire   [10:0] shl_ln483_fu_402_p2;
wire   [10:0] sub_ln483_fu_408_p2;
wire   [10:0] zext_ln483_2_fu_414_p1;
wire   [10:0] add_ln483_5_fu_417_p2;
reg    grp_fu_327_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] mul_ln481_fu_311_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U1(
    .din0(mul_ln481_fu_311_p0),
    .din1(mul_ln481_fu_311_p1),
    .dout(mul_ln481_fu_311_p2)
);

srcnn_urem_4ns_3ns_2_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_4ns_3ns_2_8_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln478_fu_257_p3),
    .din1(grp_fu_327_p1),
    .ce(grp_fu_327_ce),
    .dout(grp_fu_327_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln478_fu_230_p2 == 1'd0))) begin
            indvar_flatten_fu_110 <= add_ln478_1_fu_236_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_110 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln478_fu_230_p2 == 1'd0))) begin
            kx_fu_102 <= add_ln481_1_fu_365_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            kx_fu_102 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln478_fu_230_p2 == 1'd0))) begin
            ky_fu_106 <= select_ln478_1_fu_269_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ky_fu_106 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln478_1_reg_465_pp0_iter1_reg <= select_ln478_1_reg_465;
        tmp_reg_470_pp0_iter1_reg <= tmp_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        bitcast_ln483_reg_485 <= bitcast_ln483_fu_390_p1;
        select_ln478_1_reg_465_pp0_iter2_reg <= select_ln478_1_reg_465_pp0_iter1_reg;
        select_ln478_1_reg_465_pp0_iter3_reg <= select_ln478_1_reg_465_pp0_iter2_reg;
        select_ln478_1_reg_465_pp0_iter4_reg <= select_ln478_1_reg_465_pp0_iter3_reg;
        select_ln478_1_reg_465_pp0_iter5_reg <= select_ln478_1_reg_465_pp0_iter4_reg;
        select_ln478_1_reg_465_pp0_iter6_reg <= select_ln478_1_reg_465_pp0_iter5_reg;
        select_ln478_1_reg_465_pp0_iter7_reg <= select_ln478_1_reg_465_pp0_iter6_reg;
        select_ln478_1_reg_465_pp0_iter8_reg <= select_ln478_1_reg_465_pp0_iter7_reg;
        select_ln478_1_reg_465_pp0_iter9_reg <= select_ln478_1_reg_465_pp0_iter8_reg;
        tmp_reg_470_pp0_iter2_reg <= tmp_reg_470_pp0_iter1_reg;
        tmp_reg_470_pp0_iter3_reg <= tmp_reg_470_pp0_iter2_reg;
        tmp_reg_470_pp0_iter4_reg <= tmp_reg_470_pp0_iter3_reg;
        tmp_reg_470_pp0_iter5_reg <= tmp_reg_470_pp0_iter4_reg;
        tmp_reg_470_pp0_iter6_reg <= tmp_reg_470_pp0_iter5_reg;
        tmp_reg_470_pp0_iter7_reg <= tmp_reg_470_pp0_iter6_reg;
        tmp_reg_470_pp0_iter8_reg <= tmp_reg_470_pp0_iter7_reg;
        tmp_reg_470_pp0_iter9_reg <= tmp_reg_470_pp0_iter8_reg;
        trunc_ln481_reg_481 <= trunc_ln481_fu_386_p1;
        trunc_ln481_reg_481_pp0_iter8_reg <= trunc_ln481_reg_481;
        trunc_ln481_reg_481_pp0_iter9_reg <= trunc_ln481_reg_481_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln478_fu_230_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_w1_addr_reg_475 <= sext_ln483_fu_355_p1;
        select_ln478_1_reg_465 <= select_ln478_1_fu_269_p3;
        tmp_reg_470 <= {{mul_ln481_fu_311_p2[8:6]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln478_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_110;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_kx_load = 4'd0;
    end else begin
        ap_sig_allocacmp_kx_load = kx_fu_102;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ky_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_ky_1 = ky_fu_106;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_w1_blk_n_AR = m_axi_gmem_w1_ARREADY;
    end else begin
        gmem_w1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_w1_blk_n_R = m_axi_gmem_w1_RVALID;
    end else begin
        gmem_w1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_327_ce = 1'b1;
    end else begin
        grp_fu_327_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_w1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_w1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_w1_RREADY = 1'b1;
    end else begin
        m_axi_gmem_w1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln481_reg_481_pp0_iter9_reg == 2'd0) & ~(trunc_ln481_reg_481_pp0_iter9_reg == 2'd1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln481_reg_481_pp0_iter9_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln481_reg_481_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln478_1_fu_236_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln478_fu_245_p2 = (ap_sig_allocacmp_ky_1 + 4'd1);

assign add_ln481_1_fu_365_p2 = (select_ln478_fu_257_p3 + 4'd1);

assign add_ln481_2_fu_285_p2 = (shl_ln481_mid1_fu_277_p3 + zext_ln478_1_fu_265_p1);

assign add_ln481_fu_224_p2 = (shl_ln1_fu_216_p3 + zext_ln478_fu_212_p1);

assign add_ln483_1_fu_349_p2 = (zext_ln483_fu_345_p1 + add_ln483_fu_333_p2);

assign add_ln483_2_fu_339_p2 = (zext_ln478_2_fu_299_p1 + kx_cast3_fu_303_p1);

assign add_ln483_4_fu_397_p2 = (add_ln483_3 + zext_ln483_1_fu_394_p1);

assign add_ln483_5_fu_417_p2 = (sub_ln483_fu_408_p2 + zext_ln483_2_fu_414_p1);

assign add_ln483_fu_333_p2 = ($signed(sext_ln474_cast_fu_187_p1) + $signed(zext_ln474_3_cast_fu_183_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_w1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((m_axi_gmem_w1_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_w1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((m_axi_gmem_w1_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (m_axi_gmem_w1_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln483_fu_390_p1 = m_axi_gmem_w1_RDATA;

assign grp_fu_327_p1 = 4'd3;

assign icmp_ln478_fu_230_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd81) ? 1'b1 : 1'b0);

assign icmp_ln481_fu_251_p2 = ((ap_sig_allocacmp_kx_load == 4'd9) ? 1'b1 : 1'b0);

assign kx_cast3_fu_303_p1 = select_ln478_fu_257_p3;

assign m_axi_gmem_w1_ARADDR = gmem_w1_addr_reg_475;

assign m_axi_gmem_w1_ARBURST = 2'd0;

assign m_axi_gmem_w1_ARCACHE = 4'd0;

assign m_axi_gmem_w1_ARID = 1'd0;

assign m_axi_gmem_w1_ARLEN = 32'd1;

assign m_axi_gmem_w1_ARLOCK = 2'd0;

assign m_axi_gmem_w1_ARPROT = 3'd0;

assign m_axi_gmem_w1_ARQOS = 4'd0;

assign m_axi_gmem_w1_ARREGION = 4'd0;

assign m_axi_gmem_w1_ARSIZE = 3'd0;

assign m_axi_gmem_w1_ARUSER = 1'd0;

assign m_axi_gmem_w1_AWADDR = 64'd0;

assign m_axi_gmem_w1_AWBURST = 2'd0;

assign m_axi_gmem_w1_AWCACHE = 4'd0;

assign m_axi_gmem_w1_AWID = 1'd0;

assign m_axi_gmem_w1_AWLEN = 32'd0;

assign m_axi_gmem_w1_AWLOCK = 2'd0;

assign m_axi_gmem_w1_AWPROT = 3'd0;

assign m_axi_gmem_w1_AWQOS = 4'd0;

assign m_axi_gmem_w1_AWREGION = 4'd0;

assign m_axi_gmem_w1_AWSIZE = 3'd0;

assign m_axi_gmem_w1_AWUSER = 1'd0;

assign m_axi_gmem_w1_AWVALID = 1'b0;

assign m_axi_gmem_w1_BREADY = 1'b0;

assign m_axi_gmem_w1_WDATA = 32'd0;

assign m_axi_gmem_w1_WID = 1'd0;

assign m_axi_gmem_w1_WLAST = 1'b0;

assign m_axi_gmem_w1_WSTRB = 4'd0;

assign m_axi_gmem_w1_WUSER = 1'd0;

assign m_axi_gmem_w1_WVALID = 1'b0;

assign mul_ln481_fu_311_p0 = mul_ln481_fu_311_p00;

assign mul_ln481_fu_311_p00 = select_ln478_fu_257_p3;

assign mul_ln481_fu_311_p1 = 9'd22;

assign select_ln478_1_fu_269_p3 = ((icmp_ln481_fu_251_p2[0:0] == 1'b1) ? add_ln478_fu_245_p2 : ap_sig_allocacmp_ky_1);

assign select_ln478_2_fu_291_p3 = ((icmp_ln481_fu_251_p2[0:0] == 1'b1) ? add_ln481_2_fu_285_p2 : add_ln481_fu_224_p2);

assign select_ln478_fu_257_p3 = ((icmp_ln481_fu_251_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_kx_load);

assign sext_ln474_cast_fu_187_p1 = $signed(sext_ln474);

assign sext_ln483_fu_355_p1 = $signed(add_ln483_1_fu_349_p2);

assign shl_ln1_fu_216_p3 = {{ap_sig_allocacmp_ky_1}, {3'd0}};

assign shl_ln481_mid1_fu_277_p3 = {{add_ln478_fu_245_p2}, {3'd0}};

assign shl_ln483_fu_402_p2 = add_ln483_4_fu_397_p2 << 11'd2;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_address0 = zext_ln483_3_fu_423_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_40_d0 = bitcast_ln483_reg_485;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_address0 = zext_ln483_3_fu_423_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_41_d0 = bitcast_ln483_reg_485;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_address0 = zext_ln483_3_fu_423_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_42_d0 = bitcast_ln483_reg_485;

assign sub_ln483_fu_408_p2 = (shl_ln483_fu_402_p2 - add_ln483_4_fu_397_p2);

assign trunc_ln481_fu_386_p1 = grp_fu_327_p2[1:0];

assign zext_ln474_3_cast_fu_183_p1 = zext_ln474_3;

assign zext_ln478_1_fu_265_p1 = add_ln478_fu_245_p2;

assign zext_ln478_2_fu_299_p1 = select_ln478_2_fu_291_p3;

assign zext_ln478_fu_212_p1 = ap_sig_allocacmp_ky_1;

assign zext_ln483_1_fu_394_p1 = select_ln478_1_reg_465_pp0_iter9_reg;

assign zext_ln483_2_fu_414_p1 = tmp_reg_470_pp0_iter9_reg;

assign zext_ln483_3_fu_423_p1 = add_ln483_5_fu_417_p2;

assign zext_ln483_fu_345_p1 = add_ln483_2_fu_339_p2;

endmodule //srcnn_srcnn_Pipeline_CopyW1_ky_CopyW1_kx
