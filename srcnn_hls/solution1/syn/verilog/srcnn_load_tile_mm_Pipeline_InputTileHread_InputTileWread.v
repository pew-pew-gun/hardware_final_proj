// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_tile_mm_Pipeline_InputTileHread_InputTileWread (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY,
        m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY,
        m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID,
        m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP,
        m_axi_gmem_in_BID,
        m_axi_gmem_in_BUSER,
        add_ln67_2,
        sext_ln55,
        add_ln55,
        bound,
        add_ln50,
        select_ln67,
        w0_cast2,
        input_ftmap,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_d0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0,
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_in_AWVALID;
input   m_axi_gmem_in_AWREADY;
output  [63:0] m_axi_gmem_in_AWADDR;
output  [0:0] m_axi_gmem_in_AWID;
output  [31:0] m_axi_gmem_in_AWLEN;
output  [2:0] m_axi_gmem_in_AWSIZE;
output  [1:0] m_axi_gmem_in_AWBURST;
output  [1:0] m_axi_gmem_in_AWLOCK;
output  [3:0] m_axi_gmem_in_AWCACHE;
output  [2:0] m_axi_gmem_in_AWPROT;
output  [3:0] m_axi_gmem_in_AWQOS;
output  [3:0] m_axi_gmem_in_AWREGION;
output  [0:0] m_axi_gmem_in_AWUSER;
output   m_axi_gmem_in_WVALID;
input   m_axi_gmem_in_WREADY;
output  [31:0] m_axi_gmem_in_WDATA;
output  [3:0] m_axi_gmem_in_WSTRB;
output   m_axi_gmem_in_WLAST;
output  [0:0] m_axi_gmem_in_WID;
output  [0:0] m_axi_gmem_in_WUSER;
output   m_axi_gmem_in_ARVALID;
input   m_axi_gmem_in_ARREADY;
output  [63:0] m_axi_gmem_in_ARADDR;
output  [0:0] m_axi_gmem_in_ARID;
output  [31:0] m_axi_gmem_in_ARLEN;
output  [2:0] m_axi_gmem_in_ARSIZE;
output  [1:0] m_axi_gmem_in_ARBURST;
output  [1:0] m_axi_gmem_in_ARLOCK;
output  [3:0] m_axi_gmem_in_ARCACHE;
output  [2:0] m_axi_gmem_in_ARPROT;
output  [3:0] m_axi_gmem_in_ARQOS;
output  [3:0] m_axi_gmem_in_ARREGION;
output  [0:0] m_axi_gmem_in_ARUSER;
input   m_axi_gmem_in_RVALID;
output   m_axi_gmem_in_RREADY;
input  [31:0] m_axi_gmem_in_RDATA;
input   m_axi_gmem_in_RLAST;
input  [0:0] m_axi_gmem_in_RID;
input  [8:0] m_axi_gmem_in_RFIFONUM;
input  [0:0] m_axi_gmem_in_RUSER;
input  [1:0] m_axi_gmem_in_RRESP;
input   m_axi_gmem_in_BVALID;
output   m_axi_gmem_in_BREADY;
input  [1:0] m_axi_gmem_in_BRESP;
input  [0:0] m_axi_gmem_in_BID;
input  [0:0] m_axi_gmem_in_BUSER;
input  [8:0] add_ln67_2;
input  [9:0] sext_ln55;
input  [9:0] add_ln55;
input  [16:0] bound;
input  [8:0] add_ln50;
input  [2:0] select_ln67;
input  [7:0] w0_cast2;
input  [63:0] input_ftmap;
output  [9:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_d0;
output  [9:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_d0;
output  [9:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0;
output   srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0;
output  [31:0] srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_d0;

reg ap_idle;
reg m_axi_gmem_in_ARVALID;
reg m_axi_gmem_in_RREADY;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0;
reg srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_332_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_in_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_in_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] w0_cast2_cast_fu_243_p1;
reg   [8:0] w0_cast2_cast_reg_719;
wire  signed [10:0] sext_ln55_cast_fu_247_p1;
reg  signed [10:0] sext_ln55_cast_reg_724;
wire   [9:0] select_ln67_cast_cast_fu_255_p1;
reg   [9:0] select_ln67_cast_cast_reg_730;
wire   [8:0] select_ln50_fu_357_p3;
wire   [9:0] add_ln67_5_fu_488_p2;
reg   [9:0] add_ln67_5_reg_744;
reg   [9:0] add_ln67_5_reg_744_pp0_iter2_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter3_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter4_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter5_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter6_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter7_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter8_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter9_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter10_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter11_reg;
reg   [9:0] add_ln67_5_reg_744_pp0_iter12_reg;
reg   [63:0] gmem_in_addr_reg_749;
reg   [31:0] gmem_in_addr_read_reg_755;
reg   [31:0] gmem_in_addr_read_reg_755_pp0_iter11_reg;
reg   [31:0] gmem_in_addr_read_reg_755_pp0_iter12_reg;
wire   [63:0] zext_ln67_5_fu_661_p1;
wire  signed [63:0] sext_ln67_1_fu_630_p1;
reg   [8:0] px_fu_132;
wire   [8:0] add_ln60_fu_640_p2;
wire    ap_loop_init;
reg   [8:0] py_fu_136;
wire   [8:0] select_ln50_1_fu_365_p3;
reg   [16:0] indvar_flatten_fu_140;
wire   [16:0] add_ln50_1_fu_337_p2;
wire   [1:0] trunc_ln60_fu_667_p1;
wire   [31:0] bitcast_ln67_fu_671_p1;
wire  signed [4:0] select_ln67_cast_fu_251_p1;
wire   [10:0] zext_ln50_fu_280_p1;
wire   [9:0] zext_ln55_fu_284_p1;
wire   [10:0] add_ln55_1_fu_288_p2;
wire   [0:0] tmp_fu_298_p3;
wire   [9:0] add_ln56_fu_293_p2;
wire   [9:0] iy_fu_306_p3;
wire   [0:0] icmp_ln57_fu_318_p2;
wire   [7:0] trunc_ln55_fu_314_p1;
wire   [0:0] icmp_ln60_fu_352_p2;
wire   [8:0] add_ln50_2_fu_346_p2;
wire   [9:0] zext_ln67_3_fu_373_p1;
wire   [9:0] add_ln67_3_fu_377_p2;
wire   [9:0] shl_ln67_fu_382_p2;
wire   [9:0] shl_ln67_3_fu_388_p2;
wire   [10:0] zext_ln50_1_fu_400_p1;
wire   [9:0] zext_ln55_1_fu_404_p1;
wire   [10:0] add_ln55_2_fu_408_p2;
wire   [0:0] tmp_4_fu_418_p3;
wire   [9:0] add_ln56_1_fu_413_p2;
wire   [9:0] select_ln56_fu_426_p3;
wire   [0:0] icmp_ln57_1_fu_438_p2;
wire   [7:0] trunc_ln55_1_fu_434_p1;
wire   [7:0] select_ln57_fu_444_p3;
wire   [7:0] iy_1_fu_324_p3;
wire   [8:0] mul_ln60_fu_468_p0;
wire   [10:0] mul_ln60_fu_468_p1;
wire   [18:0] mul_ln60_fu_468_p2;
wire   [7:0] tmp_5_fu_474_p4;
wire   [9:0] add_ln67_4_fu_394_p2;
wire   [9:0] zext_ln67_4_fu_484_p1;
wire   [2:0] grp_fu_494_p1;
wire  signed [8:0] add_ln64_fu_500_p2;
wire  signed [10:0] sext_ln64_fu_505_p1;
wire   [10:0] zext_ln60_fu_460_p1;
wire  signed [9:0] sext_ln64_1_fu_513_p1;
wire   [9:0] zext_ln64_fu_509_p1;
wire   [10:0] add_ln64_1_fu_517_p2;
wire   [0:0] tmp_6_fu_529_p3;
wire   [9:0] add_ln65_fu_523_p2;
wire   [9:0] ix_fu_537_p3;
wire   [7:0] select_ln50_2_fu_452_p3;
wire   [17:0] shl_ln_fu_551_p3;
wire   [9:0] shl_ln67_1_fu_563_p3;
wire   [18:0] zext_ln67_fu_559_p1;
wire   [18:0] zext_ln67_1_fu_571_p1;
wire   [0:0] icmp_ln66_fu_545_p2;
wire   [7:0] trunc_ln67_fu_581_p1;
wire   [7:0] select_ln66_fu_585_p3;
wire   [9:0] shl_ln67_2_fu_593_p3;
wire   [18:0] sub_ln67_fu_575_p2;
wire   [18:0] zext_ln67_2_fu_601_p1;
wire   [18:0] add_ln67_fu_605_p2;
wire  signed [63:0] sext_ln67_fu_611_p1;
wire   [63:0] add_ln67_1_fu_615_p2;
wire   [61:0] trunc_ln9_fu_620_p4;
wire   [1:0] grp_fu_494_p2;
reg    grp_fu_494_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [18:0] mul_ln60_fu_468_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

srcnn_mul_9ns_11ns_19_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
mul_9ns_11ns_19_1_1_U229(
    .din0(mul_ln60_fu_468_p0),
    .din1(mul_ln60_fu_468_p1),
    .dout(mul_ln60_fu_468_p2)
);

srcnn_urem_9ns_3ns_2_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_9ns_3ns_2_13_1_U230(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln50_fu_357_p3),
    .din1(grp_fu_494_p1),
    .ce(grp_fu_494_ce),
    .dout(grp_fu_494_p2)
);

srcnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_140 <= 17'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln50_fu_332_p2 == 1'd0))) begin
            indvar_flatten_fu_140 <= add_ln50_1_fu_337_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            px_fu_132 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln50_fu_332_p2 == 1'd0))) begin
            px_fu_132 <= add_ln60_fu_640_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            py_fu_136 <= 9'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln50_fu_332_p2 == 1'd0))) begin
            py_fu_136 <= select_ln50_1_fu_365_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln50_fu_332_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln67_5_reg_744 <= add_ln67_5_fu_488_p2;
        gmem_in_addr_reg_749 <= sext_ln67_1_fu_630_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln67_5_reg_744_pp0_iter10_reg <= add_ln67_5_reg_744_pp0_iter9_reg;
        add_ln67_5_reg_744_pp0_iter11_reg <= add_ln67_5_reg_744_pp0_iter10_reg;
        add_ln67_5_reg_744_pp0_iter12_reg <= add_ln67_5_reg_744_pp0_iter11_reg;
        add_ln67_5_reg_744_pp0_iter2_reg <= add_ln67_5_reg_744;
        add_ln67_5_reg_744_pp0_iter3_reg <= add_ln67_5_reg_744_pp0_iter2_reg;
        add_ln67_5_reg_744_pp0_iter4_reg <= add_ln67_5_reg_744_pp0_iter3_reg;
        add_ln67_5_reg_744_pp0_iter5_reg <= add_ln67_5_reg_744_pp0_iter4_reg;
        add_ln67_5_reg_744_pp0_iter6_reg <= add_ln67_5_reg_744_pp0_iter5_reg;
        add_ln67_5_reg_744_pp0_iter7_reg <= add_ln67_5_reg_744_pp0_iter6_reg;
        add_ln67_5_reg_744_pp0_iter8_reg <= add_ln67_5_reg_744_pp0_iter7_reg;
        add_ln67_5_reg_744_pp0_iter9_reg <= add_ln67_5_reg_744_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_in_addr_read_reg_755 <= m_axi_gmem_in_RDATA;
        gmem_in_addr_read_reg_755_pp0_iter11_reg <= gmem_in_addr_read_reg_755;
        gmem_in_addr_read_reg_755_pp0_iter12_reg <= gmem_in_addr_read_reg_755_pp0_iter11_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        select_ln67_cast_cast_reg_730[4 : 0] <= select_ln67_cast_cast_fu_255_p1[4 : 0];
        sext_ln55_cast_reg_724 <= sext_ln55_cast_fu_247_p1;
        w0_cast2_cast_reg_719[7 : 0] <= w0_cast2_cast_fu_243_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln50_fu_332_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_in_blk_n_AR = m_axi_gmem_in_ARREADY;
    end else begin
        gmem_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_in_blk_n_R = m_axi_gmem_in_RVALID;
    end else begin
        gmem_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_494_ce = 1'b1;
    end else begin
        grp_fu_494_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_in_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_in_RREADY = 1'b1;
    end else begin
        m_axi_gmem_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln60_fu_667_p1 == 2'd0) & ~(trunc_ln60_fu_667_p1 == 2'd1) & (ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (trunc_ln60_fu_667_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (trunc_ln60_fu_667_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0 = 1'b1;
    end else begin
        srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_1_fu_337_p2 = (indvar_flatten_fu_140 + 17'd1);

assign add_ln50_2_fu_346_p2 = (py_fu_136 + 9'd1);

assign add_ln55_1_fu_288_p2 = ($signed(sext_ln55_cast_reg_724) + $signed(zext_ln50_fu_280_p1));

assign add_ln55_2_fu_408_p2 = ($signed(sext_ln55_cast_reg_724) + $signed(zext_ln50_1_fu_400_p1));

assign add_ln56_1_fu_413_p2 = (add_ln55 + zext_ln55_1_fu_404_p1);

assign add_ln56_fu_293_p2 = (add_ln55 + zext_ln55_fu_284_p1);

assign add_ln60_fu_640_p2 = (select_ln50_fu_357_p3 + 9'd1);

assign add_ln64_1_fu_517_p2 = ($signed(sext_ln64_fu_505_p1) + $signed(zext_ln60_fu_460_p1));

assign add_ln64_fu_500_p2 = ($signed(w0_cast2_cast_reg_719) + $signed(9'd506));

assign add_ln65_fu_523_p2 = ($signed(sext_ln64_1_fu_513_p1) + $signed(zext_ln64_fu_509_p1));

assign add_ln67_1_fu_615_p2 = ($signed(sext_ln67_fu_611_p1) + $signed(input_ftmap));

assign add_ln67_3_fu_377_p2 = (select_ln67_cast_cast_reg_730 + zext_ln67_3_fu_373_p1);

assign add_ln67_4_fu_394_p2 = (shl_ln67_fu_382_p2 + shl_ln67_3_fu_388_p2);

assign add_ln67_5_fu_488_p2 = (add_ln67_4_fu_394_p2 + zext_ln67_4_fu_484_p1);

assign add_ln67_fu_605_p2 = (sub_ln67_fu_575_p2 + zext_ln67_2_fu_601_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter10 == 1'b1) & (m_axi_gmem_in_RVALID == 1'b0)) | ((m_axi_gmem_in_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter10 == 1'b1) & (m_axi_gmem_in_RVALID == 1'b0)) | ((m_axi_gmem_in_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = (m_axi_gmem_in_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln67_fu_671_p1 = gmem_in_addr_read_reg_755_pp0_iter12_reg;

assign grp_fu_494_p1 = 9'd3;

assign icmp_ln50_fu_332_p2 = ((indvar_flatten_fu_140 == bound) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_438_p2 = ((select_ln56_fu_426_p3 > 10'd254) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_318_p2 = ((iy_fu_306_p3 > 10'd254) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_352_p2 = ((px_fu_132 == add_ln50) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_545_p2 = ((ix_fu_537_p3 > 10'd254) ? 1'b1 : 1'b0);

assign ix_fu_537_p3 = ((tmp_6_fu_529_p3[0:0] == 1'b1) ? 10'd0 : add_ln65_fu_523_p2);

assign iy_1_fu_324_p3 = ((icmp_ln57_fu_318_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln55_fu_314_p1);

assign iy_fu_306_p3 = ((tmp_fu_298_p3[0:0] == 1'b1) ? 10'd0 : add_ln56_fu_293_p2);

assign m_axi_gmem_in_ARADDR = gmem_in_addr_reg_749;

assign m_axi_gmem_in_ARBURST = 2'd0;

assign m_axi_gmem_in_ARCACHE = 4'd0;

assign m_axi_gmem_in_ARID = 1'd0;

assign m_axi_gmem_in_ARLEN = 32'd1;

assign m_axi_gmem_in_ARLOCK = 2'd0;

assign m_axi_gmem_in_ARPROT = 3'd0;

assign m_axi_gmem_in_ARQOS = 4'd0;

assign m_axi_gmem_in_ARREGION = 4'd0;

assign m_axi_gmem_in_ARSIZE = 3'd0;

assign m_axi_gmem_in_ARUSER = 1'd0;

assign m_axi_gmem_in_AWADDR = 64'd0;

assign m_axi_gmem_in_AWBURST = 2'd0;

assign m_axi_gmem_in_AWCACHE = 4'd0;

assign m_axi_gmem_in_AWID = 1'd0;

assign m_axi_gmem_in_AWLEN = 32'd0;

assign m_axi_gmem_in_AWLOCK = 2'd0;

assign m_axi_gmem_in_AWPROT = 3'd0;

assign m_axi_gmem_in_AWQOS = 4'd0;

assign m_axi_gmem_in_AWREGION = 4'd0;

assign m_axi_gmem_in_AWSIZE = 3'd0;

assign m_axi_gmem_in_AWUSER = 1'd0;

assign m_axi_gmem_in_AWVALID = 1'b0;

assign m_axi_gmem_in_BREADY = 1'b0;

assign m_axi_gmem_in_WDATA = 32'd0;

assign m_axi_gmem_in_WID = 1'd0;

assign m_axi_gmem_in_WLAST = 1'b0;

assign m_axi_gmem_in_WSTRB = 4'd0;

assign m_axi_gmem_in_WUSER = 1'd0;

assign m_axi_gmem_in_WVALID = 1'b0;

assign mul_ln60_fu_468_p0 = mul_ln60_fu_468_p00;

assign mul_ln60_fu_468_p00 = select_ln50_fu_357_p3;

assign mul_ln60_fu_468_p1 = 19'd683;

assign select_ln50_1_fu_365_p3 = ((icmp_ln60_fu_352_p2[0:0] == 1'b1) ? add_ln50_2_fu_346_p2 : py_fu_136);

assign select_ln50_2_fu_452_p3 = ((icmp_ln60_fu_352_p2[0:0] == 1'b1) ? select_ln57_fu_444_p3 : iy_1_fu_324_p3);

assign select_ln50_fu_357_p3 = ((icmp_ln60_fu_352_p2[0:0] == 1'b1) ? 9'd0 : px_fu_132);

assign select_ln56_fu_426_p3 = ((tmp_4_fu_418_p3[0:0] == 1'b1) ? 10'd0 : add_ln56_1_fu_413_p2);

assign select_ln57_fu_444_p3 = ((icmp_ln57_1_fu_438_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln55_1_fu_434_p1);

assign select_ln66_fu_585_p3 = ((icmp_ln66_fu_545_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln67_fu_581_p1);

assign select_ln67_cast_cast_fu_255_p1 = $unsigned(select_ln67_cast_fu_251_p1);

assign select_ln67_cast_fu_251_p1 = $signed(select_ln67);

assign sext_ln55_cast_fu_247_p1 = $signed(sext_ln55);

assign sext_ln64_1_fu_513_p1 = add_ln64_fu_500_p2;

assign sext_ln64_fu_505_p1 = add_ln64_fu_500_p2;

assign sext_ln67_1_fu_630_p1 = $signed(trunc_ln9_fu_620_p4);

assign sext_ln67_fu_611_p1 = $signed(add_ln67_fu_605_p2);

assign shl_ln67_1_fu_563_p3 = {{select_ln50_2_fu_452_p3}, {2'd0}};

assign shl_ln67_2_fu_593_p3 = {{select_ln66_fu_585_p3}, {2'd0}};

assign shl_ln67_3_fu_388_p2 = add_ln67_3_fu_377_p2 << 10'd1;

assign shl_ln67_fu_382_p2 = add_ln67_3_fu_377_p2 << 10'd3;

assign shl_ln_fu_551_p3 = {{select_ln50_2_fu_452_p3}, {10'd0}};

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0 = zext_ln67_5_fu_661_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_d0 = bitcast_ln67_fu_671_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0 = zext_ln67_5_fu_661_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_d0 = bitcast_ln67_fu_671_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0 = zext_ln67_5_fu_661_p1;

assign srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_d0 = bitcast_ln67_fu_671_p1;

assign sub_ln67_fu_575_p2 = (zext_ln67_fu_559_p1 - zext_ln67_1_fu_571_p1);

assign tmp_4_fu_418_p3 = add_ln55_2_fu_408_p2[32'd10];

assign tmp_5_fu_474_p4 = {{mul_ln60_fu_468_p2[18:11]}};

assign tmp_6_fu_529_p3 = add_ln64_1_fu_517_p2[32'd10];

assign tmp_fu_298_p3 = add_ln55_1_fu_288_p2[32'd10];

assign trunc_ln55_1_fu_434_p1 = select_ln56_fu_426_p3[7:0];

assign trunc_ln55_fu_314_p1 = iy_fu_306_p3[7:0];

assign trunc_ln60_fu_667_p1 = grp_fu_494_p2[1:0];

assign trunc_ln67_fu_581_p1 = ix_fu_537_p3[7:0];

assign trunc_ln9_fu_620_p4 = {{add_ln67_1_fu_615_p2[63:2]}};

assign w0_cast2_cast_fu_243_p1 = w0_cast2;

assign zext_ln50_1_fu_400_p1 = add_ln50_2_fu_346_p2;

assign zext_ln50_fu_280_p1 = py_fu_136;

assign zext_ln55_1_fu_404_p1 = add_ln50_2_fu_346_p2;

assign zext_ln55_fu_284_p1 = py_fu_136;

assign zext_ln60_fu_460_p1 = select_ln50_fu_357_p3;

assign zext_ln64_fu_509_p1 = select_ln50_fu_357_p3;

assign zext_ln67_1_fu_571_p1 = shl_ln67_1_fu_563_p3;

assign zext_ln67_2_fu_601_p1 = shl_ln67_2_fu_593_p3;

assign zext_ln67_3_fu_373_p1 = select_ln50_1_fu_365_p3;

assign zext_ln67_4_fu_484_p1 = tmp_5_fu_474_p4;

assign zext_ln67_5_fu_661_p1 = add_ln67_5_reg_744_pp0_iter12_reg;

assign zext_ln67_fu_559_p1 = shl_ln_fu_551_p3;

always @ (posedge ap_clk) begin
    w0_cast2_cast_reg_719[8] <= 1'b0;
    select_ln67_cast_cast_reg_730[9:5] <= 5'b00000;
end

endmodule //srcnn_load_tile_mm_Pipeline_InputTileHread_InputTileWread
