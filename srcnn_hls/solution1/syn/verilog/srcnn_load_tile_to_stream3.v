// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_tile_to_stream3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY,
        m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY,
        m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID,
        m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP,
        m_axi_gmem_in_BID,
        m_axi_gmem_in_BUSER,
        input_ftmap,
        h0,
        w0,
        p_read,
        s_pix_i_din,
        s_pix_i_num_data_valid,
        s_pix_i_fifo_cap,
        s_pix_i_full_n,
        s_pix_i_write,
        tw_eff_loc_i_c2_din,
        tw_eff_loc_i_c2_num_data_valid,
        tw_eff_loc_i_c2_fifo_cap,
        tw_eff_loc_i_c2_full_n,
        tw_eff_loc_i_c2_write,
        w0_c_din,
        w0_c_num_data_valid,
        w0_c_fifo_cap,
        w0_c_full_n,
        w0_c_write,
        h0_c5_din,
        h0_c5_num_data_valid,
        h0_c5_fifo_cap,
        h0_c5_full_n,
        h0_c5_write
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_in_AWVALID;
input   m_axi_gmem_in_AWREADY;
output  [63:0] m_axi_gmem_in_AWADDR;
output  [0:0] m_axi_gmem_in_AWID;
output  [31:0] m_axi_gmem_in_AWLEN;
output  [2:0] m_axi_gmem_in_AWSIZE;
output  [1:0] m_axi_gmem_in_AWBURST;
output  [1:0] m_axi_gmem_in_AWLOCK;
output  [3:0] m_axi_gmem_in_AWCACHE;
output  [2:0] m_axi_gmem_in_AWPROT;
output  [3:0] m_axi_gmem_in_AWQOS;
output  [3:0] m_axi_gmem_in_AWREGION;
output  [0:0] m_axi_gmem_in_AWUSER;
output   m_axi_gmem_in_WVALID;
input   m_axi_gmem_in_WREADY;
output  [31:0] m_axi_gmem_in_WDATA;
output  [3:0] m_axi_gmem_in_WSTRB;
output   m_axi_gmem_in_WLAST;
output  [0:0] m_axi_gmem_in_WID;
output  [0:0] m_axi_gmem_in_WUSER;
output   m_axi_gmem_in_ARVALID;
input   m_axi_gmem_in_ARREADY;
output  [63:0] m_axi_gmem_in_ARADDR;
output  [0:0] m_axi_gmem_in_ARID;
output  [31:0] m_axi_gmem_in_ARLEN;
output  [2:0] m_axi_gmem_in_ARSIZE;
output  [1:0] m_axi_gmem_in_ARBURST;
output  [1:0] m_axi_gmem_in_ARLOCK;
output  [3:0] m_axi_gmem_in_ARCACHE;
output  [2:0] m_axi_gmem_in_ARPROT;
output  [3:0] m_axi_gmem_in_ARQOS;
output  [3:0] m_axi_gmem_in_ARREGION;
output  [0:0] m_axi_gmem_in_ARUSER;
input   m_axi_gmem_in_RVALID;
output   m_axi_gmem_in_RREADY;
input  [31:0] m_axi_gmem_in_RDATA;
input   m_axi_gmem_in_RLAST;
input  [0:0] m_axi_gmem_in_RID;
input  [8:0] m_axi_gmem_in_RFIFONUM;
input  [0:0] m_axi_gmem_in_RUSER;
input  [1:0] m_axi_gmem_in_RRESP;
input   m_axi_gmem_in_BVALID;
output   m_axi_gmem_in_BREADY;
input  [1:0] m_axi_gmem_in_BRESP;
input  [0:0] m_axi_gmem_in_BID;
input  [0:0] m_axi_gmem_in_BUSER;
input  [63:0] input_ftmap;
input  [8:0] h0;
input  [7:0] w0;
input  [7:0] p_read;
output  [15:0] s_pix_i_din;
input  [10:0] s_pix_i_num_data_valid;
input  [10:0] s_pix_i_fifo_cap;
input   s_pix_i_full_n;
output   s_pix_i_write;
output  [7:0] tw_eff_loc_i_c2_din;
input  [1:0] tw_eff_loc_i_c2_num_data_valid;
input  [1:0] tw_eff_loc_i_c2_fifo_cap;
input   tw_eff_loc_i_c2_full_n;
output   tw_eff_loc_i_c2_write;
output  [7:0] w0_c_din;
input  [2:0] w0_c_num_data_valid;
input  [2:0] w0_c_fifo_cap;
input   w0_c_full_n;
output   w0_c_write;
output  [8:0] h0_c5_din;
input  [1:0] h0_c5_num_data_valid;
input  [1:0] h0_c5_fifo_cap;
input   h0_c5_full_n;
output   h0_c5_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_in_ARVALID;
reg m_axi_gmem_in_RREADY;
reg s_pix_i_write;
reg tw_eff_loc_i_c2_write;
reg w0_c_write;
reg h0_c5_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_in_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_in_blk_n_R;
wire    ap_CS_fsm_state12;
reg    s_pix_i_blk_n;
wire    ap_CS_fsm_state15;
reg    tw_eff_loc_i_c2_blk_n;
reg    w0_c_blk_n;
reg    h0_c5_blk_n;
reg    ap_block_state1;
wire   [8:0] add_ln76_fu_313_p2;
reg   [8:0] add_ln76_reg_1286;
wire  signed [9:0] add_ln77_fu_319_p2;
reg  signed [9:0] add_ln77_reg_1291;
wire  signed [10:0] sext_ln77_fu_325_p1;
reg  signed [10:0] sext_ln77_reg_1296;
wire  signed [10:0] sext_ln76_fu_335_p1;
reg  signed [10:0] sext_ln76_reg_1301;
wire   [8:0] add_ln76_1_fu_343_p2;
reg   [8:0] add_ln76_1_reg_1306;
wire  signed [9:0] sext_ln83_fu_349_p1;
reg  signed [9:0] sext_ln83_reg_1311;
wire   [8:0] py_2_fu_370_p2;
reg   [8:0] py_2_reg_1319;
wire    ap_CS_fsm_state2;
wire  signed [19:0] sext_ln82_fu_454_p1;
reg  signed [19:0] sext_ln82_reg_1324;
wire   [0:0] icmp_ln76_fu_365_p2;
wire   [8:0] px_1_fu_467_p2;
reg   [8:0] px_1_reg_1332;
wire    ap_CS_fsm_state3;
reg   [63:0] gmem_in_addr_reg_1337;
wire   [0:0] icmp_ln82_fu_462_p2;
reg   [31:0] gmem_in_addr_read_reg_1343;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_75_fu_583_p3;
reg   [0:0] tmp_75_reg_1354;
wire    ap_CS_fsm_state14;
wire   [53:0] select_ln86_fu_627_p3;
reg   [53:0] select_ln86_reg_1362;
wire   [0:0] icmp_ln86_fu_635_p2;
reg   [0:0] icmp_ln86_reg_1367;
wire   [0:0] icmp_ln86_1_fu_651_p2;
reg   [0:0] icmp_ln86_1_reg_1372;
wire  signed [11:0] select_ln86_1_fu_669_p3;
reg  signed [11:0] select_ln86_1_reg_1377;
wire   [0:0] icmp_ln86_2_fu_677_p2;
reg   [0:0] icmp_ln86_2_reg_1384;
wire   [15:0] trunc_ln86_4_fu_683_p1;
reg   [15:0] trunc_ln86_4_reg_1390;
wire   [0:0] icmp_ln86_4_fu_687_p2;
reg   [0:0] icmp_ln86_4_reg_1396;
wire   [0:0] icmp_ln86_5_fu_703_p2;
reg   [0:0] icmp_ln86_5_reg_1401;
wire   [0:0] bit_select59_i_i_fu_719_p3;
reg   [0:0] bit_select59_i_i_reg_1406;
wire   [0:0] icmp_ln86_6_fu_737_p2;
reg   [0:0] icmp_ln86_6_reg_1411;
wire   [0:0] icmp_ln86_8_fu_789_p2;
reg   [0:0] icmp_ln86_8_reg_1416;
wire   [0:0] icmp_ln86_9_fu_795_p2;
reg   [0:0] icmp_ln86_9_reg_1421;
wire   [0:0] icmp_ln86_10_fu_817_p2;
reg   [0:0] icmp_ln86_10_reg_1426;
wire   [0:0] select_ln86_13_fu_971_p3;
reg   [0:0] select_ln86_13_reg_1432;
wire   [0:0] select_ln86_14_fu_979_p3;
reg   [0:0] select_ln86_14_reg_1438;
reg   [8:0] px_reg_255;
wire  signed [63:0] sext_ln86_fu_557_p1;
reg   [8:0] py_fu_184;
wire   [31:0] grp_fu_266_p0;
wire   [8:0] add_ln616_fu_269_p2;
wire   [7:0] trunc_ln615_fu_283_p1;
wire   [0:0] tmp_fu_275_p3;
wire   [7:0] xor_ln616_fu_287_p2;
wire   [7:0] th_eff_fu_293_p3;
wire   [8:0] th_eff_cast_fu_309_p1;
wire   [9:0] h0_cast4_i_fu_305_p1;
wire   [8:0] w0_cast_fu_301_p1;
wire  signed [8:0] add_ln83_fu_329_p2;
wire   [8:0] p_read_cast_fu_339_p1;
wire   [10:0] zext_ln76_fu_361_p1;
wire   [9:0] zext_ln77_fu_376_p1;
wire   [10:0] iy_fu_380_p2;
wire   [0:0] tmp_73_fu_390_p3;
wire   [9:0] add_ln77_2_fu_385_p2;
wire   [9:0] iy_1_fu_398_p3;
wire   [0:0] icmp_ln79_fu_410_p2;
wire   [7:0] trunc_ln77_fu_406_p1;
wire   [7:0] iy_2_fu_416_p3;
wire   [17:0] shl_ln_fu_424_p3;
wire   [9:0] shl_ln86_1_fu_436_p3;
wire   [18:0] zext_ln86_fu_432_p1;
wire   [18:0] zext_ln86_1_fu_444_p1;
wire   [18:0] sub_ln86_fu_448_p2;
wire   [10:0] zext_ln82_fu_458_p1;
wire   [9:0] zext_ln83_fu_473_p1;
wire   [10:0] ix_fu_477_p2;
wire   [0:0] tmp_74_fu_487_p3;
wire   [9:0] add_ln83_2_fu_482_p2;
wire   [9:0] ix_1_fu_495_p3;
wire   [0:0] icmp_ln85_fu_503_p2;
wire   [7:0] trunc_ln86_fu_509_p1;
wire   [7:0] select_ln85_fu_513_p3;
wire   [9:0] shl_ln86_2_fu_521_p3;
wire   [19:0] zext_ln86_2_fu_529_p1;
wire   [19:0] add_ln86_fu_533_p2;
wire  signed [63:0] sext_ln86_3_fu_538_p1;
wire   [63:0] add_ln86_1_fu_542_p2;
wire   [61:0] trunc_ln_fu_547_p4;
wire   [63:0] grp_fu_266_p1;
wire   [63:0] bitcast_ln724_fu_575_p1;
wire   [10:0] tmp_i_fu_591_p4;
wire   [51:0] trunc_ln86_2_fu_605_p1;
wire   [52:0] zext_ln86_4_cast_fu_609_p3;
wire   [53:0] zext_ln86_4_fu_617_p1;
wire   [53:0] sub_ln86_1_fu_621_p2;
wire   [62:0] trunc_ln86_1_fu_579_p1;
wire   [11:0] zext_ln86_3_fu_601_p1;
wire   [11:0] sub_ln86_2_fu_641_p2;
wire   [11:0] add_ln86_2_fu_657_p2;
wire   [11:0] sub_ln86_3_fu_663_p2;
wire   [7:0] tmp_77_fu_693_p4;
wire   [10:0] trunc_ln86_3_fu_647_p1;
wire   [10:0] add_ln86_3_fu_709_p2;
wire   [31:0] zext_ln86_6_fu_715_p1;
wire   [7:0] tmp_78_fu_727_p4;
wire   [11:0] add_ln86_4_fu_747_p2;
wire   [5:0] trunc_ln86_8_fu_743_p1;
wire   [0:0] icmp_ln86_7_fu_753_p2;
wire   [5:0] sub_ln86_4_fu_759_p2;
wire   [5:0] select_ln86_18_fu_765_p3;
wire   [53:0] zext_ln86_8_fu_773_p1;
wire   [53:0] lshr_ln86_2_fu_777_p2;
wire   [53:0] and_ln86_16_fu_783_p2;
wire  signed [11:0] add_ln86_6_fu_801_p2;
wire   [0:0] tmp_82_fu_823_p3;
wire  signed [31:0] sext_ln86_4_fu_807_p1;
wire   [0:0] icmp_ln86_11_fu_837_p2;
wire   [0:0] tobool_i_i_fu_843_p3;
wire   [11:0] add_ln86_7_fu_811_p2;
wire   [5:0] add_ln86_8_fu_869_p2;
wire   [53:0] zext_ln86_10_fu_875_p1;
wire   [53:0] lshr_ln86_fu_879_p2;
wire   [53:0] lshr_ln86_1_fu_885_p2;
wire   [0:0] tmp_83_fu_897_p3;
wire   [0:0] icmp_ln86_13_fu_863_p2;
wire   [0:0] icmp_ln86_14_fu_891_p2;
wire   [0:0] xor_ln86_8_fu_905_p2;
wire   [0:0] icmp_ln86_12_fu_857_p2;
wire   [0:0] xor_ln86_7_fu_831_p2;
wire   [0:0] select_ln86_12_fu_911_p3;
wire   [0:0] and_ln86_10_fu_851_p2;
wire   [0:0] icmp_ln86_15_fu_937_p2;
wire   [0:0] xor_ln86_fu_931_p2;
wire   [0:0] icmp_ln86_16_fu_949_p2;
wire   [0:0] and_ln86_2_fu_919_p2;
wire   [0:0] and_ln86_3_fu_925_p2;
wire   [0:0] select_ln86_4_fu_955_p3;
wire   [0:0] and_ln86_4_fu_943_p2;
wire   [0:0] select_ln86_5_fu_963_p3;
wire   [0:0] tmp_76_fu_995_p3;
wire  signed [31:0] sext_ln86_6_fu_1010_p1;
wire   [53:0] zext_ln86_5_fu_1013_p1;
wire   [53:0] ashr_ln86_fu_1017_p2;
wire   [0:0] icmp_ln86_3_fu_990_p2;
wire   [15:0] trunc_ln86_5_fu_1022_p1;
wire   [15:0] select_ln86_3_fu_1002_p3;
wire   [15:0] select_ln86_2_fu_1026_p3;
wire  signed [30:0] sext_ln86_1_fu_987_p1;
wire   [15:0] sext_ln86_1cast_fu_1038_p1;
wire   [0:0] trunc_ln86_6_fu_1034_p1;
wire   [0:0] and_ln86_1_fu_1052_p2;
wire   [0:0] or_ln86_fu_1064_p2;
wire   [0:0] select_ln86_8_fu_1047_p3;
wire   [0:0] and_ln86_fu_1070_p2;
wire   [15:0] zext_ln86_9_fu_1076_p1;
wire   [15:0] add_ln86_5_fu_1080_p2;
wire   [0:0] tmp_80_fu_1086_p3;
wire   [0:0] xor_ln86_1_fu_1106_p2;
wire   [0:0] and_ln86_6_fu_1111_p2;
wire   [15:0] select_ln86_9_fu_1100_p3;
wire   [0:0] and_ln86_7_fu_1124_p2;
wire   [15:0] shl_ln86_fu_1042_p2;
wire   [15:0] select_ln86_10_fu_1116_p3;
wire   [0:0] tmp_79_fu_1056_p3;
wire   [0:0] xor_ln86_6_fu_1094_p2;
wire   [0:0] and_ln86_8_fu_1136_p2;
wire   [15:0] select_ln86_11_fu_1128_p3;
wire   [0:0] and_ln86_9_fu_1142_p2;
wire   [0:0] and_ln86_5_fu_1162_p2;
wire   [0:0] tmp_81_fu_1148_p3;
wire   [0:0] xor_ln86_3_fu_1173_p2;
wire   [0:0] and_ln86_11_fu_1178_p2;
wire   [0:0] and_ln86_13_fu_1189_p2;
wire   [0:0] select_ln86_6_fu_1156_p3;
wire   [0:0] and_ln86_14_fu_1193_p2;
wire   [0:0] xor_ln86_2_fu_1167_p2;
wire   [0:0] and_ln86_12_fu_1184_p2;
wire   [0:0] xor_ln86_4_fu_1207_p2;
wire   [0:0] and_ln86_15_fu_1213_p2;
wire   [0:0] select_ln86_15_fu_1199_p3;
wire   [0:0] or_ln86_2_fu_1227_p2;
wire   [0:0] or_ln86_3_fu_1233_p2;
wire   [0:0] select_ln86_16_fu_1219_p3;
wire   [0:0] xor_ln86_5_fu_1238_p2;
wire   [0:0] or_ln86_1_fu_1244_p2;
wire   [15:0] select_ln86_19_fu_1250_p3;
wire   [15:0] select_ln86_7_fu_1258_p3;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 15'd1;
end

srcnn_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_266_p0),
    .ce(1'b1),
    .dout(grp_fu_266_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln76_fu_365_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (s_pix_i_full_n == 1'b1))) begin
        px_reg_255 <= px_1_reg_1332;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln76_fu_365_p2 == 1'd0))) begin
        px_reg_255 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        py_fu_184 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln82_fu_462_p2 == 1'd1))) begin
        py_fu_184 <= py_2_reg_1319;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln76_1_reg_1306 <= add_ln76_1_fu_343_p2;
        add_ln76_reg_1286 <= add_ln76_fu_313_p2;
        add_ln77_reg_1291 <= add_ln77_fu_319_p2;
        sext_ln76_reg_1301 <= sext_ln76_fu_335_p1;
        sext_ln77_reg_1296 <= sext_ln77_fu_325_p1;
        sext_ln83_reg_1311 <= sext_ln83_fu_349_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bit_select59_i_i_reg_1406 <= bit_select59_i_i_fu_719_p3;
        icmp_ln86_10_reg_1426 <= icmp_ln86_10_fu_817_p2;
        icmp_ln86_1_reg_1372 <= icmp_ln86_1_fu_651_p2;
        icmp_ln86_2_reg_1384 <= icmp_ln86_2_fu_677_p2;
        icmp_ln86_4_reg_1396 <= icmp_ln86_4_fu_687_p2;
        icmp_ln86_5_reg_1401 <= icmp_ln86_5_fu_703_p2;
        icmp_ln86_6_reg_1411 <= icmp_ln86_6_fu_737_p2;
        icmp_ln86_8_reg_1416 <= icmp_ln86_8_fu_789_p2;
        icmp_ln86_9_reg_1421 <= icmp_ln86_9_fu_795_p2;
        icmp_ln86_reg_1367 <= icmp_ln86_fu_635_p2;
        select_ln86_13_reg_1432 <= select_ln86_13_fu_971_p3;
        select_ln86_14_reg_1438 <= select_ln86_14_fu_979_p3;
        select_ln86_1_reg_1377 <= select_ln86_1_fu_669_p3;
        select_ln86_reg_1362 <= select_ln86_fu_627_p3;
        tmp_75_reg_1354 <= bitcast_ln724_fu_575_p1[32'd63];
        trunc_ln86_4_reg_1390 <= trunc_ln86_4_fu_683_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_in_addr_read_reg_1343 <= m_axi_gmem_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln82_fu_462_p2 == 1'd0))) begin
        gmem_in_addr_reg_1337 <= sext_ln86_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        px_1_reg_1332 <= px_1_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        py_2_reg_1319 <= py_2_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln76_fu_365_p2 == 1'd0))) begin
        sext_ln82_reg_1324[19 : 2] <= sext_ln82_fu_454_p1[19 : 2];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_in_RVALID == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((s_pix_i_full_n == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_in_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln76_fu_365_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln76_fu_365_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_in_blk_n_AR = m_axi_gmem_in_ARREADY;
    end else begin
        gmem_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_in_blk_n_R = m_axi_gmem_in_RVALID;
    end else begin
        gmem_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_c5_blk_n = h0_c5_full_n;
    end else begin
        h0_c5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_c5_write = 1'b1;
    end else begin
        h0_c5_write = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_in_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_in_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_in_RREADY = 1'b1;
    end else begin
        m_axi_gmem_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        s_pix_i_blk_n = s_pix_i_full_n;
    end else begin
        s_pix_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (s_pix_i_full_n == 1'b1))) begin
        s_pix_i_write = 1'b1;
    end else begin
        s_pix_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tw_eff_loc_i_c2_blk_n = tw_eff_loc_i_c2_full_n;
    end else begin
        tw_eff_loc_i_c2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tw_eff_loc_i_c2_write = 1'b1;
    end else begin
        tw_eff_loc_i_c2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_c_blk_n = w0_c_full_n;
    end else begin
        w0_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_c_write = 1'b1;
    end else begin
        w0_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln76_fu_365_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln82_fu_462_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_in_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_gmem_in_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (s_pix_i_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln616_fu_269_p2 = (h0 + 9'd16);

assign add_ln76_1_fu_343_p2 = (p_read_cast_fu_339_p1 + 9'd12);

assign add_ln76_fu_313_p2 = (th_eff_cast_fu_309_p1 + 9'd12);

assign add_ln77_2_fu_385_p2 = ($signed(add_ln77_reg_1291) + $signed(zext_ln77_fu_376_p1));

assign add_ln77_fu_319_p2 = ($signed(h0_cast4_i_fu_305_p1) + $signed(10'd1018));

assign add_ln83_2_fu_482_p2 = ($signed(sext_ln83_reg_1311) + $signed(zext_ln83_fu_473_p1));

assign add_ln83_fu_329_p2 = ($signed(w0_cast_fu_301_p1) + $signed(9'd506));

assign add_ln86_1_fu_542_p2 = ($signed(sext_ln86_3_fu_538_p1) + $signed(input_ftmap));

assign add_ln86_2_fu_657_p2 = ($signed(sub_ln86_2_fu_641_p2) + $signed(12'd4082));

assign add_ln86_3_fu_709_p2 = ($signed(trunc_ln86_3_fu_647_p1) + $signed(11'd2033));

assign add_ln86_4_fu_747_p2 = ($signed(sub_ln86_2_fu_641_p2) + $signed(12'd4080));

assign add_ln86_5_fu_1080_p2 = (select_ln86_2_fu_1026_p3 + zext_ln86_9_fu_1076_p1);

assign add_ln86_6_fu_801_p2 = (sub_ln86_2_fu_641_p2 + 12'd2);

assign add_ln86_7_fu_811_p2 = (sub_ln86_2_fu_641_p2 + 12'd3);

assign add_ln86_8_fu_869_p2 = (trunc_ln86_8_fu_743_p1 + 6'd3);

assign add_ln86_fu_533_p2 = ($signed(sext_ln82_reg_1324) + $signed(zext_ln86_2_fu_529_p1));

assign and_ln86_10_fu_851_p2 = (tobool_i_i_fu_843_p3 & icmp_ln86_11_fu_837_p2);

assign and_ln86_11_fu_1178_p2 = (xor_ln86_3_fu_1173_p2 & tmp_81_fu_1148_p3);

assign and_ln86_12_fu_1184_p2 = (tmp_75_reg_1354 & and_ln86_11_fu_1178_p2);

assign and_ln86_13_fu_1189_p2 = (tmp_75_reg_1354 & icmp_ln86_10_reg_1426);

assign and_ln86_14_fu_1193_p2 = (select_ln86_6_fu_1156_p3 & and_ln86_13_fu_1189_p2);

assign and_ln86_15_fu_1213_p2 = (xor_ln86_4_fu_1207_p2 & and_ln86_13_fu_1189_p2);

assign and_ln86_16_fu_783_p2 = (select_ln86_fu_627_p3 & lshr_ln86_2_fu_777_p2);

assign and_ln86_1_fu_1052_p2 = (icmp_ln86_8_reg_1416 & icmp_ln86_6_reg_1411);

assign and_ln86_2_fu_919_p2 = (xor_ln86_7_fu_831_p2 & icmp_ln86_12_fu_857_p2);

assign and_ln86_3_fu_925_p2 = (select_ln86_12_fu_911_p3 & and_ln86_10_fu_851_p2);

assign and_ln86_4_fu_943_p2 = (xor_ln86_fu_931_p2 & icmp_ln86_15_fu_937_p2);

assign and_ln86_5_fu_1162_p2 = (select_ln86_13_reg_1432 & and_ln86_9_fu_1142_p2);

assign and_ln86_6_fu_1111_p2 = (xor_ln86_1_fu_1106_p2 & icmp_ln86_1_reg_1372);

assign and_ln86_7_fu_1124_p2 = (icmp_ln86_9_reg_1421 & icmp_ln86_5_reg_1401);

assign and_ln86_8_fu_1136_p2 = (xor_ln86_6_fu_1094_p2 & tmp_79_fu_1056_p3);

assign and_ln86_9_fu_1142_p2 = (and_ln86_8_fu_1136_p2 & and_ln86_6_fu_1111_p2);

assign and_ln86_fu_1070_p2 = (select_ln86_8_fu_1047_p3 & or_ln86_fu_1064_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (h0_c5_full_n == 1'b0) | (w0_c_full_n == 1'b0) | (tw_eff_loc_i_c2_full_n == 1'b0));
end

assign ashr_ln86_fu_1017_p2 = $signed(select_ln86_reg_1362) >>> zext_ln86_5_fu_1013_p1;

assign bit_select59_i_i_fu_719_p3 = select_ln86_fu_627_p3[zext_ln86_6_fu_715_p1];

assign bitcast_ln724_fu_575_p1 = grp_fu_266_p1;

assign grp_fu_266_p0 = gmem_in_addr_read_reg_1343;

assign h0_c5_din = h0;

assign h0_cast4_i_fu_305_p1 = h0;

assign icmp_ln76_fu_365_p2 = ((py_fu_184 == add_ln76_reg_1286) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_410_p2 = ((iy_1_fu_398_p3 > 10'd254) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_462_p2 = ((px_reg_255 == add_ln76_1_reg_1306) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_503_p2 = ((ix_1_fu_495_p3 > 10'd254) ? 1'b1 : 1'b0);

assign icmp_ln86_10_fu_817_p2 = (($signed(add_ln86_6_fu_801_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln86_11_fu_837_p2 = ((add_ln86_6_fu_801_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln86_12_fu_857_p2 = (($signed(add_ln86_7_fu_811_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln86_13_fu_863_p2 = ((add_ln86_7_fu_811_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln86_14_fu_891_p2 = ((lshr_ln86_fu_879_p2 == lshr_ln86_1_fu_885_p2) ? 1'b1 : 1'b0);

assign icmp_ln86_15_fu_937_p2 = ((lshr_ln86_fu_879_p2 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_16_fu_949_p2 = ((add_ln86_7_fu_811_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_651_p2 = (($signed(sub_ln86_2_fu_641_p2) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_2_fu_677_p2 = ((sub_ln86_2_fu_641_p2 == 12'd14) ? 1'b1 : 1'b0);

assign icmp_ln86_3_fu_990_p2 = ((select_ln86_1_reg_1377 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln86_4_fu_687_p2 = (($signed(add_ln86_2_fu_657_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln86_5_fu_703_p2 = ((tmp_77_fu_693_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_6_fu_737_p2 = (($signed(tmp_78_fu_727_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln86_7_fu_753_p2 = (($signed(add_ln86_4_fu_747_p2) > $signed(12'd53)) ? 1'b1 : 1'b0);

assign icmp_ln86_8_fu_789_p2 = ((and_ln86_16_fu_783_p2 != 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_9_fu_795_p2 = (($signed(sub_ln86_2_fu_641_p2) < $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_635_p2 = ((trunc_ln86_1_fu_579_p1 == 63'd0) ? 1'b1 : 1'b0);

assign ix_1_fu_495_p3 = ((tmp_74_fu_487_p3[0:0] == 1'b1) ? 10'd0 : add_ln83_2_fu_482_p2);

assign ix_fu_477_p2 = ($signed(sext_ln76_reg_1301) + $signed(zext_ln82_fu_458_p1));

assign iy_1_fu_398_p3 = ((tmp_73_fu_390_p3[0:0] == 1'b1) ? 10'd0 : add_ln77_2_fu_385_p2);

assign iy_2_fu_416_p3 = ((icmp_ln79_fu_410_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln77_fu_406_p1);

assign iy_fu_380_p2 = ($signed(sext_ln77_reg_1296) + $signed(zext_ln76_fu_361_p1));

assign lshr_ln86_1_fu_885_p2 = 54'd18014398509481983 >> zext_ln86_10_fu_875_p1;

assign lshr_ln86_2_fu_777_p2 = 54'd18014398509481983 >> zext_ln86_8_fu_773_p1;

assign lshr_ln86_fu_879_p2 = select_ln86_fu_627_p3 >> zext_ln86_10_fu_875_p1;

assign m_axi_gmem_in_ARADDR = gmem_in_addr_reg_1337;

assign m_axi_gmem_in_ARBURST = 2'd0;

assign m_axi_gmem_in_ARCACHE = 4'd0;

assign m_axi_gmem_in_ARID = 1'd0;

assign m_axi_gmem_in_ARLEN = 32'd1;

assign m_axi_gmem_in_ARLOCK = 2'd0;

assign m_axi_gmem_in_ARPROT = 3'd0;

assign m_axi_gmem_in_ARQOS = 4'd0;

assign m_axi_gmem_in_ARREGION = 4'd0;

assign m_axi_gmem_in_ARSIZE = 3'd0;

assign m_axi_gmem_in_ARUSER = 1'd0;

assign m_axi_gmem_in_AWADDR = 64'd0;

assign m_axi_gmem_in_AWBURST = 2'd0;

assign m_axi_gmem_in_AWCACHE = 4'd0;

assign m_axi_gmem_in_AWID = 1'd0;

assign m_axi_gmem_in_AWLEN = 32'd0;

assign m_axi_gmem_in_AWLOCK = 2'd0;

assign m_axi_gmem_in_AWPROT = 3'd0;

assign m_axi_gmem_in_AWQOS = 4'd0;

assign m_axi_gmem_in_AWREGION = 4'd0;

assign m_axi_gmem_in_AWSIZE = 3'd0;

assign m_axi_gmem_in_AWUSER = 1'd0;

assign m_axi_gmem_in_AWVALID = 1'b0;

assign m_axi_gmem_in_BREADY = 1'b0;

assign m_axi_gmem_in_WDATA = 32'd0;

assign m_axi_gmem_in_WID = 1'd0;

assign m_axi_gmem_in_WLAST = 1'b0;

assign m_axi_gmem_in_WSTRB = 4'd0;

assign m_axi_gmem_in_WUSER = 1'd0;

assign m_axi_gmem_in_WVALID = 1'b0;

assign or_ln86_1_fu_1244_p2 = (xor_ln86_5_fu_1238_p2 | select_ln86_16_fu_1219_p3);

assign or_ln86_2_fu_1227_p2 = (xor_ln86_3_fu_1173_p2 | select_ln86_6_fu_1156_p3);

assign or_ln86_3_fu_1233_p2 = (tmp_75_reg_1354 | or_ln86_2_fu_1227_p2);

assign or_ln86_fu_1064_p2 = (trunc_ln86_6_fu_1034_p1 | and_ln86_1_fu_1052_p2);

assign p_read_cast_fu_339_p1 = p_read;

assign px_1_fu_467_p2 = (px_reg_255 + 9'd1);

assign py_2_fu_370_p2 = (py_fu_184 + 9'd1);

assign s_pix_i_din = ((icmp_ln86_reg_1367[0:0] == 1'b1) ? 16'd0 : select_ln86_7_fu_1258_p3);

assign select_ln85_fu_513_p3 = ((icmp_ln85_fu_503_p2[0:0] == 1'b1) ? 8'd254 : trunc_ln86_fu_509_p1);

assign select_ln86_10_fu_1116_p3 = ((and_ln86_6_fu_1111_p2[0:0] == 1'b1) ? add_ln86_5_fu_1080_p2 : select_ln86_9_fu_1100_p3);

assign select_ln86_11_fu_1128_p3 = ((and_ln86_7_fu_1124_p2[0:0] == 1'b1) ? shl_ln86_fu_1042_p2 : select_ln86_10_fu_1116_p3);

assign select_ln86_12_fu_911_p3 = ((icmp_ln86_13_fu_863_p2[0:0] == 1'b1) ? icmp_ln86_14_fu_891_p2 : xor_ln86_8_fu_905_p2);

assign select_ln86_13_fu_971_p3 = ((and_ln86_2_fu_919_p2[0:0] == 1'b1) ? and_ln86_3_fu_925_p2 : select_ln86_4_fu_955_p3);

assign select_ln86_14_fu_979_p3 = ((and_ln86_2_fu_919_p2[0:0] == 1'b1) ? and_ln86_4_fu_943_p2 : select_ln86_5_fu_963_p3);

assign select_ln86_15_fu_1199_p3 = ((and_ln86_14_fu_1193_p2[0:0] == 1'b1) ? xor_ln86_2_fu_1167_p2 : and_ln86_12_fu_1184_p2);

assign select_ln86_16_fu_1219_p3 = ((and_ln86_15_fu_1213_p2[0:0] == 1'b1) ? xor_ln86_2_fu_1167_p2 : select_ln86_15_fu_1199_p3);

assign select_ln86_18_fu_765_p3 = ((icmp_ln86_7_fu_753_p2[0:0] == 1'b1) ? 6'd0 : sub_ln86_4_fu_759_p2);

assign select_ln86_19_fu_1250_p3 = ((xor_ln86_5_fu_1238_p2[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln86_1_fu_669_p3 = ((icmp_ln86_1_fu_651_p2[0:0] == 1'b1) ? add_ln86_2_fu_657_p2 : sub_ln86_3_fu_663_p2);

assign select_ln86_2_fu_1026_p3 = ((icmp_ln86_3_fu_990_p2[0:0] == 1'b1) ? trunc_ln86_5_fu_1022_p1 : select_ln86_3_fu_1002_p3);

assign select_ln86_3_fu_1002_p3 = ((tmp_76_fu_995_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln86_4_fu_955_p3 = ((icmp_ln86_16_fu_949_p2[0:0] == 1'b1) ? and_ln86_10_fu_851_p2 : xor_ln86_7_fu_831_p2);

assign select_ln86_5_fu_963_p3 = ((icmp_ln86_16_fu_949_p2[0:0] == 1'b1) ? xor_ln86_fu_931_p2 : xor_ln86_7_fu_831_p2);

assign select_ln86_6_fu_1156_p3 = ((and_ln86_9_fu_1142_p2[0:0] == 1'b1) ? select_ln86_13_reg_1432 : select_ln86_14_reg_1438);

assign select_ln86_7_fu_1258_p3 = ((or_ln86_1_fu_1244_p2[0:0] == 1'b1) ? select_ln86_19_fu_1250_p3 : select_ln86_11_fu_1128_p3);

assign select_ln86_8_fu_1047_p3 = ((icmp_ln86_4_reg_1396[0:0] == 1'b1) ? tmp_75_reg_1354 : bit_select59_i_i_reg_1406);

assign select_ln86_9_fu_1100_p3 = ((icmp_ln86_2_reg_1384[0:0] == 1'b1) ? trunc_ln86_4_reg_1390 : 16'd0);

assign select_ln86_fu_627_p3 = ((tmp_75_fu_583_p3[0:0] == 1'b1) ? sub_ln86_1_fu_621_p2 : zext_ln86_4_fu_617_p1);

assign sext_ln76_fu_335_p1 = add_ln83_fu_329_p2;

assign sext_ln77_fu_325_p1 = add_ln77_fu_319_p2;

assign sext_ln82_fu_454_p1 = $signed(sub_ln86_fu_448_p2);

assign sext_ln83_fu_349_p1 = add_ln83_fu_329_p2;

assign sext_ln86_1_fu_987_p1 = select_ln86_1_reg_1377;

assign sext_ln86_1cast_fu_1038_p1 = sext_ln86_1_fu_987_p1[15:0];

assign sext_ln86_3_fu_538_p1 = $signed(add_ln86_fu_533_p2);

assign sext_ln86_4_fu_807_p1 = add_ln86_6_fu_801_p2;

assign sext_ln86_6_fu_1010_p1 = select_ln86_1_reg_1377;

assign sext_ln86_fu_557_p1 = $signed(trunc_ln_fu_547_p4);

assign shl_ln86_1_fu_436_p3 = {{iy_2_fu_416_p3}, {2'd0}};

assign shl_ln86_2_fu_521_p3 = {{select_ln85_fu_513_p3}, {2'd0}};

assign shl_ln86_fu_1042_p2 = trunc_ln86_4_reg_1390 << sext_ln86_1cast_fu_1038_p1;

assign shl_ln_fu_424_p3 = {{iy_2_fu_416_p3}, {10'd0}};

assign sub_ln86_1_fu_621_p2 = (54'd0 - zext_ln86_4_fu_617_p1);

assign sub_ln86_2_fu_641_p2 = (12'd1075 - zext_ln86_3_fu_601_p1);

assign sub_ln86_3_fu_663_p2 = (12'd14 - sub_ln86_2_fu_641_p2);

assign sub_ln86_4_fu_759_p2 = (6'd5 - trunc_ln86_8_fu_743_p1);

assign sub_ln86_fu_448_p2 = (zext_ln86_fu_432_p1 - zext_ln86_1_fu_444_p1);

assign th_eff_cast_fu_309_p1 = th_eff_fu_293_p3;

assign th_eff_fu_293_p3 = ((tmp_fu_275_p3[0:0] == 1'b1) ? xor_ln616_fu_287_p2 : 8'd16);

assign tmp_73_fu_390_p3 = iy_fu_380_p2[32'd10];

assign tmp_74_fu_487_p3 = ix_fu_477_p2[32'd10];

assign tmp_75_fu_583_p3 = bitcast_ln724_fu_575_p1[32'd63];

assign tmp_76_fu_995_p3 = gmem_in_addr_read_reg_1343[32'd31];

assign tmp_77_fu_693_p4 = {{select_ln86_1_fu_669_p3[11:4]}};

assign tmp_78_fu_727_p4 = {{sub_ln86_2_fu_641_p2[11:4]}};

assign tmp_79_fu_1056_p3 = select_ln86_2_fu_1026_p3[32'd15];

assign tmp_80_fu_1086_p3 = add_ln86_5_fu_1080_p2[32'd15];

assign tmp_81_fu_1148_p3 = select_ln86_11_fu_1128_p3[32'd15];

assign tmp_82_fu_823_p3 = add_ln86_6_fu_801_p2[32'd11];

assign tmp_83_fu_897_p3 = add_ln86_7_fu_811_p2[32'd11];

assign tmp_fu_275_p3 = add_ln616_fu_269_p2[32'd8];

assign tmp_i_fu_591_p4 = {{bitcast_ln724_fu_575_p1[62:52]}};

assign tobool_i_i_fu_843_p3 = select_ln86_fu_627_p3[sext_ln86_4_fu_807_p1];

assign trunc_ln615_fu_283_p1 = h0[7:0];

assign trunc_ln77_fu_406_p1 = iy_1_fu_398_p3[7:0];

assign trunc_ln86_1_fu_579_p1 = bitcast_ln724_fu_575_p1[62:0];

assign trunc_ln86_2_fu_605_p1 = bitcast_ln724_fu_575_p1[51:0];

assign trunc_ln86_3_fu_647_p1 = sub_ln86_2_fu_641_p2[10:0];

assign trunc_ln86_4_fu_683_p1 = select_ln86_fu_627_p3[15:0];

assign trunc_ln86_5_fu_1022_p1 = ashr_ln86_fu_1017_p2[15:0];

assign trunc_ln86_6_fu_1034_p1 = select_ln86_2_fu_1026_p3[0:0];

assign trunc_ln86_8_fu_743_p1 = sub_ln86_2_fu_641_p2[5:0];

assign trunc_ln86_fu_509_p1 = ix_1_fu_495_p3[7:0];

assign trunc_ln_fu_547_p4 = {{add_ln86_1_fu_542_p2[63:2]}};

assign tw_eff_loc_i_c2_din = p_read;

assign w0_c_din = w0;

assign w0_cast_fu_301_p1 = w0;

assign xor_ln616_fu_287_p2 = (trunc_ln615_fu_283_p1 ^ 8'd255);

assign xor_ln86_1_fu_1106_p2 = (icmp_ln86_2_reg_1384 ^ 1'd1);

assign xor_ln86_2_fu_1167_p2 = (1'd1 ^ and_ln86_5_fu_1162_p2);

assign xor_ln86_3_fu_1173_p2 = (icmp_ln86_10_reg_1426 ^ 1'd1);

assign xor_ln86_4_fu_1207_p2 = (select_ln86_6_fu_1156_p3 ^ 1'd1);

assign xor_ln86_5_fu_1238_p2 = (or_ln86_3_fu_1233_p2 ^ 1'd1);

assign xor_ln86_6_fu_1094_p2 = (tmp_80_fu_1086_p3 ^ 1'd1);

assign xor_ln86_7_fu_831_p2 = (tmp_82_fu_823_p3 ^ 1'd1);

assign xor_ln86_8_fu_905_p2 = (tmp_83_fu_897_p3 ^ 1'd1);

assign xor_ln86_fu_931_p2 = (1'd1 ^ and_ln86_10_fu_851_p2);

assign zext_ln76_fu_361_p1 = py_fu_184;

assign zext_ln77_fu_376_p1 = py_fu_184;

assign zext_ln82_fu_458_p1 = px_reg_255;

assign zext_ln83_fu_473_p1 = px_reg_255;

assign zext_ln86_10_fu_875_p1 = add_ln86_8_fu_869_p2;

assign zext_ln86_1_fu_444_p1 = shl_ln86_1_fu_436_p3;

assign zext_ln86_2_fu_529_p1 = shl_ln86_2_fu_521_p3;

assign zext_ln86_3_fu_601_p1 = tmp_i_fu_591_p4;

assign zext_ln86_4_cast_fu_609_p3 = {{1'd1}, {trunc_ln86_2_fu_605_p1}};

assign zext_ln86_4_fu_617_p1 = zext_ln86_4_cast_fu_609_p3;

assign zext_ln86_5_fu_1013_p1 = $unsigned(sext_ln86_6_fu_1010_p1);

assign zext_ln86_6_fu_715_p1 = add_ln86_3_fu_709_p2;

assign zext_ln86_8_fu_773_p1 = select_ln86_18_fu_765_p3;

assign zext_ln86_9_fu_1076_p1 = and_ln86_fu_1070_p2;

assign zext_ln86_fu_432_p1 = shl_ln_fu_424_p3;

always @ (posedge ap_clk) begin
    sext_ln82_reg_1324[1:0] <= 2'b00;
end

endmodule //srcnn_load_tile_to_stream3
