// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module srcnn_load_tile_mm_Block_entry38_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        phase,
        w0,
        h0,
        h0_c1_din,
        h0_c1_num_data_valid,
        h0_c1_fifo_cap,
        h0_c1_full_n,
        h0_c1_write,
        w0_c2_din,
        w0_c2_num_data_valid,
        w0_c2_fifo_cap,
        w0_c2_full_n,
        w0_c2_write,
        phase_c3_din,
        phase_c3_num_data_valid,
        phase_c3_fifo_cap,
        phase_c3_full_n,
        phase_c3_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] phase;
input  [7:0] w0;
input  [8:0] h0;
output  [8:0] h0_c1_din;
input  [1:0] h0_c1_num_data_valid;
input  [1:0] h0_c1_fifo_cap;
input   h0_c1_full_n;
output   h0_c1_write;
output  [7:0] w0_c2_din;
input  [1:0] w0_c2_num_data_valid;
input  [1:0] w0_c2_fifo_cap;
input   w0_c2_full_n;
output   w0_c2_write;
output  [0:0] phase_c3_din;
input  [1:0] phase_c3_num_data_valid;
input  [1:0] phase_c3_fifo_cap;
input   phase_c3_full_n;
output   phase_c3_write;
output  [63:0] ap_return_0;
output  [9:0] ap_return_1;
output  [9:0] ap_return_2;
output  [8:0] ap_return_3;
output  [8:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg h0_c1_write;
reg w0_c2_write;
reg phase_c3_write;
reg[63:0] ap_return_0;
reg[9:0] ap_return_1;
reg[9:0] ap_return_2;
reg[8:0] ap_return_3;
reg[8:0] ap_return_4;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    h0_c1_blk_n;
reg    w0_c2_blk_n;
reg    phase_c3_blk_n;
reg    ap_block_state1;
wire   [8:0] add_ln529_fu_100_p2;
wire   [7:0] trunc_ln528_fu_114_p1;
wire   [0:0] tmp_fu_106_p3;
wire   [7:0] xor_ln529_fu_118_p2;
wire   [8:0] w0_cast_fu_96_p1;
wire   [8:0] add_ln532_fu_132_p2;
wire   [0:0] tmp_5_fu_138_p3;
wire   [7:0] xor_ln532_fu_146_p2;
wire   [7:0] select_ln529_fu_124_p3;
wire   [8:0] th_eff_cast_i_fu_172_p1;
wire   [7:0] select_ln532_fu_152_p3;
wire   [8:0] tw_eff_cast_i_fu_182_p1;
wire   [63:0] in_tile_0_offset_cast_loc_i_0_fu_160_p1;
wire   [9:0] w0_cast19_loc_i_0_fu_164_p1;
wire   [9:0] h0_cast10_loc_i_0_fu_168_p1;
wire   [8:0] PH_fu_176_p2;
wire   [8:0] PW_fu_186_p2;
reg   [63:0] ap_return_0_preg;
reg   [9:0] ap_return_1_preg;
reg   [9:0] ap_return_2_preg;
reg   [8:0] ap_return_3_preg;
reg   [8:0] ap_return_4_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 10'd0;
#0 ap_return_2_preg = 10'd0;
#0 ap_return_3_preg = 9'd0;
#0 ap_return_4_preg = 9'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[0] <= in_tile_0_offset_cast_loc_i_0_fu_160_p1[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[7 : 0] <= w0_cast19_loc_i_0_fu_164_p1[7 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[0] <= 1'b0;
        ap_return_2_preg[1] <= 1'b0;
        ap_return_2_preg[2] <= 1'b0;
        ap_return_2_preg[3] <= 1'b0;
        ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[8 : 0] <= h0_cast10_loc_i_0_fu_168_p1[8 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= PH_fu_176_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_4_preg <= PW_fu_186_p2;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = in_tile_0_offset_cast_loc_i_0_fu_160_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = w0_cast19_loc_i_0_fu_164_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = h0_cast10_loc_i_0_fu_168_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = PH_fu_176_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = PW_fu_186_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_c1_blk_n = h0_c1_full_n;
    end else begin
        h0_c1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h0_c1_write = 1'b1;
    end else begin
        h0_c1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phase_c3_blk_n = phase_c3_full_n;
    end else begin
        phase_c3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phase_c3_write = 1'b1;
    end else begin
        phase_c3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_c2_blk_n = w0_c2_full_n;
    end else begin
        w0_c2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        w0_c2_write = 1'b1;
    end else begin
        w0_c2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PH_fu_176_p2 = (th_eff_cast_i_fu_172_p1 + 9'd12);

assign PW_fu_186_p2 = (tw_eff_cast_i_fu_182_p1 + 9'd12);

assign add_ln529_fu_100_p2 = (h0 + 9'd16);

assign add_ln532_fu_132_p2 = (w0_cast_fu_96_p1 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (phase_c3_full_n == 1'b0) | (w0_c2_full_n == 1'b0) | (h0_c1_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign h0_c1_din = h0;

assign h0_cast10_loc_i_0_fu_168_p1 = h0;

assign in_tile_0_offset_cast_loc_i_0_fu_160_p1 = phase;

assign phase_c3_din = phase;

assign select_ln529_fu_124_p3 = ((tmp_fu_106_p3[0:0] == 1'b1) ? xor_ln529_fu_118_p2 : 8'd16);

assign select_ln532_fu_152_p3 = ((tmp_5_fu_138_p3[0:0] == 1'b1) ? xor_ln532_fu_146_p2 : 8'd16);

assign th_eff_cast_i_fu_172_p1 = select_ln529_fu_124_p3;

assign tmp_5_fu_138_p3 = add_ln532_fu_132_p2[32'd8];

assign tmp_fu_106_p3 = add_ln529_fu_100_p2[32'd8];

assign trunc_ln528_fu_114_p1 = h0[7:0];

assign tw_eff_cast_i_fu_182_p1 = select_ln532_fu_152_p3;

assign w0_c2_din = w0;

assign w0_cast19_loc_i_0_fu_164_p1 = w0;

assign w0_cast_fu_96_p1 = w0;

assign xor_ln529_fu_118_p2 = (trunc_ln528_fu_114_p1 ^ 8'd255);

assign xor_ln532_fu_146_p2 = (w0 ^ 8'd255);

always @ (posedge ap_clk) begin
    ap_return_0_preg[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    ap_return_1_preg[9:8] <= 2'b00;
    ap_return_2_preg[9] <= 1'b0;
end

endmodule //srcnn_load_tile_mm_Block_entry38_proc
