-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_tile_mm_Block_entry38_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    phase : IN STD_LOGIC_VECTOR (0 downto 0);
    w0 : IN STD_LOGIC_VECTOR (7 downto 0);
    h0 : IN STD_LOGIC_VECTOR (8 downto 0);
    h0_c1_din : OUT STD_LOGIC_VECTOR (8 downto 0);
    h0_c1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_c1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_c1_full_n : IN STD_LOGIC;
    h0_c1_write : OUT STD_LOGIC;
    w0_c2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    w0_c2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    w0_c2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    w0_c2_full_n : IN STD_LOGIC;
    w0_c2_write : OUT STD_LOGIC;
    phase_c3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    phase_c3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    phase_c3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    phase_c3_full_n : IN STD_LOGIC;
    phase_c3_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of srcnn_load_tile_mm_Block_entry38_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h0_c1_blk_n : STD_LOGIC;
    signal w0_c2_blk_n : STD_LOGIC;
    signal phase_c3_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal add_ln529_fu_100_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln528_fu_114_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln529_fu_118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal w0_cast_fu_96_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln532_fu_132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_138_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln532_fu_146_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln529_fu_124_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_cast_i_fu_172_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln532_fu_152_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_cast_i_fu_182_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_tile_0_offset_cast_loc_i_0_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w0_cast19_loc_i_0_fu_164_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h0_cast10_loc_i_0_fu_168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal PH_fu_176_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal PW_fu_186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg(0) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        ap_return_0_preg(0) <= in_tile_0_offset_cast_loc_i_0_fu_160_p1(0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
                ap_return_1_preg(6) <= '0';
                ap_return_1_preg(7) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        ap_return_1_preg(7 downto 0) <= w0_cast19_loc_i_0_fu_164_p1(7 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg(0) <= '0';
                ap_return_2_preg(1) <= '0';
                ap_return_2_preg(2) <= '0';
                ap_return_2_preg(3) <= '0';
                ap_return_2_preg(4) <= '0';
                ap_return_2_preg(5) <= '0';
                ap_return_2_preg(6) <= '0';
                ap_return_2_preg(7) <= '0';
                ap_return_2_preg(8) <= '0';
            else
                if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                        ap_return_2_preg(8 downto 0) <= h0_cast10_loc_i_0_fu_168_p1(8 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv9_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= PH_fu_176_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv9_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_4_preg <= PW_fu_186_p2;
                end if; 
            end if;
        end if;
    end process;

    ap_return_0_preg(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    ap_return_1_preg(9 downto 8) <= "00";
    ap_return_2_preg(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    PH_fu_176_p2 <= std_logic_vector(unsigned(th_eff_cast_i_fu_172_p1) + unsigned(ap_const_lv9_C));
    PW_fu_186_p2 <= std_logic_vector(unsigned(tw_eff_cast_i_fu_182_p1) + unsigned(ap_const_lv9_C));
    add_ln529_fu_100_p2 <= std_logic_vector(unsigned(h0) + unsigned(ap_const_lv9_10));
    add_ln532_fu_132_p2 <= std_logic_vector(unsigned(w0_cast_fu_96_p1) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n, in_tile_0_offset_cast_loc_i_0_fu_160_p1, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= in_tile_0_offset_cast_loc_i_0_fu_160_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n, w0_cast19_loc_i_0_fu_164_p1, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= w0_cast19_loc_i_0_fu_164_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n, h0_cast10_loc_i_0_fu_168_p1, ap_return_2_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= h0_cast10_loc_i_0_fu_168_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n, PH_fu_176_p2, ap_return_3_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= PH_fu_176_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n, PW_fu_186_p2, ap_return_4_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_4 <= PW_fu_186_p2;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    h0_c1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_c1_blk_n <= h0_c1_full_n;
        else 
            h0_c1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h0_c1_din <= h0;

    h0_c1_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_c1_write <= ap_const_logic_1;
        else 
            h0_c1_write <= ap_const_logic_0;
        end if; 
    end process;

    h0_cast10_loc_i_0_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h0),10));
    in_tile_0_offset_cast_loc_i_0_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phase),64));

    phase_c3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, phase_c3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            phase_c3_blk_n <= phase_c3_full_n;
        else 
            phase_c3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_c3_din <= phase;

    phase_c3_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            phase_c3_write <= ap_const_logic_1;
        else 
            phase_c3_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln529_fu_124_p3 <= 
        xor_ln529_fu_118_p2 when (tmp_fu_106_p3(0) = '1') else 
        ap_const_lv8_10;
    select_ln532_fu_152_p3 <= 
        xor_ln532_fu_146_p2 when (tmp_5_fu_138_p3(0) = '1') else 
        ap_const_lv8_10;
    th_eff_cast_i_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln529_fu_124_p3),9));
    tmp_5_fu_138_p3 <= add_ln532_fu_132_p2(8 downto 8);
    tmp_fu_106_p3 <= add_ln529_fu_100_p2(8 downto 8);
    trunc_ln528_fu_114_p1 <= h0(8 - 1 downto 0);
    tw_eff_cast_i_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln532_fu_152_p3),9));

    w0_c2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, w0_c2_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_c2_blk_n <= w0_c2_full_n;
        else 
            w0_c2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w0_c2_din <= w0;

    w0_c2_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c1_full_n, w0_c2_full_n, phase_c3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (phase_c3_full_n = ap_const_logic_0) or (w0_c2_full_n = ap_const_logic_0) or (h0_c1_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_c2_write <= ap_const_logic_1;
        else 
            w0_c2_write <= ap_const_logic_0;
        end if; 
    end process;

    w0_cast19_loc_i_0_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0),10));
    w0_cast_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0),9));
    xor_ln529_fu_118_p2 <= (trunc_ln528_fu_114_p1 xor ap_const_lv8_FF);
    xor_ln532_fu_146_p2 <= (w0 xor ap_const_lv8_FF);
end behav;
