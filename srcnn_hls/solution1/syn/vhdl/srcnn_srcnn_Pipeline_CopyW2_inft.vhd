-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_srcnn_Pipeline_CopyW2_inft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_w2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_w2_AWREADY : IN STD_LOGIC;
    m_axi_gmem_w2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_w2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_WVALID : OUT STD_LOGIC;
    m_axi_gmem_w2_WREADY : IN STD_LOGIC;
    m_axi_gmem_w2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_WLAST : OUT STD_LOGIC;
    m_axi_gmem_w2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_w2_ARREADY : IN STD_LOGIC;
    m_axi_gmem_w2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_w2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_w2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_w2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_RVALID : IN STD_LOGIC;
    m_axi_gmem_w2_RREADY : OUT STD_LOGIC;
    m_axi_gmem_w2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_w2_RLAST : IN STD_LOGIC;
    m_axi_gmem_w2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_w2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w2_BVALID : IN STD_LOGIC;
    m_axi_gmem_w2_BREADY : OUT STD_LOGIC;
    m_axi_gmem_w2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_w2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_w2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln938_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln928_1 : IN STD_LOGIC_VECTOR (10 downto 0);
    sext_ln928 : IN STD_LOGIC_VECTOR (61 downto 0);
    trunc_ln928_3 : IN STD_LOGIC_VECTOR (2 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_we0 : OUT STD_LOGIC;
    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_srcnn_Pipeline_CopyW2_inft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln932_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_w2_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_w2_blk_n_R : STD_LOGIC;
    signal trunc_ln928_3_read_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i2_1_reg_347 : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_1_reg_347_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_w2_addr_reg_356 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln938_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln938_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln938_3_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln938_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i2_fu_100 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln932_fu_266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i2_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln928_1_cast_fu_248_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln932_fu_272_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln938_1_fu_276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln938_fu_282_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln928_cast_fu_244_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln938_fu_286_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln938_2_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln938_2_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i2_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln932_fu_260_p2 = ap_const_lv1_0))) then 
                    i2_fu_100 <= add_ln932_fu_266_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i2_fu_100 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i2_1_reg_347 <= ap_sig_allocacmp_i2_1;
                i2_1_reg_347_pp0_iter1_reg <= i2_1_reg_347;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln938_reg_362 <= bitcast_ln938_fu_307_p1;
                i2_1_reg_347_pp0_iter2_reg <= i2_1_reg_347_pp0_iter1_reg;
                i2_1_reg_347_pp0_iter3_reg <= i2_1_reg_347_pp0_iter2_reg;
                i2_1_reg_347_pp0_iter4_reg <= i2_1_reg_347_pp0_iter3_reg;
                i2_1_reg_347_pp0_iter5_reg <= i2_1_reg_347_pp0_iter4_reg;
                i2_1_reg_347_pp0_iter6_reg <= i2_1_reg_347_pp0_iter5_reg;
                i2_1_reg_347_pp0_iter7_reg <= i2_1_reg_347_pp0_iter6_reg;
                i2_1_reg_347_pp0_iter8_reg <= i2_1_reg_347_pp0_iter7_reg;
                i2_1_reg_347_pp0_iter9_reg <= i2_1_reg_347_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln932_fu_260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_w2_addr_reg_356 <= sext_ln938_fu_292_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln932_fu_266_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i2_1) + unsigned(ap_const_lv7_1));
    add_ln938_1_fu_276_p2 <= std_logic_vector(unsigned(zext_ln928_1_cast_fu_248_p1) + unsigned(zext_ln932_fu_272_p1));
    add_ln938_2_fu_314_p2 <= std_logic_vector(unsigned(zext_ln938_1) + unsigned(zext_ln938_2_fu_311_p1));
    add_ln938_fu_286_p2 <= std_logic_vector(unsigned(zext_ln938_fu_282_p1) + unsigned(sext_ln928_cast_fu_244_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, m_axi_gmem_w2_ARREADY, m_axi_gmem_w2_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_w2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((m_axi_gmem_w2_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, m_axi_gmem_w2_ARREADY, m_axi_gmem_w2_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_w2_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((m_axi_gmem_w2_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_gmem_w2_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (m_axi_gmem_w2_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln932_fu_260_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln932_fu_260_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i2_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i2_fu_100, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i2_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i2_1 <= i2_fu_100;
        end if; 
    end process;

    bitcast_ln938_fu_307_p1 <= m_axi_gmem_w2_RDATA;

    gmem_w2_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_w2_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_w2_blk_n_AR <= m_axi_gmem_w2_ARREADY;
        else 
            gmem_w2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_w2_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem_w2_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_w2_blk_n_R <= m_axi_gmem_w2_RVALID;
        else 
            gmem_w2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln932_fu_260_p2 <= "1" when (ap_sig_allocacmp_i2_1 = ap_const_lv7_40) else "0";
    m_axi_gmem_w2_ARADDR <= gmem_w2_addr_reg_356;
    m_axi_gmem_w2_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_w2_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_w2_ARID <= ap_const_lv1_0;
    m_axi_gmem_w2_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_w2_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_w2_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_w2_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_w2_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_w2_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_w2_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_w2_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_w2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_w2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_w2_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_w2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_w2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_w2_AWID <= ap_const_lv1_0;
    m_axi_gmem_w2_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_w2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_w2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_w2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_w2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_w2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_w2_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_w2_AWVALID <= ap_const_logic_0;
    m_axi_gmem_w2_BREADY <= ap_const_logic_0;

    m_axi_gmem_w2_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_w2_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_w2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_w2_WDATA <= ap_const_lv32_0;
    m_axi_gmem_w2_WID <= ap_const_lv1_0;
    m_axi_gmem_w2_WLAST <= ap_const_logic_0;
    m_axi_gmem_w2_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_w2_WUSER <= ap_const_lv1_0;
    m_axi_gmem_w2_WVALID <= ap_const_logic_0;
        sext_ln928_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln928),63));

        sext_ln938_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln938_fu_286_p2),64));

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_address0 <= zext_ln938_3_fu_319_p1(8 - 1 downto 0);

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_ce0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_d0 <= bitcast_ln938_reg_362;

    srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_we0_assign_proc : process(ap_enable_reg_pp0_iter10, trunc_ln928_3_read_reg_338, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln928_3_read_reg_338 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_we0 <= ap_const_logic_1;
        else 
            srcnn_float_255_255_float_1_9_9_float_float_64_1_1_f_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln928_3_read_reg_338 <= trunc_ln928_3;
    zext_ln928_1_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln928_1),12));
    zext_ln932_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i2_1),12));
    zext_ln938_2_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_1_reg_347_pp0_iter9_reg),8));
    zext_ln938_3_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln938_2_fu_314_p2),64));
    zext_ln938_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln938_1_fu_276_p2),63));
end behav;
