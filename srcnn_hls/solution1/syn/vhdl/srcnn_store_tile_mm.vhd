-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_store_tile_mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    phase_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    phase_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    phase_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    phase_empty_n : IN STD_LOGIC;
    phase_read : OUT STD_LOGIC;
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    output_ftmap_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    output_ftmap_empty_n : IN STD_LOGIC;
    output_ftmap_read : OUT STD_LOGIC;
    h0_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    h0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_empty_n : IN STD_LOGIC;
    h0_read : OUT STD_LOGIC;
    w0_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    w0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    w0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    w0_empty_n : IN STD_LOGIC;
    w0_read : OUT STD_LOGIC;
    outbuf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    outbuf_ce0 : OUT STD_LOGIC;
    outbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of srcnn_store_tile_mm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal phase_blk_n : STD_LOGIC;
    signal output_ftmap_blk_n : STD_LOGIC;
    signal h0_blk_n : STD_LOGIC;
    signal w0_blk_n : STD_LOGIC;
    signal out_reg_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal phase_read_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal w0_1_reg_222 : STD_LOGIC_VECTOR (8 downto 0);
    signal h0_1_reg_227 : STD_LOGIC_VECTOR (8 downto 0);
    signal th_eff_fu_137_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_fu_169_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tw_eff_reg_237 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_182_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_244 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_191_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_249 : STD_LOGIC_VECTOR (10 downto 0);
    signal bound_fu_205_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_reg_254 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_idle : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_ready : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWVALID : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WVALID : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WLAST : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARVALID : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_RREADY : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_BREADY : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_outbuf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_outbuf_ce0 : STD_LOGIC;
    signal grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln754_fu_113_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln753_fu_127_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_119_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln754_fu_131_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln757_fu_145_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln756_fu_159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln757_fu_163_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln770_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_fu_205_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_205_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal bound_fu_205_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_205_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_store_tile_mm_Pipeline_Out_writex IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_out_AWREADY : IN STD_LOGIC;
        m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_WVALID : OUT STD_LOGIC;
        m_axi_gmem_out_WREADY : IN STD_LOGIC;
        m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_WLAST : OUT STD_LOGIC;
        m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_out_ARREADY : IN STD_LOGIC;
        m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RVALID : IN STD_LOGIC;
        m_axi_gmem_out_RREADY : OUT STD_LOGIC;
        m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_RLAST : IN STD_LOGIC;
        m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_BVALID : IN STD_LOGIC;
        m_axi_gmem_out_BREADY : OUT STD_LOGIC;
        m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        zext_ln558 : IN STD_LOGIC_VECTOR (8 downto 0);
        bound : IN STD_LOGIC_VECTOR (15 downto 0);
        tw_eff : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln558_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln564 : IN STD_LOGIC_VECTOR (4 downto 0);
        zext_ln558_1 : IN STD_LOGIC_VECTOR (10 downto 0);
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        outbuf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        outbuf_ce0 : OUT STD_LOGIC;
        outbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_store_tile_mm_Pipeline_Out_writex_fu_98 : component srcnn_store_tile_mm_Pipeline_Out_writex
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start,
        ap_done => grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done,
        ap_idle => grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_idle,
        ap_ready => grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_ready,
        m_axi_gmem_out_AWVALID => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY => m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY => m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY => ap_const_logic_0,
        m_axi_gmem_out_ARADDR => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID => ap_const_logic_0,
        m_axi_gmem_out_RREADY => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA => ap_const_lv32_0,
        m_axi_gmem_out_RLAST => ap_const_logic_0,
        m_axi_gmem_out_RID => ap_const_lv1_0,
        m_axi_gmem_out_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_out_RUSER => ap_const_lv1_0,
        m_axi_gmem_out_RRESP => ap_const_lv2_0,
        m_axi_gmem_out_BVALID => m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY => grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP => m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID => m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER => m_axi_gmem_out_BUSER,
        zext_ln558 => h0_1_reg_227,
        bound => bound_reg_254,
        tw_eff => tw_eff_reg_237,
        zext_ln558_2 => tw_eff_reg_237,
        zext_ln564 => tmp_reg_244,
        zext_ln558_1 => tmp_1_reg_249,
        out_r => out_reg_212,
        outbuf_address0 => grp_store_tile_mm_Pipeline_Out_writex_fu_98_outbuf_address0,
        outbuf_ce0 => grp_store_tile_mm_Pipeline_Out_writex_fu_98_outbuf_ce0,
        outbuf_q0 => outbuf_q0);

    mul_8ns_8ns_16_1_1_U2326 : component srcnn_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => bound_fu_205_p0,
        din1 => bound_fu_205_p1,
        dout => bound_fu_205_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_254 <= bound_fu_205_p2;
                    tmp_1_reg_249(10 downto 2) <= tmp_1_fu_191_p3(10 downto 2);
                    tmp_reg_244(4) <= tmp_fu_182_p3(4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                h0_1_reg_227 <= h0_dout;
                out_reg_212 <= output_ftmap_dout;
                phase_read_reg_217 <= phase_dout;
                th_eff_reg_232 <= th_eff_fu_137_p3;
                tw_eff_reg_237 <= tw_eff_fu_169_p3;
                w0_1_reg_222 <= w0_dout;
            end if;
        end if;
    end process;
    tmp_reg_244(3 downto 0) <= "0000";
    tmp_1_reg_249(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n, grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln754_fu_113_p2 <= std_logic_vector(unsigned(h0_dout) + unsigned(ap_const_lv9_10));
    add_ln757_fu_145_p2 <= std_logic_vector(unsigned(w0_dout) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n)
    begin
        if (((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done)
    begin
        if ((grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n)
    begin
                ap_block_state1 <= ((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_205_p0 <= bound_fu_205_p00(8 - 1 downto 0);
    bound_fu_205_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_eff_reg_232),16));
    bound_fu_205_p1 <= bound_fu_205_p10(8 - 1 downto 0);
    bound_fu_205_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tw_eff_reg_237),16));
    grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_ap_start_reg;

    h0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_blk_n <= h0_empty_n;
        else 
            h0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    h0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n)
    begin
        if ((not(((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_read <= ap_const_logic_1;
        else 
            h0_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_out_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_out_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_out_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_out_ARID <= ap_const_lv1_0;
    m_axi_gmem_out_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_out_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_out_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_out_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_out_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_out_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_out_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_out_ARVALID <= ap_const_logic_0;
    m_axi_gmem_out_AWADDR <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWADDR;
    m_axi_gmem_out_AWBURST <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWBURST;
    m_axi_gmem_out_AWCACHE <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWCACHE;
    m_axi_gmem_out_AWID <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWID;
    m_axi_gmem_out_AWLEN <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWLEN;
    m_axi_gmem_out_AWLOCK <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWLOCK;
    m_axi_gmem_out_AWPROT <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWPROT;
    m_axi_gmem_out_AWQOS <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWQOS;
    m_axi_gmem_out_AWREGION <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWREGION;
    m_axi_gmem_out_AWSIZE <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWSIZE;
    m_axi_gmem_out_AWUSER <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWUSER;

    m_axi_gmem_out_AWVALID_assign_proc : process(ap_CS_fsm_state2, grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_out_AWVALID <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_AWVALID;
        else 
            m_axi_gmem_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_out_BREADY_assign_proc : process(ap_CS_fsm_state2, grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_BREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_out_BREADY <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_BREADY;
        else 
            m_axi_gmem_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_out_RREADY <= ap_const_logic_0;
    m_axi_gmem_out_WDATA <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WDATA;
    m_axi_gmem_out_WID <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WID;
    m_axi_gmem_out_WLAST <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WLAST;
    m_axi_gmem_out_WSTRB <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WSTRB;
    m_axi_gmem_out_WUSER <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WUSER;

    m_axi_gmem_out_WVALID_assign_proc : process(ap_CS_fsm_state2, grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_out_WVALID <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_m_axi_gmem_out_WVALID;
        else 
            m_axi_gmem_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    outbuf_address0 <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_outbuf_address0;
    outbuf_ce0 <= grp_store_tile_mm_Pipeline_Out_writex_fu_98_outbuf_ce0;

    output_ftmap_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_ftmap_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_ftmap_blk_n <= output_ftmap_empty_n;
        else 
            output_ftmap_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_ftmap_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n)
    begin
        if ((not(((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_ftmap_read <= ap_const_logic_1;
        else 
            output_ftmap_read <= ap_const_logic_0;
        end if; 
    end process;


    phase_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, phase_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            phase_blk_n <= phase_empty_n;
        else 
            phase_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    phase_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n)
    begin
        if ((not(((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            phase_read <= ap_const_logic_1;
        else 
            phase_read <= ap_const_logic_0;
        end if; 
    end process;

    th_eff_fu_137_p3 <= 
        xor_ln754_fu_131_p2 when (tmp_2_fu_119_p3(0) = '1') else 
        ap_const_lv8_10;
    tmp_1_fu_191_p3 <= (w0_1_reg_222 & ap_const_lv2_0);
    tmp_2_fu_119_p3 <= add_ln754_fu_113_p2(8 downto 8);
    tmp_3_fu_151_p3 <= add_ln757_fu_145_p2(8 downto 8);
    tmp_fu_182_p3 <= (xor_ln770_fu_177_p2 & ap_const_lv4_0);
    trunc_ln753_fu_127_p1 <= h0_dout(8 - 1 downto 0);
    trunc_ln756_fu_159_p1 <= w0_dout(8 - 1 downto 0);
    tw_eff_fu_169_p3 <= 
        xor_ln757_fu_163_p2 when (tmp_3_fu_151_p3(0) = '1') else 
        ap_const_lv8_10;

    w0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, w0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_blk_n <= w0_empty_n;
        else 
            w0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    w0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, phase_empty_n, output_ftmap_empty_n, h0_empty_n, w0_empty_n)
    begin
        if ((not(((h0_empty_n = ap_const_logic_0) or (output_ftmap_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (phase_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (w0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_read <= ap_const_logic_1;
        else 
            w0_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln754_fu_131_p2 <= (trunc_ln753_fu_127_p1 xor ap_const_lv8_FF);
    xor_ln757_fu_163_p2 <= (trunc_ln756_fu_159_p1 xor ap_const_lv8_FF);
    xor_ln770_fu_177_p2 <= (phase_read_reg_217 xor ap_const_lv1_1);
end behav;
