-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_store_tile_mm is
port (
    phase_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    phase_empty_n : IN STD_LOGIC;
    phase_read : OUT STD_LOGIC;
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_ftmap_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ftmap_empty_n : IN STD_LOGIC;
    output_ftmap_read : OUT STD_LOGIC;
    h0_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    h0_empty_n : IN STD_LOGIC;
    h0_read : OUT STD_LOGIC;
    w0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    w0_empty_n : IN STD_LOGIC;
    w0_read : OUT STD_LOGIC;
    outbuf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    outbuf_ce0 : OUT STD_LOGIC;
    outbuf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    outbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outbuf_we0 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    outbuf_empty_n : IN STD_LOGIC;
    outbuf_read : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of srcnn_store_tile_mm is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_h0_read : STD_LOGIC;
    signal entry_proc_U0_w0_read : STD_LOGIC;
    signal entry_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (8 downto 0);
    signal entry_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal entry_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (8 downto 0);
    signal entry_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_channel_done_tmp_4 : STD_LOGIC;
    signal tmp_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_4 : STD_LOGIC;
    signal ap_channel_done_tmp_3 : STD_LOGIC;
    signal tmp_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_3 : STD_LOGIC;
    signal ap_channel_done_tmp_2 : STD_LOGIC;
    signal tmp_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_2 : STD_LOGIC;
    signal ap_channel_done_tmp_1 : STD_LOGIC;
    signal tmp_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_1 : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_ap_start : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_ap_done : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_ap_continue : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_ap_idle : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_ap_ready : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_phase_read : STD_LOGIC;
    signal store_tile_mm_Block_entry23_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_tile_mm_Block_entry23_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal store_tile_mm_Block_entry23_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_tile_mm_Block_entry23_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_p_cast_loc_i_i_channel : STD_LOGIC;
    signal p_cast_loc_i_i_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_cast_loc_i_i_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_cast_loc_i_i_channel : STD_LOGIC;
    signal ap_channel_done_shl_ln333_cast_loc_i_i_channel : STD_LOGIC;
    signal shl_ln333_cast_loc_i_i_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_shl_ln333_cast_loc_i_i_channel : STD_LOGIC;
    signal ap_channel_done_h0_cast6_loc_i_i_channel : STD_LOGIC;
    signal h0_cast6_loc_i_i_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_h0_cast6_loc_i_i_channel : STD_LOGIC;
    signal ap_channel_done_out_tile_offset_cast_loc_i_i_channel : STD_LOGIC;
    signal out_tile_offset_cast_loc_i_i_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_out_tile_offset_cast_loc_i_i_channel : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_ap_start : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_ap_done : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_ap_continue : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_ap_idle : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_ap_ready : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_output_ftmap_read : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWVALID : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WVALID : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WLAST : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARVALID : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_RREADY : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_BREADY : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_outbuf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal store_tile_mm_Loop_Out_writey_proc_U0_outbuf_ce0 : STD_LOGIC;
    signal store_tile_mm_Loop_Out_writey_proc_U0_outbuf_write : STD_LOGIC;
    signal tmp_1_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_empty_n : STD_LOGIC;
    signal tmp_2_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_empty_n : STD_LOGIC;
    signal tmp_3_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_empty_n : STD_LOGIC;
    signal tmp_4_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_empty_n : STD_LOGIC;
    signal out_tile_offset_cast_loc_i_i_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_tile_offset_cast_loc_i_i_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal out_tile_offset_cast_loc_i_i_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal out_tile_offset_cast_loc_i_i_channel_empty_n : STD_LOGIC;
    signal h0_cast6_loc_i_i_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal h0_cast6_loc_i_i_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal h0_cast6_loc_i_i_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal h0_cast6_loc_i_i_channel_empty_n : STD_LOGIC;
    signal shl_ln333_cast_loc_i_i_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln333_cast_loc_i_i_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln333_cast_loc_i_i_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln333_cast_loc_i_i_channel_empty_n : STD_LOGIC;
    signal p_cast_loc_i_i_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_loc_i_i_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_loc_i_i_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_loc_i_i_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h0_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        h0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        h0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        h0_empty_n : IN STD_LOGIC;
        h0_read : OUT STD_LOGIC;
        w0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        w0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        w0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        w0_empty_n : IN STD_LOGIC;
        w0_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component srcnn_store_tile_mm_Block_entry23_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        phase_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        phase_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        phase_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        phase_empty_n : IN STD_LOGIC;
        phase_read : OUT STD_LOGIC;
        h0 : IN STD_LOGIC_VECTOR (8 downto 0);
        w0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_store_tile_mm_Loop_Out_writey_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (9 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_ftmap_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_ftmap_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_ftmap_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_ftmap_empty_n : IN STD_LOGIC;
        output_ftmap_read : OUT STD_LOGIC;
        h0 : IN STD_LOGIC_VECTOR (8 downto 0);
        w0 : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_out_AWREADY : IN STD_LOGIC;
        m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_WVALID : OUT STD_LOGIC;
        m_axi_gmem_out_WREADY : IN STD_LOGIC;
        m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_WLAST : OUT STD_LOGIC;
        m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_out_ARREADY : IN STD_LOGIC;
        m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RVALID : IN STD_LOGIC;
        m_axi_gmem_out_RREADY : OUT STD_LOGIC;
        m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_RLAST : IN STD_LOGIC;
        m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_BVALID : IN STD_LOGIC;
        m_axi_gmem_out_BREADY : OUT STD_LOGIC;
        m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
        outbuf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        outbuf_ce0 : OUT STD_LOGIC;
        outbuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component srcnn_fifo_w9_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component srcnn_fifo_w9_d2_S_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component srcnn_fifo_w64_d2_S_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component srcnn_fifo_w10_d2_S_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component srcnn_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component srcnn_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        h0_dout => h0_dout,
        h0_num_data_valid => ap_const_lv2_0,
        h0_fifo_cap => ap_const_lv2_0,
        h0_empty_n => h0_empty_n,
        h0_read => entry_proc_U0_h0_read,
        w0_dout => w0_dout,
        w0_num_data_valid => ap_const_lv2_0,
        w0_fifo_cap => ap_const_lv2_0,
        w0_empty_n => w0_empty_n,
        w0_read => entry_proc_U0_w0_read,
        ap_return_0 => entry_proc_U0_ap_return_0,
        ap_return_1 => entry_proc_U0_ap_return_1,
        ap_return_2 => entry_proc_U0_ap_return_2,
        ap_return_3 => entry_proc_U0_ap_return_3);

    store_tile_mm_Block_entry23_proc_U0 : component srcnn_store_tile_mm_Block_entry23_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => store_tile_mm_Block_entry23_proc_U0_ap_start,
        ap_done => store_tile_mm_Block_entry23_proc_U0_ap_done,
        ap_continue => store_tile_mm_Block_entry23_proc_U0_ap_continue,
        ap_idle => store_tile_mm_Block_entry23_proc_U0_ap_idle,
        ap_ready => store_tile_mm_Block_entry23_proc_U0_ap_ready,
        phase_dout => phase_dout,
        phase_num_data_valid => ap_const_lv2_0,
        phase_fifo_cap => ap_const_lv2_0,
        phase_empty_n => phase_empty_n,
        phase_read => store_tile_mm_Block_entry23_proc_U0_phase_read,
        h0 => tmp_3_dout,
        w0 => tmp_2_dout,
        ap_return_0 => store_tile_mm_Block_entry23_proc_U0_ap_return_0,
        ap_return_1 => store_tile_mm_Block_entry23_proc_U0_ap_return_1,
        ap_return_2 => store_tile_mm_Block_entry23_proc_U0_ap_return_2,
        ap_return_3 => store_tile_mm_Block_entry23_proc_U0_ap_return_3);

    store_tile_mm_Loop_Out_writey_proc_U0 : component srcnn_store_tile_mm_Loop_Out_writey_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => store_tile_mm_Loop_Out_writey_proc_U0_ap_start,
        ap_done => store_tile_mm_Loop_Out_writey_proc_U0_ap_done,
        ap_continue => store_tile_mm_Loop_Out_writey_proc_U0_ap_continue,
        ap_idle => store_tile_mm_Loop_Out_writey_proc_U0_ap_idle,
        ap_ready => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready,
        p_read => h0_cast6_loc_i_i_channel_dout,
        p_read1 => shl_ln333_cast_loc_i_i_channel_dout,
        output_ftmap_dout => output_ftmap_dout,
        output_ftmap_num_data_valid => ap_const_lv3_0,
        output_ftmap_fifo_cap => ap_const_lv3_0,
        output_ftmap_empty_n => output_ftmap_empty_n,
        output_ftmap_read => store_tile_mm_Loop_Out_writey_proc_U0_output_ftmap_read,
        h0 => tmp_4_dout,
        w0 => tmp_1_dout,
        m_axi_gmem_out_AWVALID => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY => m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY => m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY => ap_const_logic_0,
        m_axi_gmem_out_ARADDR => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID => ap_const_logic_0,
        m_axi_gmem_out_RREADY => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA => ap_const_lv32_0,
        m_axi_gmem_out_RLAST => ap_const_logic_0,
        m_axi_gmem_out_RID => ap_const_lv1_0,
        m_axi_gmem_out_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_out_RUSER => ap_const_lv1_0,
        m_axi_gmem_out_RRESP => ap_const_lv2_0,
        m_axi_gmem_out_BVALID => m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY => store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP => m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID => m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER => m_axi_gmem_out_BUSER,
        p_read2 => p_cast_loc_i_i_channel_dout,
        p_read3 => out_tile_offset_cast_loc_i_i_channel_dout,
        outbuf_address0 => store_tile_mm_Loop_Out_writey_proc_U0_outbuf_address0,
        outbuf_ce0 => store_tile_mm_Loop_Out_writey_proc_U0_outbuf_ce0,
        outbuf_q0 => outbuf_q0);

    tmp_1_U : component srcnn_fifo_w9_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_3,
        if_full_n => tmp_1_full_n,
        if_write => ap_channel_done_tmp_1,
        if_dout => tmp_1_dout,
        if_num_data_valid => tmp_1_num_data_valid,
        if_fifo_cap => tmp_1_fifo_cap,
        if_empty_n => tmp_1_empty_n,
        if_read => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);

    tmp_2_U : component srcnn_fifo_w9_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_2,
        if_full_n => tmp_2_full_n,
        if_write => ap_channel_done_tmp_2,
        if_dout => tmp_2_dout,
        if_num_data_valid => tmp_2_num_data_valid,
        if_fifo_cap => tmp_2_fifo_cap,
        if_empty_n => tmp_2_empty_n,
        if_read => store_tile_mm_Block_entry23_proc_U0_ap_ready);

    tmp_3_U : component srcnn_fifo_w9_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_1,
        if_full_n => tmp_3_full_n,
        if_write => ap_channel_done_tmp_3,
        if_dout => tmp_3_dout,
        if_num_data_valid => tmp_3_num_data_valid,
        if_fifo_cap => tmp_3_fifo_cap,
        if_empty_n => tmp_3_empty_n,
        if_read => store_tile_mm_Block_entry23_proc_U0_ap_ready);

    tmp_4_U : component srcnn_fifo_w9_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_0,
        if_full_n => tmp_4_full_n,
        if_write => ap_channel_done_tmp_4,
        if_dout => tmp_4_dout,
        if_num_data_valid => tmp_4_num_data_valid,
        if_fifo_cap => tmp_4_fifo_cap,
        if_empty_n => tmp_4_empty_n,
        if_read => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);

    out_tile_offset_cast_loc_i_i_channel_U : component srcnn_fifo_w64_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => store_tile_mm_Block_entry23_proc_U0_ap_return_0,
        if_full_n => out_tile_offset_cast_loc_i_i_channel_full_n,
        if_write => ap_channel_done_out_tile_offset_cast_loc_i_i_channel,
        if_dout => out_tile_offset_cast_loc_i_i_channel_dout,
        if_num_data_valid => out_tile_offset_cast_loc_i_i_channel_num_data_valid,
        if_fifo_cap => out_tile_offset_cast_loc_i_i_channel_fifo_cap,
        if_empty_n => out_tile_offset_cast_loc_i_i_channel_empty_n,
        if_read => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);

    h0_cast6_loc_i_i_channel_U : component srcnn_fifo_w10_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => store_tile_mm_Block_entry23_proc_U0_ap_return_1,
        if_full_n => h0_cast6_loc_i_i_channel_full_n,
        if_write => ap_channel_done_h0_cast6_loc_i_i_channel,
        if_dout => h0_cast6_loc_i_i_channel_dout,
        if_num_data_valid => h0_cast6_loc_i_i_channel_num_data_valid,
        if_fifo_cap => h0_cast6_loc_i_i_channel_fifo_cap,
        if_empty_n => h0_cast6_loc_i_i_channel_empty_n,
        if_read => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);

    shl_ln333_cast_loc_i_i_channel_U : component srcnn_fifo_w64_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => store_tile_mm_Block_entry23_proc_U0_ap_return_2,
        if_full_n => shl_ln333_cast_loc_i_i_channel_full_n,
        if_write => ap_channel_done_shl_ln333_cast_loc_i_i_channel,
        if_dout => shl_ln333_cast_loc_i_i_channel_dout,
        if_num_data_valid => shl_ln333_cast_loc_i_i_channel_num_data_valid,
        if_fifo_cap => shl_ln333_cast_loc_i_i_channel_fifo_cap,
        if_empty_n => shl_ln333_cast_loc_i_i_channel_empty_n,
        if_read => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);

    p_cast_loc_i_i_channel_U : component srcnn_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => store_tile_mm_Block_entry23_proc_U0_ap_return_3,
        if_full_n => p_cast_loc_i_i_channel_full_n,
        if_write => ap_channel_done_p_cast_loc_i_i_channel,
        if_dout => p_cast_loc_i_i_channel_dout,
        if_num_data_valid => p_cast_loc_i_i_channel_num_data_valid,
        if_fifo_cap => p_cast_loc_i_i_channel_fifo_cap,
        if_empty_n => p_cast_loc_i_i_channel_empty_n,
        if_read => store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);





    ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel <= ap_const_logic_0;
            else
                if (((store_tile_mm_Block_entry23_proc_U0_ap_done and store_tile_mm_Block_entry23_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel <= ap_sync_channel_write_h0_cast6_loc_i_i_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel <= ap_const_logic_0;
            else
                if (((store_tile_mm_Block_entry23_proc_U0_ap_done and store_tile_mm_Block_entry23_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel <= ap_sync_channel_write_out_tile_offset_cast_loc_i_i_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_cast_loc_i_i_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_cast_loc_i_i_channel <= ap_const_logic_0;
            else
                if (((store_tile_mm_Block_entry23_proc_U0_ap_done and store_tile_mm_Block_entry23_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_cast_loc_i_i_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_cast_loc_i_i_channel <= ap_sync_channel_write_p_cast_loc_i_i_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel <= ap_const_logic_0;
            else
                if (((store_tile_mm_Block_entry23_proc_U0_ap_done and store_tile_mm_Block_entry23_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel <= ap_sync_channel_write_shl_ln333_cast_loc_i_i_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_1 <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_1 <= ap_sync_channel_write_tmp_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_2 <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_2 <= ap_sync_channel_write_tmp_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_3 <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_3 <= ap_sync_channel_write_tmp_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp_4 <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_4 <= ap_sync_channel_write_tmp_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready <= ap_sync_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_h0_cast6_loc_i_i_channel <= (store_tile_mm_Block_entry23_proc_U0_ap_done and (ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel xor ap_const_logic_1));
    ap_channel_done_out_tile_offset_cast_loc_i_i_channel <= (store_tile_mm_Block_entry23_proc_U0_ap_done and (ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel xor ap_const_logic_1));
    ap_channel_done_p_cast_loc_i_i_channel <= (store_tile_mm_Block_entry23_proc_U0_ap_done and (ap_sync_reg_channel_write_p_cast_loc_i_i_channel xor ap_const_logic_1));
    ap_channel_done_shl_ln333_cast_loc_i_i_channel <= (store_tile_mm_Block_entry23_proc_U0_ap_done and (ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel xor ap_const_logic_1));
    ap_channel_done_tmp_1 <= ((ap_sync_reg_channel_write_tmp_1 xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_channel_done_tmp_2 <= ((ap_sync_reg_channel_write_tmp_2 xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_channel_done_tmp_3 <= ((ap_sync_reg_channel_write_tmp_3 xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_channel_done_tmp_4 <= ((ap_sync_reg_channel_write_tmp_4 xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_done <= store_tile_mm_Loop_Out_writey_proc_U0_ap_done;
    ap_idle <= (store_tile_mm_Loop_Out_writey_proc_U0_ap_idle and store_tile_mm_Block_entry23_proc_U0_ap_idle and (p_cast_loc_i_i_channel_empty_n xor ap_const_logic_1) and (shl_ln333_cast_loc_i_i_channel_empty_n xor ap_const_logic_1) and (h0_cast6_loc_i_i_channel_empty_n xor ap_const_logic_1) and (out_tile_offset_cast_loc_i_i_channel_empty_n xor ap_const_logic_1) and (tmp_4_empty_n xor ap_const_logic_1) and (tmp_3_empty_n xor ap_const_logic_1) and (tmp_2_empty_n xor ap_const_logic_1) and (tmp_1_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_h0_cast6_loc_i_i_channel <= ((h0_cast6_loc_i_i_channel_full_n and ap_channel_done_h0_cast6_loc_i_i_channel) or ap_sync_reg_channel_write_h0_cast6_loc_i_i_channel);
    ap_sync_channel_write_out_tile_offset_cast_loc_i_i_channel <= ((out_tile_offset_cast_loc_i_i_channel_full_n and ap_channel_done_out_tile_offset_cast_loc_i_i_channel) or ap_sync_reg_channel_write_out_tile_offset_cast_loc_i_i_channel);
    ap_sync_channel_write_p_cast_loc_i_i_channel <= ((p_cast_loc_i_i_channel_full_n and ap_channel_done_p_cast_loc_i_i_channel) or ap_sync_reg_channel_write_p_cast_loc_i_i_channel);
    ap_sync_channel_write_shl_ln333_cast_loc_i_i_channel <= ((shl_ln333_cast_loc_i_i_channel_full_n and ap_channel_done_shl_ln333_cast_loc_i_i_channel) or ap_sync_reg_channel_write_shl_ln333_cast_loc_i_i_channel);
    ap_sync_channel_write_tmp_1 <= ((tmp_1_full_n and ap_channel_done_tmp_1) or ap_sync_reg_channel_write_tmp_1);
    ap_sync_channel_write_tmp_2 <= ((tmp_2_full_n and ap_channel_done_tmp_2) or ap_sync_reg_channel_write_tmp_2);
    ap_sync_channel_write_tmp_3 <= ((tmp_3_full_n and ap_channel_done_tmp_3) or ap_sync_reg_channel_write_tmp_3);
    ap_sync_channel_write_tmp_4 <= ((tmp_4_full_n and ap_channel_done_tmp_4) or ap_sync_reg_channel_write_tmp_4);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    ap_sync_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready <= (store_tile_mm_Loop_Out_writey_proc_U0_ap_ready or ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= (ap_sync_channel_write_tmp_4 and ap_sync_channel_write_tmp_3 and ap_sync_channel_write_tmp_2 and ap_sync_channel_write_tmp_1);
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    h0_read <= entry_proc_U0_h0_read;
    m_axi_gmem_out_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_out_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_out_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_out_ARID <= ap_const_lv1_0;
    m_axi_gmem_out_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_out_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_out_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_out_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_out_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_out_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_out_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_out_ARVALID <= ap_const_logic_0;
    m_axi_gmem_out_AWADDR <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWADDR;
    m_axi_gmem_out_AWBURST <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWBURST;
    m_axi_gmem_out_AWCACHE <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWCACHE;
    m_axi_gmem_out_AWID <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWID;
    m_axi_gmem_out_AWLEN <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWLEN;
    m_axi_gmem_out_AWLOCK <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWLOCK;
    m_axi_gmem_out_AWPROT <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWPROT;
    m_axi_gmem_out_AWQOS <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWQOS;
    m_axi_gmem_out_AWREGION <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWREGION;
    m_axi_gmem_out_AWSIZE <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWSIZE;
    m_axi_gmem_out_AWUSER <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWUSER;
    m_axi_gmem_out_AWVALID <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_AWVALID;
    m_axi_gmem_out_BREADY <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_BREADY;
    m_axi_gmem_out_RREADY <= ap_const_logic_0;
    m_axi_gmem_out_WDATA <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WDATA;
    m_axi_gmem_out_WID <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WID;
    m_axi_gmem_out_WLAST <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WLAST;
    m_axi_gmem_out_WSTRB <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WSTRB;
    m_axi_gmem_out_WUSER <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WUSER;
    m_axi_gmem_out_WVALID <= store_tile_mm_Loop_Out_writey_proc_U0_m_axi_gmem_out_WVALID;
    outbuf_address0 <= store_tile_mm_Loop_Out_writey_proc_U0_outbuf_address0;
    outbuf_ce0 <= store_tile_mm_Loop_Out_writey_proc_U0_outbuf_ce0;
    outbuf_d0 <= ap_const_lv32_0;
    outbuf_read <= store_tile_mm_Loop_Out_writey_proc_U0_outbuf_write;
    outbuf_we0 <= ap_const_logic_0;
    output_ftmap_read <= store_tile_mm_Loop_Out_writey_proc_U0_output_ftmap_read;
    phase_read <= store_tile_mm_Block_entry23_proc_U0_phase_read;
    store_tile_mm_Block_entry23_proc_U0_ap_continue <= (ap_sync_channel_write_shl_ln333_cast_loc_i_i_channel and ap_sync_channel_write_p_cast_loc_i_i_channel and ap_sync_channel_write_out_tile_offset_cast_loc_i_i_channel and ap_sync_channel_write_h0_cast6_loc_i_i_channel);
    store_tile_mm_Block_entry23_proc_U0_ap_start <= (tmp_3_empty_n and tmp_2_empty_n);
    store_tile_mm_Loop_Out_writey_proc_U0_ap_continue <= ap_continue;
    store_tile_mm_Loop_Out_writey_proc_U0_ap_start <= (tmp_4_empty_n and tmp_1_empty_n and shl_ln333_cast_loc_i_i_channel_empty_n and p_cast_loc_i_i_channel_empty_n and out_tile_offset_cast_loc_i_i_channel_empty_n and h0_cast6_loc_i_i_channel_empty_n and (ap_sync_reg_store_tile_mm_Loop_Out_writey_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    store_tile_mm_Loop_Out_writey_proc_U0_outbuf_write <= ap_const_logic_0;
    w0_read <= entry_proc_U0_w0_read;
end behav;
