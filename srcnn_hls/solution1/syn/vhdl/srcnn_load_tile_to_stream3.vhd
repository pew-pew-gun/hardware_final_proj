-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_load_tile_to_stream3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_in_AWREADY : IN STD_LOGIC;
    m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WVALID : OUT STD_LOGIC;
    m_axi_gmem_in_WREADY : IN STD_LOGIC;
    m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_WLAST : OUT STD_LOGIC;
    m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_in_ARREADY : IN STD_LOGIC;
    m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RVALID : IN STD_LOGIC;
    m_axi_gmem_in_RREADY : OUT STD_LOGIC;
    m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_RLAST : IN STD_LOGIC;
    m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BVALID : IN STD_LOGIC;
    m_axi_gmem_in_BREADY : OUT STD_LOGIC;
    m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_ftmap : IN STD_LOGIC_VECTOR (63 downto 0);
    h0 : IN STD_LOGIC_VECTOR (8 downto 0);
    w0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    s_pix_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_pix_i_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    s_pix_i_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    s_pix_i_full_n : IN STD_LOGIC;
    s_pix_i_write : OUT STD_LOGIC;
    tw_eff_loc_i_c2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    tw_eff_loc_i_c2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    tw_eff_loc_i_c2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    tw_eff_loc_i_c2_full_n : IN STD_LOGIC;
    tw_eff_loc_i_c2_write : OUT STD_LOGIC;
    w0_c4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    w0_c4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    w0_c4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    w0_c4_full_n : IN STD_LOGIC;
    w0_c4_write : OUT STD_LOGIC;
    h0_c6_din : OUT STD_LOGIC_VECTOR (8 downto 0);
    h0_c6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_c6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    h0_c6_full_n : IN STD_LOGIC;
    h0_c6_write : OUT STD_LOGIC );
end;


architecture behav of srcnn_load_tile_to_stream3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv10_3FA : STD_LOGIC_VECTOR (9 downto 0) := "1111111010";
    constant ap_const_lv9_1FA : STD_LOGIC_VECTOR (8 downto 0) := "111111010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal s_pix_i_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tw_eff_loc_i_c2_blk_n : STD_LOGIC;
    signal w0_c4_blk_n : STD_LOGIC;
    signal h0_c6_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal add_ln103_fu_244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln103_reg_514 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln104_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_reg_519 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln104_fu_256_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln104_reg_524 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln103_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln103_reg_529 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln103_1_fu_274_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln103_1_reg_534 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln110_fu_280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln110_reg_539 : STD_LOGIC_VECTOR (9 downto 0);
    signal py_2_fu_301_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal py_2_reg_547 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln109_fu_385_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln109_reg_552 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln103_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal px_1_fu_398_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal px_1_reg_560 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_in_addr_reg_565 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln109_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_in_addr_read_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_reg_189 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln113_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal py_fu_118 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln917_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln916_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln917_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_fu_224_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal th_eff_cast_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal h0_cast4_i_fu_236_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal w0_cast_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln110_fu_260_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read_cast_fu_270_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln104_fu_307_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal iy_fu_311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln104_2_fu_316_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal iy_1_fu_329_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln106_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal iy_2_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_355_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln113_1_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln113_fu_363_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln113_1_fu_375_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln113_fu_379_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln109_fu_389_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln110_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_fu_408_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln110_2_fu_413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_1_fu_426_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln112_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln113_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln112_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln113_2_fu_452_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln113_2_fu_460_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln113_fu_464_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln113_1_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln113_1_fu_473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_478_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln103_fu_296_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    px_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (s_pix_i_full_n = ap_const_logic_1))) then 
                px_reg_189 <= px_1_reg_560;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln103_fu_296_p2 = ap_const_lv1_0))) then 
                px_reg_189 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    py_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                py_fu_118 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln109_fu_393_p2 = ap_const_lv1_1))) then 
                py_fu_118 <= py_2_reg_547;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln103_1_reg_534 <= add_ln103_1_fu_274_p2;
                add_ln103_reg_514 <= add_ln103_fu_244_p2;
                add_ln104_reg_519 <= add_ln104_fu_250_p2;
                sext_ln103_reg_529 <= sext_ln103_fu_266_p1;
                sext_ln104_reg_524 <= sext_ln104_fu_256_p1;
                sext_ln110_reg_539 <= sext_ln110_fu_280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_in_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                gmem_in_addr_read_reg_571 <= m_axi_gmem_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln109_fu_393_p2 = ap_const_lv1_0))) then
                gmem_in_addr_reg_565 <= sext_ln113_fu_488_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                px_1_reg_560 <= px_1_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                py_2_reg_547 <= py_2_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln103_fu_296_p2 = ap_const_lv1_0))) then
                    sext_ln109_reg_552(19 downto 2) <= sext_ln109_fu_385_p1(19 downto 2);
            end if;
        end if;
    end process;
    sext_ln109_reg_552(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_in_ARREADY, m_axi_gmem_in_RVALID, s_pix_i_full_n, tw_eff_loc_i_c2_full_n, w0_c4_full_n, h0_c6_full_n, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state2, icmp_ln103_fu_296_p2, ap_CS_fsm_state3, icmp_ln109_fu_393_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln103_fu_296_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln109_fu_393_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_gmem_in_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((m_axi_gmem_in_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (s_pix_i_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_1_fu_274_p2 <= std_logic_vector(unsigned(p_read_cast_fu_270_p1) + unsigned(ap_const_lv9_C));
    add_ln103_fu_244_p2 <= std_logic_vector(unsigned(th_eff_cast_fu_240_p1) + unsigned(ap_const_lv9_C));
    add_ln104_2_fu_316_p2 <= std_logic_vector(signed(add_ln104_reg_519) + signed(zext_ln104_fu_307_p1));
    add_ln104_fu_250_p2 <= std_logic_vector(unsigned(h0_cast4_i_fu_236_p1) + unsigned(ap_const_lv10_3FA));
    add_ln110_2_fu_413_p2 <= std_logic_vector(signed(sext_ln110_reg_539) + signed(zext_ln110_fu_404_p1));
    add_ln110_fu_260_p2 <= std_logic_vector(unsigned(w0_cast_fu_232_p1) + unsigned(ap_const_lv9_1FA));
    add_ln113_1_fu_473_p2 <= std_logic_vector(signed(sext_ln113_1_fu_469_p1) + signed(input_ftmap));
    add_ln113_fu_464_p2 <= std_logic_vector(signed(sext_ln109_reg_552) + signed(zext_ln113_2_fu_460_p1));
    add_ln917_fu_200_p2 <= std_logic_vector(unsigned(h0) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(m_axi_gmem_in_RVALID)
    begin
        if ((m_axi_gmem_in_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(s_pix_i_full_n)
    begin
        if ((s_pix_i_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, tw_eff_loc_i_c2_full_n, w0_c4_full_n, h0_c6_full_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem_in_ARREADY)
    begin
        if ((m_axi_gmem_in_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, tw_eff_loc_i_c2_full_n, w0_c4_full_n, h0_c6_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln103_fu_296_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln103_fu_296_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln103_fu_296_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln103_fu_296_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_in_blk_n_AR_assign_proc : process(m_axi_gmem_in_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem_in_blk_n_AR <= m_axi_gmem_in_ARREADY;
        else 
            gmem_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_in_blk_n_R_assign_proc : process(m_axi_gmem_in_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gmem_in_blk_n_R <= m_axi_gmem_in_RVALID;
        else 
            gmem_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    h0_c6_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h0_c6_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_c6_blk_n <= h0_c6_full_n;
        else 
            h0_c6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h0_c6_din <= h0;

    h0_c6_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tw_eff_loc_i_c2_full_n, w0_c4_full_n, h0_c6_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h0_c6_write <= ap_const_logic_1;
        else 
            h0_c6_write <= ap_const_logic_0;
        end if; 
    end process;

    h0_cast4_i_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h0),10));
    icmp_ln103_fu_296_p2 <= "1" when (py_fu_118 = add_ln103_reg_514) else "0";
    icmp_ln106_fu_341_p2 <= "1" when (unsigned(iy_1_fu_329_p3) > unsigned(ap_const_lv10_FE)) else "0";
    icmp_ln109_fu_393_p2 <= "1" when (px_reg_189 = add_ln103_1_reg_534) else "0";
    icmp_ln112_fu_434_p2 <= "1" when (unsigned(ix_1_fu_426_p3) > unsigned(ap_const_lv10_FE)) else "0";
    ix_1_fu_426_p3 <= 
        ap_const_lv10_0 when (tmp_6_fu_418_p3(0) = '1') else 
        add_ln110_2_fu_413_p2;
    ix_fu_408_p2 <= std_logic_vector(signed(sext_ln103_reg_529) + signed(zext_ln109_fu_389_p1));
    iy_1_fu_329_p3 <= 
        ap_const_lv10_0 when (tmp_5_fu_321_p3(0) = '1') else 
        add_ln104_2_fu_316_p2;
    iy_2_fu_347_p3 <= 
        ap_const_lv8_FE when (icmp_ln106_fu_341_p2(0) = '1') else 
        trunc_ln104_fu_337_p1;
    iy_fu_311_p2 <= std_logic_vector(signed(sext_ln104_reg_524) + signed(zext_ln103_fu_292_p1));
    m_axi_gmem_in_ARADDR <= gmem_in_addr_reg_565;
    m_axi_gmem_in_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_in_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_ARID <= ap_const_lv1_0;
    m_axi_gmem_in_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_in_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_in_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_in_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_in_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_in_ARVALID_assign_proc : process(m_axi_gmem_in_ARREADY, ap_CS_fsm_state4)
    begin
        if (((m_axi_gmem_in_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_in_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_in_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_AWID <= ap_const_lv1_0;
    m_axi_gmem_in_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_in_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_in_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_in_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_in_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_in_AWVALID <= ap_const_logic_0;
    m_axi_gmem_in_BREADY <= ap_const_logic_0;

    m_axi_gmem_in_RREADY_assign_proc : process(m_axi_gmem_in_RVALID, ap_CS_fsm_state12)
    begin
        if (((m_axi_gmem_in_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_WDATA <= ap_const_lv32_0;
    m_axi_gmem_in_WID <= ap_const_lv1_0;
    m_axi_gmem_in_WLAST <= ap_const_logic_0;
    m_axi_gmem_in_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_in_WUSER <= ap_const_lv1_0;
    m_axi_gmem_in_WVALID <= ap_const_logic_0;
    p_read_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),9));
    px_1_fu_398_p2 <= std_logic_vector(unsigned(px_reg_189) + unsigned(ap_const_lv9_1));
    py_2_fu_301_p2 <= std_logic_vector(unsigned(py_fu_118) + unsigned(ap_const_lv9_1));

    s_pix_i_blk_n_assign_proc : process(s_pix_i_full_n, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_pix_i_blk_n <= s_pix_i_full_n;
        else 
            s_pix_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_pix_i_din <= gmem_in_addr_read_reg_571;

    s_pix_i_write_assign_proc : process(s_pix_i_full_n, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (s_pix_i_full_n = ap_const_logic_1))) then 
            s_pix_i_write <= ap_const_logic_1;
        else 
            s_pix_i_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln112_fu_444_p3 <= 
        ap_const_lv8_FE when (icmp_ln112_fu_434_p2(0) = '1') else 
        trunc_ln113_fu_440_p1;
        sext_ln103_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln110_fu_260_p2),11));

        sext_ln104_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln104_fu_250_p2),11));

        sext_ln109_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln113_fu_379_p2),20));

        sext_ln110_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln110_fu_260_p2),10));

        sext_ln113_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln113_fu_464_p2),64));

        sext_ln113_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_478_p4),64));

    shl_ln113_1_fu_367_p3 <= (iy_2_fu_347_p3 & ap_const_lv2_0);
    shl_ln113_2_fu_452_p3 <= (select_ln112_fu_444_p3 & ap_const_lv2_0);
    shl_ln_fu_355_p3 <= (iy_2_fu_347_p3 & ap_const_lv10_0);
    sub_ln113_fu_379_p2 <= std_logic_vector(unsigned(zext_ln113_fu_363_p1) - unsigned(zext_ln113_1_fu_375_p1));
    th_eff_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(th_eff_fu_224_p3),9));
    th_eff_fu_224_p3 <= 
        xor_ln917_fu_218_p2 when (tmp_fu_206_p3(0) = '1') else 
        ap_const_lv8_10;
    tmp_5_fu_321_p3 <= iy_fu_311_p2(10 downto 10);
    tmp_6_fu_418_p3 <= ix_fu_408_p2(10 downto 10);
    tmp_fu_206_p3 <= add_ln917_fu_200_p2(8 downto 8);
    trunc_ln104_fu_337_p1 <= iy_1_fu_329_p3(8 - 1 downto 0);
    trunc_ln113_fu_440_p1 <= ix_1_fu_426_p3(8 - 1 downto 0);
    trunc_ln7_fu_478_p4 <= add_ln113_1_fu_473_p2(63 downto 2);
    trunc_ln916_fu_214_p1 <= h0(8 - 1 downto 0);

    tw_eff_loc_i_c2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tw_eff_loc_i_c2_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tw_eff_loc_i_c2_blk_n <= tw_eff_loc_i_c2_full_n;
        else 
            tw_eff_loc_i_c2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tw_eff_loc_i_c2_din <= p_read;

    tw_eff_loc_i_c2_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tw_eff_loc_i_c2_full_n, w0_c4_full_n, h0_c6_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tw_eff_loc_i_c2_write <= ap_const_logic_1;
        else 
            tw_eff_loc_i_c2_write <= ap_const_logic_0;
        end if; 
    end process;


    w0_c4_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, w0_c4_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_c4_blk_n <= w0_c4_full_n;
        else 
            w0_c4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w0_c4_din <= w0;

    w0_c4_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, tw_eff_loc_i_c2_full_n, w0_c4_full_n, h0_c6_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (h0_c6_full_n = ap_const_logic_0) or (w0_c4_full_n = ap_const_logic_0) or (tw_eff_loc_i_c2_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w0_c4_write <= ap_const_logic_1;
        else 
            w0_c4_write <= ap_const_logic_0;
        end if; 
    end process;

    w0_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w0),9));
    xor_ln917_fu_218_p2 <= (trunc_ln916_fu_214_p1 xor ap_const_lv8_FF);
    zext_ln103_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(py_fu_118),11));
    zext_ln104_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(py_fu_118),10));
    zext_ln109_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(px_reg_189),11));
    zext_ln110_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(px_reg_189),10));
    zext_ln113_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln113_1_fu_367_p3),19));
    zext_ln113_2_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln113_2_fu_452_p3),20));
    zext_ln113_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_355_p3),19));
end behav;
