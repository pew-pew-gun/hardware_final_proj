-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity srcnn_compute_tile_Pipeline_Conv2_ReLU is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    f2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_7_ce0 : OUT STD_LOGIC;
    f2_7_we0 : OUT STD_LOGIC;
    f2_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_6_ce0 : OUT STD_LOGIC;
    f2_6_we0 : OUT STD_LOGIC;
    f2_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_5_ce0 : OUT STD_LOGIC;
    f2_5_we0 : OUT STD_LOGIC;
    f2_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_4_ce0 : OUT STD_LOGIC;
    f2_4_we0 : OUT STD_LOGIC;
    f2_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_3_ce0 : OUT STD_LOGIC;
    f2_3_we0 : OUT STD_LOGIC;
    f2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_2_ce0 : OUT STD_LOGIC;
    f2_2_we0 : OUT STD_LOGIC;
    f2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_1_ce0 : OUT STD_LOGIC;
    f2_1_we0 : OUT STD_LOGIC;
    f2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    f2_ce0 : OUT STD_LOGIC;
    f2_we0 : OUT STD_LOGIC;
    f2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    acc2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_ce0 : OUT STD_LOGIC;
    acc2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_1_ce0 : OUT STD_LOGIC;
    acc2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_2_ce0 : OUT STD_LOGIC;
    acc2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_3_ce0 : OUT STD_LOGIC;
    acc2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_4_ce0 : OUT STD_LOGIC;
    acc2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_5_ce0 : OUT STD_LOGIC;
    acc2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_6_ce0 : OUT STD_LOGIC;
    acc2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    acc2_7_ce0 : OUT STD_LOGIC;
    acc2_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4325_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4325_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4325_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_4325_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_4325_p_ce : OUT STD_LOGIC );
end;


architecture behav of srcnn_compute_tile_Pipeline_Conv2_ReLU is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln194_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_790 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_reg_790_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal t_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_1_load_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_2_load_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_3_load_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_4_load_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_5_load_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc2_6_load_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal n2_1_fu_78 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln194_fu_376_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln1_fu_354_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln198_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_390_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_fu_400_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_1_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_439_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_1_fu_449_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_3_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_2_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_1_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_2_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_2_fu_498_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_5_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_4_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_2_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_3_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_3_fu_547_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_7_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_6_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_3_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_3_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_4_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_4_fu_596_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_9_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_8_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_4_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_4_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_5_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_635_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_5_fu_645_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_11_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_10_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_5_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_5_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_6_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_684_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_6_fu_694_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_13_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_12_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_6_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_6_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln198_7_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_733_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln198_7_fu_743_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln198_15_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_14_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_7_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln198_7_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component srcnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U377 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_1_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_296_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U378 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_2_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_302_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U379 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_3_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_308_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U380 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_4_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_314_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U381 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_5_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_320_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U382 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_6_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_326_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U383 : component srcnn_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => acc2_7_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_332_p2);

    flow_control_loop_pipe_sequential_init_U : component srcnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    n2_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_346_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n2_1_fu_78 <= add_ln194_fu_376_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n2_1_fu_78 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc2_1_load_reg_849 <= acc2_1_q0;
                acc2_2_load_reg_856 <= acc2_2_q0;
                acc2_3_load_reg_863 <= acc2_3_q0;
                acc2_4_load_reg_870 <= acc2_4_q0;
                acc2_5_load_reg_877 <= acc2_5_q0;
                acc2_6_load_reg_884 <= acc2_6_q0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                t_1_reg_891 <= acc2_7_q0;
                t_reg_842 <= acc2_q0;
                    zext_ln194_reg_790_pp0_iter1_reg(1 downto 0) <= zext_ln194_reg_790(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_346_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln194_reg_790(1 downto 0) <= zext_ln194_fu_364_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln194_reg_790(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln194_reg_790_pp0_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc2_1_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_1_ce0 <= ap_const_logic_1;
        else 
            acc2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_2_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_2_ce0 <= ap_const_logic_1;
        else 
            acc2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_3_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_3_ce0 <= ap_const_logic_1;
        else 
            acc2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_4_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_4_ce0 <= ap_const_logic_1;
        else 
            acc2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_5_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_5_ce0 <= ap_const_logic_1;
        else 
            acc2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_6_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_6_ce0 <= ap_const_logic_1;
        else 
            acc2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_7_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_7_ce0 <= ap_const_logic_1;
        else 
            acc2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc2_address0 <= zext_ln194_fu_364_p1(2 - 1 downto 0);

    acc2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc2_ce0 <= ap_const_logic_1;
        else 
            acc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln194_fu_376_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n2) + unsigned(ap_const_lv6_8));
    and_ln198_1_fu_471_p2 <= (or_ln198_1_fu_465_p2 and grp_fu_296_p2);
    and_ln198_2_fu_520_p2 <= (or_ln198_2_fu_514_p2 and grp_fu_302_p2);
    and_ln198_3_fu_569_p2 <= (or_ln198_3_fu_563_p2 and grp_fu_308_p2);
    and_ln198_4_fu_618_p2 <= (or_ln198_4_fu_612_p2 and grp_fu_314_p2);
    and_ln198_5_fu_667_p2 <= (or_ln198_5_fu_661_p2 and grp_fu_320_p2);
    and_ln198_6_fu_716_p2 <= (or_ln198_6_fu_710_p2 and grp_fu_326_p2);
    and_ln198_7_fu_765_p2 <= (or_ln198_7_fu_759_p2 and grp_fu_332_p2);
    and_ln198_fu_422_p2 <= (or_ln198_fu_416_p2 and grp_fu_4325_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_346_p3)
    begin
        if (((tmp_fu_346_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n2_1_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n2 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_n2 <= n2_1_fu_78;
        end if; 
    end process;

    bitcast_ln198_1_fu_436_p1 <= acc2_1_load_reg_849;
    bitcast_ln198_2_fu_485_p1 <= acc2_2_load_reg_856;
    bitcast_ln198_3_fu_534_p1 <= acc2_3_load_reg_863;
    bitcast_ln198_4_fu_583_p1 <= acc2_4_load_reg_870;
    bitcast_ln198_5_fu_632_p1 <= acc2_5_load_reg_877;
    bitcast_ln198_6_fu_681_p1 <= acc2_6_load_reg_884;
    bitcast_ln198_7_fu_730_p1 <= t_1_reg_891;
    bitcast_ln198_fu_387_p1 <= t_reg_842;
    f2_1_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_1_ce0 <= ap_const_logic_1;
        else 
            f2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_1_d0 <= 
        acc2_1_load_reg_849 when (and_ln198_1_fu_471_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_1_we0 <= ap_const_logic_1;
        else 
            f2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_2_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_2_ce0 <= ap_const_logic_1;
        else 
            f2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_2_d0 <= 
        acc2_2_load_reg_856 when (and_ln198_2_fu_520_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_2_we0 <= ap_const_logic_1;
        else 
            f2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_3_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_3_ce0 <= ap_const_logic_1;
        else 
            f2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_3_d0 <= 
        acc2_3_load_reg_863 when (and_ln198_3_fu_569_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_3_we0 <= ap_const_logic_1;
        else 
            f2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_4_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_4_ce0 <= ap_const_logic_1;
        else 
            f2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_4_d0 <= 
        acc2_4_load_reg_870 when (and_ln198_4_fu_618_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_4_we0 <= ap_const_logic_1;
        else 
            f2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_5_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_5_ce0 <= ap_const_logic_1;
        else 
            f2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_5_d0 <= 
        acc2_5_load_reg_877 when (and_ln198_5_fu_667_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_5_we0 <= ap_const_logic_1;
        else 
            f2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_6_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_6_ce0 <= ap_const_logic_1;
        else 
            f2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_6_d0 <= 
        acc2_6_load_reg_884 when (and_ln198_6_fu_716_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_6_we0 <= ap_const_logic_1;
        else 
            f2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_7_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_7_ce0 <= ap_const_logic_1;
        else 
            f2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_7_d0 <= 
        t_1_reg_891 when (and_ln198_7_fu_765_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_7_we0 <= ap_const_logic_1;
        else 
            f2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_address0 <= zext_ln194_reg_790_pp0_iter1_reg(2 - 1 downto 0);

    f2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_ce0 <= ap_const_logic_1;
        else 
            f2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_d0 <= 
        t_reg_842 when (and_ln198_fu_422_p2(0) = '1') else 
        ap_const_lv32_0;

    f2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            f2_we0 <= ap_const_logic_1;
        else 
            f2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_4325_p_ce <= ap_const_logic_1;
    grp_fu_4325_p_din0 <= acc2_q0;
    grp_fu_4325_p_din1 <= ap_const_lv32_0;
    grp_fu_4325_p_opcode <= ap_const_lv5_2;
    icmp_ln198_10_fu_649_p2 <= "0" when (tmp_10_fu_635_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_11_fu_655_p2 <= "1" when (trunc_ln198_5_fu_645_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_12_fu_698_p2 <= "0" when (tmp_12_fu_684_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_13_fu_704_p2 <= "1" when (trunc_ln198_6_fu_694_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_14_fu_747_p2 <= "0" when (tmp_14_fu_733_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_15_fu_753_p2 <= "1" when (trunc_ln198_7_fu_743_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_1_fu_410_p2 <= "1" when (trunc_ln198_fu_400_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_2_fu_453_p2 <= "0" when (tmp_3_fu_439_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_3_fu_459_p2 <= "1" when (trunc_ln198_1_fu_449_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_4_fu_502_p2 <= "0" when (tmp_5_fu_488_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_5_fu_508_p2 <= "1" when (trunc_ln198_2_fu_498_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_6_fu_551_p2 <= "0" when (tmp_7_fu_537_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_7_fu_557_p2 <= "1" when (trunc_ln198_3_fu_547_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_8_fu_600_p2 <= "0" when (tmp_9_fu_586_p4 = ap_const_lv8_FF) else "1";
    icmp_ln198_9_fu_606_p2 <= "1" when (trunc_ln198_4_fu_596_p1 = ap_const_lv23_0) else "0";
    icmp_ln198_fu_404_p2 <= "0" when (tmp_1_fu_390_p4 = ap_const_lv8_FF) else "1";
    lshr_ln1_fu_354_p4 <= ap_sig_allocacmp_n2(4 downto 3);
    or_ln198_1_fu_465_p2 <= (icmp_ln198_3_fu_459_p2 or icmp_ln198_2_fu_453_p2);
    or_ln198_2_fu_514_p2 <= (icmp_ln198_5_fu_508_p2 or icmp_ln198_4_fu_502_p2);
    or_ln198_3_fu_563_p2 <= (icmp_ln198_7_fu_557_p2 or icmp_ln198_6_fu_551_p2);
    or_ln198_4_fu_612_p2 <= (icmp_ln198_9_fu_606_p2 or icmp_ln198_8_fu_600_p2);
    or_ln198_5_fu_661_p2 <= (icmp_ln198_11_fu_655_p2 or icmp_ln198_10_fu_649_p2);
    or_ln198_6_fu_710_p2 <= (icmp_ln198_13_fu_704_p2 or icmp_ln198_12_fu_698_p2);
    or_ln198_7_fu_759_p2 <= (icmp_ln198_15_fu_753_p2 or icmp_ln198_14_fu_747_p2);
    or_ln198_fu_416_p2 <= (icmp_ln198_fu_404_p2 or icmp_ln198_1_fu_410_p2);
    tmp_10_fu_635_p4 <= bitcast_ln198_5_fu_632_p1(30 downto 23);
    tmp_12_fu_684_p4 <= bitcast_ln198_6_fu_681_p1(30 downto 23);
    tmp_14_fu_733_p4 <= bitcast_ln198_7_fu_730_p1(30 downto 23);
    tmp_1_fu_390_p4 <= bitcast_ln198_fu_387_p1(30 downto 23);
    tmp_3_fu_439_p4 <= bitcast_ln198_1_fu_436_p1(30 downto 23);
    tmp_5_fu_488_p4 <= bitcast_ln198_2_fu_485_p1(30 downto 23);
    tmp_7_fu_537_p4 <= bitcast_ln198_3_fu_534_p1(30 downto 23);
    tmp_9_fu_586_p4 <= bitcast_ln198_4_fu_583_p1(30 downto 23);
    tmp_fu_346_p3 <= ap_sig_allocacmp_n2(5 downto 5);
    trunc_ln198_1_fu_449_p1 <= bitcast_ln198_1_fu_436_p1(23 - 1 downto 0);
    trunc_ln198_2_fu_498_p1 <= bitcast_ln198_2_fu_485_p1(23 - 1 downto 0);
    trunc_ln198_3_fu_547_p1 <= bitcast_ln198_3_fu_534_p1(23 - 1 downto 0);
    trunc_ln198_4_fu_596_p1 <= bitcast_ln198_4_fu_583_p1(23 - 1 downto 0);
    trunc_ln198_5_fu_645_p1 <= bitcast_ln198_5_fu_632_p1(23 - 1 downto 0);
    trunc_ln198_6_fu_694_p1 <= bitcast_ln198_6_fu_681_p1(23 - 1 downto 0);
    trunc_ln198_7_fu_743_p1 <= bitcast_ln198_7_fu_730_p1(23 - 1 downto 0);
    trunc_ln198_fu_400_p1 <= bitcast_ln198_fu_387_p1(23 - 1 downto 0);
    zext_ln194_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_354_p4),64));
end behav;
